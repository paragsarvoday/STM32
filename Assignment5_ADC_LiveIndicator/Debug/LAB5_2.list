
LAB5_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d54  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08005f04  08005f04  00006f04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f88  08005f88  0000706c  2**0
                  CONTENTS
  4 .ARM          00000008  08005f88  08005f88  00006f88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005f90  08005f90  0000706c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f90  08005f90  00006f90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005f94  08005f94  00006f94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08005f98  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000706c  2**0
                  CONTENTS
 10 .bss          000009e0  2000006c  2000006c  0000706c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000a4c  20000a4c  0000706c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000706c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018155  00000000  00000000  0000709c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c7a  00000000  00000000  0001f1f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001508  00000000  00000000  00021e70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001099  00000000  00000000  00023378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027445  00000000  00000000  00024411  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000192fe  00000000  00000000  0004b856  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f32a1  00000000  00000000  00064b54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00157df5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006094  00000000  00000000  00157e38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  0015decc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005eec 	.word	0x08005eec

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000070 	.word	0x20000070
 80001ec:	08005eec 	.word	0x08005eec

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b086      	sub	sp, #24
 8000584:	af02      	add	r7, sp, #8
 8000586:	4603      	mov	r3, r0
 8000588:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800058a:	79fb      	ldrb	r3, [r7, #7]
 800058c:	f023 030f 	bic.w	r3, r3, #15
 8000590:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000592:	79fb      	ldrb	r3, [r7, #7]
 8000594:	011b      	lsls	r3, r3, #4
 8000596:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0 -> bxxxx1100
 8000598:	7bfb      	ldrb	r3, [r7, #15]
 800059a:	f043 030c 	orr.w	r3, r3, #12
 800059e:	b2db      	uxtb	r3, r3
 80005a0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0 -> bxxxx1000
 80005a2:	7bfb      	ldrb	r3, [r7, #15]
 80005a4:	f043 0308 	orr.w	r3, r3, #8
 80005a8:	b2db      	uxtb	r3, r3
 80005aa:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0 -> bxxxx1100
 80005ac:	7bbb      	ldrb	r3, [r7, #14]
 80005ae:	f043 030c 	orr.w	r3, r3, #12
 80005b2:	b2db      	uxtb	r3, r3
 80005b4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0 -> bxxxx1000
 80005b6:	7bbb      	ldrb	r3, [r7, #14]
 80005b8:	f043 0308 	orr.w	r3, r3, #8
 80005bc:	b2db      	uxtb	r3, r3
 80005be:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80005c0:	f107 0208 	add.w	r2, r7, #8
 80005c4:	2364      	movs	r3, #100	@ 0x64
 80005c6:	9300      	str	r3, [sp, #0]
 80005c8:	2304      	movs	r3, #4
 80005ca:	214e      	movs	r1, #78	@ 0x4e
 80005cc:	4803      	ldr	r0, [pc, #12]	@ (80005dc <lcd_send_cmd+0x5c>)
 80005ce:	f002 fc37 	bl	8002e40 <HAL_I2C_Master_Transmit>
}
 80005d2:	bf00      	nop
 80005d4:	3710      	adds	r7, #16
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	200002f8 	.word	0x200002f8

080005e0 <lcd_send_data>:

void lcd_send_data (char data)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b086      	sub	sp, #24
 80005e4:	af02      	add	r7, sp, #8
 80005e6:	4603      	mov	r3, r0
 80005e8:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80005ea:	79fb      	ldrb	r3, [r7, #7]
 80005ec:	f023 030f 	bic.w	r3, r3, #15
 80005f0:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80005f2:	79fb      	ldrb	r3, [r7, #7]
 80005f4:	011b      	lsls	r3, r3, #4
 80005f6:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0 -> bxxxx1101
 80005f8:	7bfb      	ldrb	r3, [r7, #15]
 80005fa:	f043 030d 	orr.w	r3, r3, #13
 80005fe:	b2db      	uxtb	r3, r3
 8000600:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0 -> bxxxx1001
 8000602:	7bfb      	ldrb	r3, [r7, #15]
 8000604:	f043 0309 	orr.w	r3, r3, #9
 8000608:	b2db      	uxtb	r3, r3
 800060a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0 -> bxxxx1101
 800060c:	7bbb      	ldrb	r3, [r7, #14]
 800060e:	f043 030d 	orr.w	r3, r3, #13
 8000612:	b2db      	uxtb	r3, r3
 8000614:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0 -> bxxxx1001
 8000616:	7bbb      	ldrb	r3, [r7, #14]
 8000618:	f043 0309 	orr.w	r3, r3, #9
 800061c:	b2db      	uxtb	r3, r3
 800061e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000620:	f107 0208 	add.w	r2, r7, #8
 8000624:	2364      	movs	r3, #100	@ 0x64
 8000626:	9300      	str	r3, [sp, #0]
 8000628:	2304      	movs	r3, #4
 800062a:	214e      	movs	r1, #78	@ 0x4e
 800062c:	4803      	ldr	r0, [pc, #12]	@ (800063c <lcd_send_data+0x5c>)
 800062e:	f002 fc07 	bl	8002e40 <HAL_I2C_Master_Transmit>
}
 8000632:	bf00      	nop
 8000634:	3710      	adds	r7, #16
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	200002f8 	.word	0x200002f8

08000640 <lcd_clear>:

void lcd_clear (void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 8000646:	2080      	movs	r0, #128	@ 0x80
 8000648:	f7ff ff9a 	bl	8000580 <lcd_send_cmd>
	for (int i=0; i<70; i++)
 800064c:	2300      	movs	r3, #0
 800064e:	607b      	str	r3, [r7, #4]
 8000650:	e005      	b.n	800065e <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 8000652:	2020      	movs	r0, #32
 8000654:	f7ff ffc4 	bl	80005e0 <lcd_send_data>
	for (int i=0; i<70; i++)
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	3301      	adds	r3, #1
 800065c:	607b      	str	r3, [r7, #4]
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	2b45      	cmp	r3, #69	@ 0x45
 8000662:	ddf6      	ble.n	8000652 <lcd_clear+0x12>
	}
}
 8000664:	bf00      	nop
 8000666:	bf00      	nop
 8000668:	3708      	adds	r7, #8
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}

0800066e <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 800066e:	b580      	push	{r7, lr}
 8000670:	b082      	sub	sp, #8
 8000672:	af00      	add	r7, sp, #0
 8000674:	6078      	str	r0, [r7, #4]
 8000676:	6039      	str	r1, [r7, #0]
    switch (row)
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	2b00      	cmp	r3, #0
 800067c:	d003      	beq.n	8000686 <lcd_put_cur+0x18>
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	2b01      	cmp	r3, #1
 8000682:	d005      	beq.n	8000690 <lcd_put_cur+0x22>
 8000684:	e009      	b.n	800069a <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8000686:	683b      	ldr	r3, [r7, #0]
 8000688:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800068c:	603b      	str	r3, [r7, #0]
            break;
 800068e:	e004      	b.n	800069a <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8000690:	683b      	ldr	r3, [r7, #0]
 8000692:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8000696:	603b      	str	r3, [r7, #0]
            break;
 8000698:	bf00      	nop
    }

    lcd_send_cmd (col);
 800069a:	683b      	ldr	r3, [r7, #0]
 800069c:	b2db      	uxtb	r3, r3
 800069e:	4618      	mov	r0, r3
 80006a0:	f7ff ff6e 	bl	8000580 <lcd_send_cmd>
}
 80006a4:	bf00      	nop
 80006a6:	3708      	adds	r7, #8
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}

080006ac <lcd_init>:


void lcd_init (void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 80006b0:	2032      	movs	r0, #50	@ 0x32
 80006b2:	f001 f841 	bl	8001738 <HAL_Delay>
	lcd_send_cmd (0x30);
 80006b6:	2030      	movs	r0, #48	@ 0x30
 80006b8:	f7ff ff62 	bl	8000580 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 80006bc:	2005      	movs	r0, #5
 80006be:	f001 f83b 	bl	8001738 <HAL_Delay>
	lcd_send_cmd (0x30);
 80006c2:	2030      	movs	r0, #48	@ 0x30
 80006c4:	f7ff ff5c 	bl	8000580 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 80006c8:	2001      	movs	r0, #1
 80006ca:	f001 f835 	bl	8001738 <HAL_Delay>
	lcd_send_cmd (0x30);
 80006ce:	2030      	movs	r0, #48	@ 0x30
 80006d0:	f7ff ff56 	bl	8000580 <lcd_send_cmd>
	HAL_Delay(10);
 80006d4:	200a      	movs	r0, #10
 80006d6:	f001 f82f 	bl	8001738 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 80006da:	2020      	movs	r0, #32
 80006dc:	f7ff ff50 	bl	8000580 <lcd_send_cmd>
	HAL_Delay(10);
 80006e0:	200a      	movs	r0, #10
 80006e2:	f001 f829 	bl	8001738 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80006e6:	2028      	movs	r0, #40	@ 0x28
 80006e8:	f7ff ff4a 	bl	8000580 <lcd_send_cmd>
	HAL_Delay(1);
 80006ec:	2001      	movs	r0, #1
 80006ee:	f001 f823 	bl	8001738 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80006f2:	2008      	movs	r0, #8
 80006f4:	f7ff ff44 	bl	8000580 <lcd_send_cmd>
	HAL_Delay(1);
 80006f8:	2001      	movs	r0, #1
 80006fa:	f001 f81d 	bl	8001738 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 80006fe:	2001      	movs	r0, #1
 8000700:	f7ff ff3e 	bl	8000580 <lcd_send_cmd>
	HAL_Delay(1);
 8000704:	2001      	movs	r0, #1
 8000706:	f001 f817 	bl	8001738 <HAL_Delay>
	HAL_Delay(1);
 800070a:	2001      	movs	r0, #1
 800070c:	f001 f814 	bl	8001738 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000710:	2006      	movs	r0, #6
 8000712:	f7ff ff35 	bl	8000580 <lcd_send_cmd>
	HAL_Delay(1);
 8000716:	2001      	movs	r0, #1
 8000718:	f001 f80e 	bl	8001738 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 800071c:	200c      	movs	r0, #12
 800071e:	f7ff ff2f 	bl	8000580 <lcd_send_cmd>
}
 8000722:	bf00      	nop
 8000724:	bd80      	pop	{r7, pc}

08000726 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000726:	b580      	push	{r7, lr}
 8000728:	b082      	sub	sp, #8
 800072a:	af00      	add	r7, sp, #0
 800072c:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 800072e:	e006      	b.n	800073e <lcd_send_string+0x18>
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	1c5a      	adds	r2, r3, #1
 8000734:	607a      	str	r2, [r7, #4]
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	4618      	mov	r0, r3
 800073a:	f7ff ff51 	bl	80005e0 <lcd_send_data>
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	2b00      	cmp	r3, #0
 8000744:	d1f4      	bne.n	8000730 <lcd_send_string+0xa>
}
 8000746:	bf00      	nop
 8000748:	bf00      	nop
 800074a:	3708      	adds	r7, #8
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}

08000750 <Load_graph>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Load_graph(void){
 8000750:	b580      	push	{r7, lr}
 8000752:	b08c      	sub	sp, #48	@ 0x30
 8000754:	af00      	add	r7, sp, #0
	char line_1[] = {0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10};
 8000756:	4a37      	ldr	r2, [pc, #220]	@ (8000834 <Load_graph+0xe4>)
 8000758:	f107 0318 	add.w	r3, r7, #24
 800075c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000760:	e883 0003 	stmia.w	r3, {r0, r1}
	char line_2[] = {0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18};
 8000764:	4a34      	ldr	r2, [pc, #208]	@ (8000838 <Load_graph+0xe8>)
 8000766:	f107 0310 	add.w	r3, r7, #16
 800076a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800076e:	e883 0003 	stmia.w	r3, {r0, r1}
	char line_3[] = {0x1c,0x1c,0x1c,0x1c,0x1c,0x1c,0x1c,0x1c};
 8000772:	4a32      	ldr	r2, [pc, #200]	@ (800083c <Load_graph+0xec>)
 8000774:	f107 0308 	add.w	r3, r7, #8
 8000778:	e892 0003 	ldmia.w	r2, {r0, r1}
 800077c:	e883 0003 	stmia.w	r3, {r0, r1}
	char line_4[] = {0x1E,0x1E,0x1E,0x1E,0x1E,0x1E,0x1E,0x1E};
 8000780:	4a2f      	ldr	r2, [pc, #188]	@ (8000840 <Load_graph+0xf0>)
 8000782:	463b      	mov	r3, r7
 8000784:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000788:	e883 0003 	stmia.w	r3, {r0, r1}


	  lcd_send_cmd(0x40);
 800078c:	2040      	movs	r0, #64	@ 0x40
 800078e:	f7ff fef7 	bl	8000580 <lcd_send_cmd>
	  for(int i=0;i<8;i++){
 8000792:	2300      	movs	r3, #0
 8000794:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000796:	e00a      	b.n	80007ae <Load_graph+0x5e>
		  lcd_send_data(line_1[i]);
 8000798:	f107 0218 	add.w	r2, r7, #24
 800079c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800079e:	4413      	add	r3, r2
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	4618      	mov	r0, r3
 80007a4:	f7ff ff1c 	bl	80005e0 <lcd_send_data>
	  for(int i=0;i<8;i++){
 80007a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80007aa:	3301      	adds	r3, #1
 80007ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80007ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80007b0:	2b07      	cmp	r3, #7
 80007b2:	ddf1      	ble.n	8000798 <Load_graph+0x48>
	  }
	  lcd_send_cmd(0x40+8);
 80007b4:	2048      	movs	r0, #72	@ 0x48
 80007b6:	f7ff fee3 	bl	8000580 <lcd_send_cmd>
	  for(int i=0;i<8;i++){
 80007ba:	2300      	movs	r3, #0
 80007bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80007be:	e00a      	b.n	80007d6 <Load_graph+0x86>
		  lcd_send_data(line_2[i]);
 80007c0:	f107 0210 	add.w	r2, r7, #16
 80007c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80007c6:	4413      	add	r3, r2
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	4618      	mov	r0, r3
 80007cc:	f7ff ff08 	bl	80005e0 <lcd_send_data>
	  for(int i=0;i<8;i++){
 80007d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80007d2:	3301      	adds	r3, #1
 80007d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80007d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80007d8:	2b07      	cmp	r3, #7
 80007da:	ddf1      	ble.n	80007c0 <Load_graph+0x70>
	  }
	  lcd_send_cmd(0x40+16);
 80007dc:	2050      	movs	r0, #80	@ 0x50
 80007de:	f7ff fecf 	bl	8000580 <lcd_send_cmd>
	  for(int i=0;i<8;i++){
 80007e2:	2300      	movs	r3, #0
 80007e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80007e6:	e00a      	b.n	80007fe <Load_graph+0xae>
		  lcd_send_data(line_3[i]);
 80007e8:	f107 0208 	add.w	r2, r7, #8
 80007ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007ee:	4413      	add	r3, r2
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	4618      	mov	r0, r3
 80007f4:	f7ff fef4 	bl	80005e0 <lcd_send_data>
	  for(int i=0;i<8;i++){
 80007f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007fa:	3301      	adds	r3, #1
 80007fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80007fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000800:	2b07      	cmp	r3, #7
 8000802:	ddf1      	ble.n	80007e8 <Load_graph+0x98>
	  }
	  lcd_send_cmd(0x40+24);
 8000804:	2058      	movs	r0, #88	@ 0x58
 8000806:	f7ff febb 	bl	8000580 <lcd_send_cmd>
	  for(int i=0;i<8;i++){
 800080a:	2300      	movs	r3, #0
 800080c:	623b      	str	r3, [r7, #32]
 800080e:	e009      	b.n	8000824 <Load_graph+0xd4>
		  lcd_send_data(line_4[i]);
 8000810:	463a      	mov	r2, r7
 8000812:	6a3b      	ldr	r3, [r7, #32]
 8000814:	4413      	add	r3, r2
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	4618      	mov	r0, r3
 800081a:	f7ff fee1 	bl	80005e0 <lcd_send_data>
	  for(int i=0;i<8;i++){
 800081e:	6a3b      	ldr	r3, [r7, #32]
 8000820:	3301      	adds	r3, #1
 8000822:	623b      	str	r3, [r7, #32]
 8000824:	6a3b      	ldr	r3, [r7, #32]
 8000826:	2b07      	cmp	r3, #7
 8000828:	ddf2      	ble.n	8000810 <Load_graph+0xc0>
	  }

}
 800082a:	bf00      	nop
 800082c:	bf00      	nop
 800082e:	3730      	adds	r7, #48	@ 0x30
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	08005f04 	.word	0x08005f04
 8000838:	08005f0c 	.word	0x08005f0c
 800083c:	08005f14 	.word	0x08005f14
 8000840:	08005f1c 	.word	0x08005f1c

08000844 <read_sensor>:

void read_sensor(void){
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 8000848:	481d      	ldr	r0, [pc, #116]	@ (80008c0 <read_sensor+0x7c>)
 800084a:	f000 ffdd 	bl	8001808 <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc1, 200);
 800084e:	21c8      	movs	r1, #200	@ 0xc8
 8000850:	481b      	ldr	r0, [pc, #108]	@ (80008c0 <read_sensor+0x7c>)
 8000852:	f001 f8ab 	bl	80019ac <HAL_ADC_PollForConversion>

		  adc_value = HAL_ADC_GetValue(&hadc1);
 8000856:	481a      	ldr	r0, [pc, #104]	@ (80008c0 <read_sensor+0x7c>)
 8000858:	f001 f933 	bl	8001ac2 <HAL_ADC_GetValue>
 800085c:	4603      	mov	r3, r0
 800085e:	4a19      	ldr	r2, [pc, #100]	@ (80008c4 <read_sensor+0x80>)
 8000860:	6013      	str	r3, [r2, #0]
		  voltage_integer = (adc_value * 800) / 4095;
 8000862:	4b18      	ldr	r3, [pc, #96]	@ (80008c4 <read_sensor+0x80>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800086a:	fb03 f202 	mul.w	r2, r3, r2
 800086e:	4b16      	ldr	r3, [pc, #88]	@ (80008c8 <read_sensor+0x84>)
 8000870:	fba3 1302 	umull	r1, r3, r3, r2
 8000874:	1ad2      	subs	r2, r2, r3
 8000876:	0852      	lsrs	r2, r2, #1
 8000878:	4413      	add	r3, r2
 800087a:	0adb      	lsrs	r3, r3, #11
 800087c:	4a13      	ldr	r2, [pc, #76]	@ (80008cc <read_sensor+0x88>)
 800087e:	6013      	str	r3, [r2, #0]

		  integer_part = voltage_integer / 10;
 8000880:	4b12      	ldr	r3, [pc, #72]	@ (80008cc <read_sensor+0x88>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4a12      	ldr	r2, [pc, #72]	@ (80008d0 <read_sensor+0x8c>)
 8000886:	fba2 2303 	umull	r2, r3, r2, r3
 800088a:	08db      	lsrs	r3, r3, #3
 800088c:	4a11      	ldr	r2, [pc, #68]	@ (80008d4 <read_sensor+0x90>)
 800088e:	6013      	str	r3, [r2, #0]
		  decimal_part = voltage_integer % 10;
 8000890:	4b0e      	ldr	r3, [pc, #56]	@ (80008cc <read_sensor+0x88>)
 8000892:	6819      	ldr	r1, [r3, #0]
 8000894:	4b0e      	ldr	r3, [pc, #56]	@ (80008d0 <read_sensor+0x8c>)
 8000896:	fba3 2301 	umull	r2, r3, r3, r1
 800089a:	08da      	lsrs	r2, r3, #3
 800089c:	4613      	mov	r3, r2
 800089e:	009b      	lsls	r3, r3, #2
 80008a0:	4413      	add	r3, r2
 80008a2:	005b      	lsls	r3, r3, #1
 80008a4:	1aca      	subs	r2, r1, r3
 80008a6:	4b0c      	ldr	r3, [pc, #48]	@ (80008d8 <read_sensor+0x94>)
 80008a8:	601a      	str	r2, [r3, #0]
		  sprintf(DATA_ARRAY, "Temp: %02d.%01d", integer_part, decimal_part );
 80008aa:	4b0a      	ldr	r3, [pc, #40]	@ (80008d4 <read_sensor+0x90>)
 80008ac:	681a      	ldr	r2, [r3, #0]
 80008ae:	4b0a      	ldr	r3, [pc, #40]	@ (80008d8 <read_sensor+0x94>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	490a      	ldr	r1, [pc, #40]	@ (80008dc <read_sensor+0x98>)
 80008b4:	480a      	ldr	r0, [pc, #40]	@ (80008e0 <read_sensor+0x9c>)
 80008b6:	f004 fe79 	bl	80055ac <siprintf>

}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	20000200 	.word	0x20000200
 80008c4:	200008d4 	.word	0x200008d4
 80008c8:	00100101 	.word	0x00100101
 80008cc:	200008d8 	.word	0x200008d8
 80008d0:	cccccccd 	.word	0xcccccccd
 80008d4:	200008dc 	.word	0x200008dc
 80008d8:	200008e0 	.word	0x200008e0
 80008dc:	08005f24 	.word	0x08005f24
 80008e0:	200008c8 	.word	0x200008c8

080008e4 <display_graphs>:

void display_graphs(void){
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
	  lcd_put_cur(0, 0);
 80008e8:	2100      	movs	r1, #0
 80008ea:	2000      	movs	r0, #0
 80008ec:	f7ff febf 	bl	800066e <lcd_put_cur>
	  lcd_send_string(DATA_ARRAY);
 80008f0:	4835      	ldr	r0, [pc, #212]	@ (80009c8 <display_graphs+0xe4>)
 80008f2:	f7ff ff18 	bl	8000726 <lcd_send_string>
	  lcd_put_cur(0, 10);
 80008f6:	210a      	movs	r1, #10
 80008f8:	2000      	movs	r0, #0
 80008fa:	f7ff feb8 	bl	800066e <lcd_put_cur>
	  lcd_send_data(0xDF);
 80008fe:	20df      	movs	r0, #223	@ 0xdf
 8000900:	f7ff fe6e 	bl	80005e0 <lcd_send_data>
	  lcd_put_cur(0, 11);
 8000904:	210b      	movs	r1, #11
 8000906:	2000      	movs	r0, #0
 8000908:	f7ff feb1 	bl	800066e <lcd_put_cur>
	  lcd_send_string("C");
 800090c:	482f      	ldr	r0, [pc, #188]	@ (80009cc <display_graphs+0xe8>)
 800090e:	f7ff ff0a 	bl	8000726 <lcd_send_string>

	full=integer_part/5;
 8000912:	4b2f      	ldr	r3, [pc, #188]	@ (80009d0 <display_graphs+0xec>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	4a2f      	ldr	r2, [pc, #188]	@ (80009d4 <display_graphs+0xf0>)
 8000918:	fba2 2303 	umull	r2, r3, r2, r3
 800091c:	089b      	lsrs	r3, r3, #2
 800091e:	461a      	mov	r2, r3
 8000920:	4b2d      	ldr	r3, [pc, #180]	@ (80009d8 <display_graphs+0xf4>)
 8000922:	601a      	str	r2, [r3, #0]
	for(j=0;j<16;j++){
 8000924:	4b2d      	ldr	r3, [pc, #180]	@ (80009dc <display_graphs+0xf8>)
 8000926:	2200      	movs	r2, #0
 8000928:	601a      	str	r2, [r3, #0]
 800092a:	e00d      	b.n	8000948 <display_graphs+0x64>
		lcd_put_cur(1, j);
 800092c:	4b2b      	ldr	r3, [pc, #172]	@ (80009dc <display_graphs+0xf8>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4619      	mov	r1, r3
 8000932:	2001      	movs	r0, #1
 8000934:	f7ff fe9b 	bl	800066e <lcd_put_cur>
		lcd_send_string(" ");
 8000938:	4829      	ldr	r0, [pc, #164]	@ (80009e0 <display_graphs+0xfc>)
 800093a:	f7ff fef4 	bl	8000726 <lcd_send_string>
	for(j=0;j<16;j++){
 800093e:	4b27      	ldr	r3, [pc, #156]	@ (80009dc <display_graphs+0xf8>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	3301      	adds	r3, #1
 8000944:	4a25      	ldr	r2, [pc, #148]	@ (80009dc <display_graphs+0xf8>)
 8000946:	6013      	str	r3, [r2, #0]
 8000948:	4b24      	ldr	r3, [pc, #144]	@ (80009dc <display_graphs+0xf8>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	2b0f      	cmp	r3, #15
 800094e:	dded      	ble.n	800092c <display_graphs+0x48>
	}
	for(j=0;j<full;j++){
 8000950:	4b22      	ldr	r3, [pc, #136]	@ (80009dc <display_graphs+0xf8>)
 8000952:	2200      	movs	r2, #0
 8000954:	601a      	str	r2, [r3, #0]
 8000956:	e00d      	b.n	8000974 <display_graphs+0x90>
		lcd_put_cur(1, j);
 8000958:	4b20      	ldr	r3, [pc, #128]	@ (80009dc <display_graphs+0xf8>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4619      	mov	r1, r3
 800095e:	2001      	movs	r0, #1
 8000960:	f7ff fe85 	bl	800066e <lcd_put_cur>
		lcd_send_data(255);
 8000964:	20ff      	movs	r0, #255	@ 0xff
 8000966:	f7ff fe3b 	bl	80005e0 <lcd_send_data>
	for(j=0;j<full;j++){
 800096a:	4b1c      	ldr	r3, [pc, #112]	@ (80009dc <display_graphs+0xf8>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	3301      	adds	r3, #1
 8000970:	4a1a      	ldr	r2, [pc, #104]	@ (80009dc <display_graphs+0xf8>)
 8000972:	6013      	str	r3, [r2, #0]
 8000974:	4b19      	ldr	r3, [pc, #100]	@ (80009dc <display_graphs+0xf8>)
 8000976:	681a      	ldr	r2, [r3, #0]
 8000978:	4b17      	ldr	r3, [pc, #92]	@ (80009d8 <display_graphs+0xf4>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	429a      	cmp	r2, r3
 800097e:	dbeb      	blt.n	8000958 <display_graphs+0x74>
	}
	deci= integer_part%5;
 8000980:	4b13      	ldr	r3, [pc, #76]	@ (80009d0 <display_graphs+0xec>)
 8000982:	6819      	ldr	r1, [r3, #0]
 8000984:	4b13      	ldr	r3, [pc, #76]	@ (80009d4 <display_graphs+0xf0>)
 8000986:	fba3 2301 	umull	r2, r3, r3, r1
 800098a:	089a      	lsrs	r2, r3, #2
 800098c:	4613      	mov	r3, r2
 800098e:	009b      	lsls	r3, r3, #2
 8000990:	4413      	add	r3, r2
 8000992:	1aca      	subs	r2, r1, r3
 8000994:	4b13      	ldr	r3, [pc, #76]	@ (80009e4 <display_graphs+0x100>)
 8000996:	601a      	str	r2, [r3, #0]
	lcd_put_cur(1, full);
 8000998:	4b0f      	ldr	r3, [pc, #60]	@ (80009d8 <display_graphs+0xf4>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4619      	mov	r1, r3
 800099e:	2001      	movs	r0, #1
 80009a0:	f7ff fe65 	bl	800066e <lcd_put_cur>
	if (deci!=0){
 80009a4:	4b0f      	ldr	r3, [pc, #60]	@ (80009e4 <display_graphs+0x100>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d008      	beq.n	80009be <display_graphs+0xda>
    lcd_send_data(deci-1);
 80009ac:	4b0d      	ldr	r3, [pc, #52]	@ (80009e4 <display_graphs+0x100>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	b2db      	uxtb	r3, r3
 80009b2:	3b01      	subs	r3, #1
 80009b4:	b2db      	uxtb	r3, r3
 80009b6:	4618      	mov	r0, r3
 80009b8:	f7ff fe12 	bl	80005e0 <lcd_send_data>
	}
	else {
		lcd_send_string(" ");
	}

}
 80009bc:	e002      	b.n	80009c4 <display_graphs+0xe0>
		lcd_send_string(" ");
 80009be:	4808      	ldr	r0, [pc, #32]	@ (80009e0 <display_graphs+0xfc>)
 80009c0:	f7ff feb1 	bl	8000726 <lcd_send_string>
}
 80009c4:	bf00      	nop
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	200008c8 	.word	0x200008c8
 80009cc:	08005f34 	.word	0x08005f34
 80009d0:	200008dc 	.word	0x200008dc
 80009d4:	cccccccd 	.word	0xcccccccd
 80009d8:	200008e4 	.word	0x200008e4
 80009dc:	200008c4 	.word	0x200008c4
 80009e0:	08005f38 	.word	0x08005f38
 80009e4:	200008e8 	.word	0x200008e8

080009e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009ec:	f000 fe32 	bl	8001654 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009f0:	f000 f81c 	bl	8000a2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009f4:	f000 fa0a 	bl	8000e0c <MX_GPIO_Init>
  MX_ETH_Init();
 80009f8:	f000 f8d4 	bl	8000ba4 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80009fc:	f000 f9ae 	bl	8000d5c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000a00:	f000 f9d6 	bl	8000db0 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 8000a04:	f000 f91c 	bl	8000c40 <MX_I2C1_Init>
  MX_ADC1_Init();
 8000a08:	f000 f87a 	bl	8000b00 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000a0c:	f000 f958 	bl	8000cc0 <MX_TIM2_Init>

  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000a10:	4805      	ldr	r0, [pc, #20]	@ (8000a28 <main+0x40>)
 8000a12:	f003 fbe1 	bl	80041d8 <HAL_TIM_Base_Start_IT>
  lcd_init();
 8000a16:	f7ff fe49 	bl	80006ac <lcd_init>
  lcd_clear();
 8000a1a:	f7ff fe11 	bl	8000640 <lcd_clear>
  Load_graph();
 8000a1e:	f7ff fe97 	bl	8000750 <Load_graph>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  read_sensor();
 8000a22:	f7ff ff0f 	bl	8000844 <read_sensor>
 8000a26:	e7fc      	b.n	8000a22 <main+0x3a>
 8000a28:	2000034c 	.word	0x2000034c

08000a2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b094      	sub	sp, #80	@ 0x50
 8000a30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a32:	f107 0320 	add.w	r3, r7, #32
 8000a36:	2230      	movs	r2, #48	@ 0x30
 8000a38:	2100      	movs	r1, #0
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f004 fdd6 	bl	80055ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a40:	f107 030c 	add.w	r3, r7, #12
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	605a      	str	r2, [r3, #4]
 8000a4a:	609a      	str	r2, [r3, #8]
 8000a4c:	60da      	str	r2, [r3, #12]
 8000a4e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a50:	2300      	movs	r3, #0
 8000a52:	60bb      	str	r3, [r7, #8]
 8000a54:	4b28      	ldr	r3, [pc, #160]	@ (8000af8 <SystemClock_Config+0xcc>)
 8000a56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a58:	4a27      	ldr	r2, [pc, #156]	@ (8000af8 <SystemClock_Config+0xcc>)
 8000a5a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a5e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a60:	4b25      	ldr	r3, [pc, #148]	@ (8000af8 <SystemClock_Config+0xcc>)
 8000a62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a68:	60bb      	str	r3, [r7, #8]
 8000a6a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	607b      	str	r3, [r7, #4]
 8000a70:	4b22      	ldr	r3, [pc, #136]	@ (8000afc <SystemClock_Config+0xd0>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a21      	ldr	r2, [pc, #132]	@ (8000afc <SystemClock_Config+0xd0>)
 8000a76:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000a7a:	6013      	str	r3, [r2, #0]
 8000a7c:	4b1f      	ldr	r3, [pc, #124]	@ (8000afc <SystemClock_Config+0xd0>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a84:	607b      	str	r3, [r7, #4]
 8000a86:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a88:	2301      	movs	r3, #1
 8000a8a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a8c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000a90:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a92:	2302      	movs	r3, #2
 8000a94:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a96:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000a9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a9c:	2304      	movs	r3, #4
 8000a9e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000aa0:	23a8      	movs	r3, #168	@ 0xa8
 8000aa2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000aa8:	2307      	movs	r3, #7
 8000aaa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aac:	f107 0320 	add.w	r3, r7, #32
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f002 fea9 	bl	8003808 <HAL_RCC_OscConfig>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000abc:	f000 facd 	bl	800105a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ac0:	230f      	movs	r3, #15
 8000ac2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000acc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000ad0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ad2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ad6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ad8:	f107 030c 	add.w	r3, r7, #12
 8000adc:	2105      	movs	r1, #5
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f003 f90a 	bl	8003cf8 <HAL_RCC_ClockConfig>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000aea:	f000 fab6 	bl	800105a <Error_Handler>
  }
}
 8000aee:	bf00      	nop
 8000af0:	3750      	adds	r7, #80	@ 0x50
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	40023800 	.word	0x40023800
 8000afc:	40007000 	.word	0x40007000

08000b00 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b084      	sub	sp, #16
 8000b04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b06:	463b      	mov	r3, r7
 8000b08:	2200      	movs	r2, #0
 8000b0a:	601a      	str	r2, [r3, #0]
 8000b0c:	605a      	str	r2, [r3, #4]
 8000b0e:	609a      	str	r2, [r3, #8]
 8000b10:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000b12:	4b21      	ldr	r3, [pc, #132]	@ (8000b98 <MX_ADC1_Init+0x98>)
 8000b14:	4a21      	ldr	r2, [pc, #132]	@ (8000b9c <MX_ADC1_Init+0x9c>)
 8000b16:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000b18:	4b1f      	ldr	r3, [pc, #124]	@ (8000b98 <MX_ADC1_Init+0x98>)
 8000b1a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000b1e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b20:	4b1d      	ldr	r3, [pc, #116]	@ (8000b98 <MX_ADC1_Init+0x98>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000b26:	4b1c      	ldr	r3, [pc, #112]	@ (8000b98 <MX_ADC1_Init+0x98>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000b2c:	4b1a      	ldr	r3, [pc, #104]	@ (8000b98 <MX_ADC1_Init+0x98>)
 8000b2e:	2201      	movs	r2, #1
 8000b30:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b32:	4b19      	ldr	r3, [pc, #100]	@ (8000b98 <MX_ADC1_Init+0x98>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b3a:	4b17      	ldr	r3, [pc, #92]	@ (8000b98 <MX_ADC1_Init+0x98>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b40:	4b15      	ldr	r3, [pc, #84]	@ (8000b98 <MX_ADC1_Init+0x98>)
 8000b42:	4a17      	ldr	r2, [pc, #92]	@ (8000ba0 <MX_ADC1_Init+0xa0>)
 8000b44:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b46:	4b14      	ldr	r3, [pc, #80]	@ (8000b98 <MX_ADC1_Init+0x98>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000b4c:	4b12      	ldr	r3, [pc, #72]	@ (8000b98 <MX_ADC1_Init+0x98>)
 8000b4e:	2201      	movs	r2, #1
 8000b50:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000b52:	4b11      	ldr	r3, [pc, #68]	@ (8000b98 <MX_ADC1_Init+0x98>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b5a:	4b0f      	ldr	r3, [pc, #60]	@ (8000b98 <MX_ADC1_Init+0x98>)
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b60:	480d      	ldr	r0, [pc, #52]	@ (8000b98 <MX_ADC1_Init+0x98>)
 8000b62:	f000 fe0d 	bl	8001780 <HAL_ADC_Init>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000b6c:	f000 fa75 	bl	800105a <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000b70:	2303      	movs	r3, #3
 8000b72:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000b74:	2301      	movs	r3, #1
 8000b76:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8000b78:	2302      	movs	r3, #2
 8000b7a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b7c:	463b      	mov	r3, r7
 8000b7e:	4619      	mov	r1, r3
 8000b80:	4805      	ldr	r0, [pc, #20]	@ (8000b98 <MX_ADC1_Init+0x98>)
 8000b82:	f000 ffab 	bl	8001adc <HAL_ADC_ConfigChannel>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000b8c:	f000 fa65 	bl	800105a <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b90:	bf00      	nop
 8000b92:	3710      	adds	r7, #16
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	20000200 	.word	0x20000200
 8000b9c:	40012000 	.word	0x40012000
 8000ba0:	0f000001 	.word	0x0f000001

08000ba4 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000ba8:	4b1f      	ldr	r3, [pc, #124]	@ (8000c28 <MX_ETH_Init+0x84>)
 8000baa:	4a20      	ldr	r2, [pc, #128]	@ (8000c2c <MX_ETH_Init+0x88>)
 8000bac:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000bae:	4b20      	ldr	r3, [pc, #128]	@ (8000c30 <MX_ETH_Init+0x8c>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000bb4:	4b1e      	ldr	r3, [pc, #120]	@ (8000c30 <MX_ETH_Init+0x8c>)
 8000bb6:	2280      	movs	r2, #128	@ 0x80
 8000bb8:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000bba:	4b1d      	ldr	r3, [pc, #116]	@ (8000c30 <MX_ETH_Init+0x8c>)
 8000bbc:	22e1      	movs	r2, #225	@ 0xe1
 8000bbe:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000bc0:	4b1b      	ldr	r3, [pc, #108]	@ (8000c30 <MX_ETH_Init+0x8c>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000bc6:	4b1a      	ldr	r3, [pc, #104]	@ (8000c30 <MX_ETH_Init+0x8c>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000bcc:	4b18      	ldr	r3, [pc, #96]	@ (8000c30 <MX_ETH_Init+0x8c>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000bd2:	4b15      	ldr	r3, [pc, #84]	@ (8000c28 <MX_ETH_Init+0x84>)
 8000bd4:	4a16      	ldr	r2, [pc, #88]	@ (8000c30 <MX_ETH_Init+0x8c>)
 8000bd6:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000bd8:	4b13      	ldr	r3, [pc, #76]	@ (8000c28 <MX_ETH_Init+0x84>)
 8000bda:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000bde:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000be0:	4b11      	ldr	r3, [pc, #68]	@ (8000c28 <MX_ETH_Init+0x84>)
 8000be2:	4a14      	ldr	r2, [pc, #80]	@ (8000c34 <MX_ETH_Init+0x90>)
 8000be4:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000be6:	4b10      	ldr	r3, [pc, #64]	@ (8000c28 <MX_ETH_Init+0x84>)
 8000be8:	4a13      	ldr	r2, [pc, #76]	@ (8000c38 <MX_ETH_Init+0x94>)
 8000bea:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000bec:	4b0e      	ldr	r3, [pc, #56]	@ (8000c28 <MX_ETH_Init+0x84>)
 8000bee:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000bf2:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000bf4:	480c      	ldr	r0, [pc, #48]	@ (8000c28 <MX_ETH_Init+0x84>)
 8000bf6:	f001 fab1 	bl	800215c <HAL_ETH_Init>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000c00:	f000 fa2b 	bl	800105a <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000c04:	2238      	movs	r2, #56	@ 0x38
 8000c06:	2100      	movs	r1, #0
 8000c08:	480c      	ldr	r0, [pc, #48]	@ (8000c3c <MX_ETH_Init+0x98>)
 8000c0a:	f004 fcef 	bl	80055ec <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000c0e:	4b0b      	ldr	r3, [pc, #44]	@ (8000c3c <MX_ETH_Init+0x98>)
 8000c10:	2221      	movs	r2, #33	@ 0x21
 8000c12:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000c14:	4b09      	ldr	r3, [pc, #36]	@ (8000c3c <MX_ETH_Init+0x98>)
 8000c16:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8000c1a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000c1c:	4b07      	ldr	r3, [pc, #28]	@ (8000c3c <MX_ETH_Init+0x98>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000c22:	bf00      	nop
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	20000248 	.word	0x20000248
 8000c2c:	40028000 	.word	0x40028000
 8000c30:	200008f4 	.word	0x200008f4
 8000c34:	20000160 	.word	0x20000160
 8000c38:	200000c0 	.word	0x200000c0
 8000c3c:	20000088 	.word	0x20000088

08000c40 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c44:	4b1b      	ldr	r3, [pc, #108]	@ (8000cb4 <MX_I2C1_Init+0x74>)
 8000c46:	4a1c      	ldr	r2, [pc, #112]	@ (8000cb8 <MX_I2C1_Init+0x78>)
 8000c48:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000c4a:	4b1a      	ldr	r3, [pc, #104]	@ (8000cb4 <MX_I2C1_Init+0x74>)
 8000c4c:	4a1b      	ldr	r2, [pc, #108]	@ (8000cbc <MX_I2C1_Init+0x7c>)
 8000c4e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c50:	4b18      	ldr	r3, [pc, #96]	@ (8000cb4 <MX_I2C1_Init+0x74>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000c56:	4b17      	ldr	r3, [pc, #92]	@ (8000cb4 <MX_I2C1_Init+0x74>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c5c:	4b15      	ldr	r3, [pc, #84]	@ (8000cb4 <MX_I2C1_Init+0x74>)
 8000c5e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000c62:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c64:	4b13      	ldr	r3, [pc, #76]	@ (8000cb4 <MX_I2C1_Init+0x74>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000c6a:	4b12      	ldr	r3, [pc, #72]	@ (8000cb4 <MX_I2C1_Init+0x74>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c70:	4b10      	ldr	r3, [pc, #64]	@ (8000cb4 <MX_I2C1_Init+0x74>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c76:	4b0f      	ldr	r3, [pc, #60]	@ (8000cb4 <MX_I2C1_Init+0x74>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c7c:	480d      	ldr	r0, [pc, #52]	@ (8000cb4 <MX_I2C1_Init+0x74>)
 8000c7e:	f001 ff9b 	bl	8002bb8 <HAL_I2C_Init>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000c88:	f000 f9e7 	bl	800105a <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4809      	ldr	r0, [pc, #36]	@ (8000cb4 <MX_I2C1_Init+0x74>)
 8000c90:	f002 fc2f 	bl	80034f2 <HAL_I2CEx_ConfigAnalogFilter>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000c9a:	f000 f9de 	bl	800105a <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	4804      	ldr	r0, [pc, #16]	@ (8000cb4 <MX_I2C1_Init+0x74>)
 8000ca2:	f002 fc62 	bl	800356a <HAL_I2CEx_ConfigDigitalFilter>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000cac:	f000 f9d5 	bl	800105a <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000cb0:	bf00      	nop
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	200002f8 	.word	0x200002f8
 8000cb8:	40005400 	.word	0x40005400
 8000cbc:	000186a0 	.word	0x000186a0

08000cc0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b086      	sub	sp, #24
 8000cc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cc6:	f107 0308 	add.w	r3, r7, #8
 8000cca:	2200      	movs	r2, #0
 8000ccc:	601a      	str	r2, [r3, #0]
 8000cce:	605a      	str	r2, [r3, #4]
 8000cd0:	609a      	str	r2, [r3, #8]
 8000cd2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cd4:	463b      	mov	r3, r7
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	601a      	str	r2, [r3, #0]
 8000cda:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000cdc:	4b1e      	ldr	r3, [pc, #120]	@ (8000d58 <MX_TIM2_Init+0x98>)
 8000cde:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ce2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8400-1;
 8000ce4:	4b1c      	ldr	r3, [pc, #112]	@ (8000d58 <MX_TIM2_Init+0x98>)
 8000ce6:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8000cea:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cec:	4b1a      	ldr	r3, [pc, #104]	@ (8000d58 <MX_TIM2_Init+0x98>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000cf2:	4b19      	ldr	r3, [pc, #100]	@ (8000d58 <MX_TIM2_Init+0x98>)
 8000cf4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000cf8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cfa:	4b17      	ldr	r3, [pc, #92]	@ (8000d58 <MX_TIM2_Init+0x98>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d00:	4b15      	ldr	r3, [pc, #84]	@ (8000d58 <MX_TIM2_Init+0x98>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d06:	4814      	ldr	r0, [pc, #80]	@ (8000d58 <MX_TIM2_Init+0x98>)
 8000d08:	f003 fa16 	bl	8004138 <HAL_TIM_Base_Init>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000d12:	f000 f9a2 	bl	800105a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d16:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d1a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d1c:	f107 0308 	add.w	r3, r7, #8
 8000d20:	4619      	mov	r1, r3
 8000d22:	480d      	ldr	r0, [pc, #52]	@ (8000d58 <MX_TIM2_Init+0x98>)
 8000d24:	f003 fbb8 	bl	8004498 <HAL_TIM_ConfigClockSource>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000d2e:	f000 f994 	bl	800105a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d32:	2300      	movs	r3, #0
 8000d34:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d36:	2300      	movs	r3, #0
 8000d38:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d3a:	463b      	mov	r3, r7
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	4806      	ldr	r0, [pc, #24]	@ (8000d58 <MX_TIM2_Init+0x98>)
 8000d40:	f003 fde0 	bl	8004904 <HAL_TIMEx_MasterConfigSynchronization>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000d4a:	f000 f986 	bl	800105a <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d4e:	bf00      	nop
 8000d50:	3718      	adds	r7, #24
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	2000034c 	.word	0x2000034c

08000d5c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d60:	4b11      	ldr	r3, [pc, #68]	@ (8000da8 <MX_USART3_UART_Init+0x4c>)
 8000d62:	4a12      	ldr	r2, [pc, #72]	@ (8000dac <MX_USART3_UART_Init+0x50>)
 8000d64:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d66:	4b10      	ldr	r3, [pc, #64]	@ (8000da8 <MX_USART3_UART_Init+0x4c>)
 8000d68:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d6c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d6e:	4b0e      	ldr	r3, [pc, #56]	@ (8000da8 <MX_USART3_UART_Init+0x4c>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d74:	4b0c      	ldr	r3, [pc, #48]	@ (8000da8 <MX_USART3_UART_Init+0x4c>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d7a:	4b0b      	ldr	r3, [pc, #44]	@ (8000da8 <MX_USART3_UART_Init+0x4c>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d80:	4b09      	ldr	r3, [pc, #36]	@ (8000da8 <MX_USART3_UART_Init+0x4c>)
 8000d82:	220c      	movs	r2, #12
 8000d84:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d86:	4b08      	ldr	r3, [pc, #32]	@ (8000da8 <MX_USART3_UART_Init+0x4c>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d8c:	4b06      	ldr	r3, [pc, #24]	@ (8000da8 <MX_USART3_UART_Init+0x4c>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d92:	4805      	ldr	r0, [pc, #20]	@ (8000da8 <MX_USART3_UART_Init+0x4c>)
 8000d94:	f003 fe46 	bl	8004a24 <HAL_UART_Init>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000d9e:	f000 f95c 	bl	800105a <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000da2:	bf00      	nop
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	20000394 	.word	0x20000394
 8000dac:	40004800 	.word	0x40004800

08000db0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000db4:	4b14      	ldr	r3, [pc, #80]	@ (8000e08 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000db6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000dba:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000dbc:	4b12      	ldr	r3, [pc, #72]	@ (8000e08 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dbe:	2204      	movs	r2, #4
 8000dc0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000dc2:	4b11      	ldr	r3, [pc, #68]	@ (8000e08 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dc4:	2202      	movs	r2, #2
 8000dc6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000dc8:	4b0f      	ldr	r3, [pc, #60]	@ (8000e08 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000dce:	4b0e      	ldr	r3, [pc, #56]	@ (8000e08 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dd0:	2202      	movs	r2, #2
 8000dd2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000dd4:	4b0c      	ldr	r3, [pc, #48]	@ (8000e08 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000dda:	4b0b      	ldr	r3, [pc, #44]	@ (8000e08 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000de0:	4b09      	ldr	r3, [pc, #36]	@ (8000e08 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000de6:	4b08      	ldr	r3, [pc, #32]	@ (8000e08 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000de8:	2201      	movs	r2, #1
 8000dea:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000dec:	4b06      	ldr	r3, [pc, #24]	@ (8000e08 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000df2:	4805      	ldr	r0, [pc, #20]	@ (8000e08 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000df4:	f002 fbf8 	bl	80035e8 <HAL_PCD_Init>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000dfe:	f000 f92c 	bl	800105a <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000e02:	bf00      	nop
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	200003dc 	.word	0x200003dc

08000e0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b08c      	sub	sp, #48	@ 0x30
 8000e10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e12:	f107 031c 	add.w	r3, r7, #28
 8000e16:	2200      	movs	r2, #0
 8000e18:	601a      	str	r2, [r3, #0]
 8000e1a:	605a      	str	r2, [r3, #4]
 8000e1c:	609a      	str	r2, [r3, #8]
 8000e1e:	60da      	str	r2, [r3, #12]
 8000e20:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e22:	2300      	movs	r3, #0
 8000e24:	61bb      	str	r3, [r7, #24]
 8000e26:	4b50      	ldr	r3, [pc, #320]	@ (8000f68 <MX_GPIO_Init+0x15c>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e2a:	4a4f      	ldr	r2, [pc, #316]	@ (8000f68 <MX_GPIO_Init+0x15c>)
 8000e2c:	f043 0304 	orr.w	r3, r3, #4
 8000e30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e32:	4b4d      	ldr	r3, [pc, #308]	@ (8000f68 <MX_GPIO_Init+0x15c>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e36:	f003 0304 	and.w	r3, r3, #4
 8000e3a:	61bb      	str	r3, [r7, #24]
 8000e3c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e3e:	2300      	movs	r3, #0
 8000e40:	617b      	str	r3, [r7, #20]
 8000e42:	4b49      	ldr	r3, [pc, #292]	@ (8000f68 <MX_GPIO_Init+0x15c>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e46:	4a48      	ldr	r2, [pc, #288]	@ (8000f68 <MX_GPIO_Init+0x15c>)
 8000e48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e4e:	4b46      	ldr	r3, [pc, #280]	@ (8000f68 <MX_GPIO_Init+0x15c>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e56:	617b      	str	r3, [r7, #20]
 8000e58:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	613b      	str	r3, [r7, #16]
 8000e5e:	4b42      	ldr	r3, [pc, #264]	@ (8000f68 <MX_GPIO_Init+0x15c>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e62:	4a41      	ldr	r2, [pc, #260]	@ (8000f68 <MX_GPIO_Init+0x15c>)
 8000e64:	f043 0301 	orr.w	r3, r3, #1
 8000e68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e6a:	4b3f      	ldr	r3, [pc, #252]	@ (8000f68 <MX_GPIO_Init+0x15c>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e6e:	f003 0301 	and.w	r3, r3, #1
 8000e72:	613b      	str	r3, [r7, #16]
 8000e74:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e76:	2300      	movs	r3, #0
 8000e78:	60fb      	str	r3, [r7, #12]
 8000e7a:	4b3b      	ldr	r3, [pc, #236]	@ (8000f68 <MX_GPIO_Init+0x15c>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e7e:	4a3a      	ldr	r2, [pc, #232]	@ (8000f68 <MX_GPIO_Init+0x15c>)
 8000e80:	f043 0302 	orr.w	r3, r3, #2
 8000e84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e86:	4b38      	ldr	r3, [pc, #224]	@ (8000f68 <MX_GPIO_Init+0x15c>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e8a:	f003 0302 	and.w	r3, r3, #2
 8000e8e:	60fb      	str	r3, [r7, #12]
 8000e90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e92:	2300      	movs	r3, #0
 8000e94:	60bb      	str	r3, [r7, #8]
 8000e96:	4b34      	ldr	r3, [pc, #208]	@ (8000f68 <MX_GPIO_Init+0x15c>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e9a:	4a33      	ldr	r2, [pc, #204]	@ (8000f68 <MX_GPIO_Init+0x15c>)
 8000e9c:	f043 0308 	orr.w	r3, r3, #8
 8000ea0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ea2:	4b31      	ldr	r3, [pc, #196]	@ (8000f68 <MX_GPIO_Init+0x15c>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ea6:	f003 0308 	and.w	r3, r3, #8
 8000eaa:	60bb      	str	r3, [r7, #8]
 8000eac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000eae:	2300      	movs	r3, #0
 8000eb0:	607b      	str	r3, [r7, #4]
 8000eb2:	4b2d      	ldr	r3, [pc, #180]	@ (8000f68 <MX_GPIO_Init+0x15c>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eb6:	4a2c      	ldr	r2, [pc, #176]	@ (8000f68 <MX_GPIO_Init+0x15c>)
 8000eb8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ebc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ebe:	4b2a      	ldr	r3, [pc, #168]	@ (8000f68 <MX_GPIO_Init+0x15c>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ec6:	607b      	str	r3, [r7, #4]
 8000ec8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000eca:	2200      	movs	r2, #0
 8000ecc:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000ed0:	4826      	ldr	r0, [pc, #152]	@ (8000f6c <MX_GPIO_Init+0x160>)
 8000ed2:	f001 fe3f 	bl	8002b54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	2140      	movs	r1, #64	@ 0x40
 8000eda:	4825      	ldr	r0, [pc, #148]	@ (8000f70 <MX_GPIO_Init+0x164>)
 8000edc:	f001 fe3a 	bl	8002b54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000ee0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ee4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ee6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000eea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eec:	2300      	movs	r3, #0
 8000eee:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ef0:	f107 031c 	add.w	r3, r7, #28
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	481f      	ldr	r0, [pc, #124]	@ (8000f74 <MX_GPIO_Init+0x168>)
 8000ef8:	f001 fc80 	bl	80027fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000efc:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000f00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f02:	2301      	movs	r3, #1
 8000f04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f06:	2300      	movs	r3, #0
 8000f08:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f0e:	f107 031c 	add.w	r3, r7, #28
 8000f12:	4619      	mov	r1, r3
 8000f14:	4815      	ldr	r0, [pc, #84]	@ (8000f6c <MX_GPIO_Init+0x160>)
 8000f16:	f001 fc71 	bl	80027fc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000f1a:	2340      	movs	r3, #64	@ 0x40
 8000f1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f22:	2300      	movs	r3, #0
 8000f24:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f26:	2300      	movs	r3, #0
 8000f28:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000f2a:	f107 031c 	add.w	r3, r7, #28
 8000f2e:	4619      	mov	r1, r3
 8000f30:	480f      	ldr	r0, [pc, #60]	@ (8000f70 <MX_GPIO_Init+0x164>)
 8000f32:	f001 fc63 	bl	80027fc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000f36:	2380      	movs	r3, #128	@ 0x80
 8000f38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000f42:	f107 031c 	add.w	r3, r7, #28
 8000f46:	4619      	mov	r1, r3
 8000f48:	4809      	ldr	r0, [pc, #36]	@ (8000f70 <MX_GPIO_Init+0x164>)
 8000f4a:	f001 fc57 	bl	80027fc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000f4e:	2200      	movs	r2, #0
 8000f50:	2100      	movs	r1, #0
 8000f52:	2028      	movs	r0, #40	@ 0x28
 8000f54:	f001 f8cb 	bl	80020ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f58:	2028      	movs	r0, #40	@ 0x28
 8000f5a:	f001 f8e4 	bl	8002126 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f5e:	bf00      	nop
 8000f60:	3730      	adds	r7, #48	@ 0x30
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	40023800 	.word	0x40023800
 8000f6c:	40020400 	.word	0x40020400
 8000f70:	40021800 	.word	0x40021800
 8000f74:	40020800 	.word	0x40020800

08000f78 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	4603      	mov	r3, r0
 8000f80:	80fb      	strh	r3, [r7, #6]
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
  // PIN 15 FOR increment BUTTON
  // PIN 10 FOR select_BUTTON
  currenttime = HAL_GetTick();
 8000f82:	f000 fbcd 	bl	8001720 <HAL_GetTick>
 8000f86:	4603      	mov	r3, r0
 8000f88:	461a      	mov	r2, r3
 8000f8a:	4b25      	ldr	r3, [pc, #148]	@ (8001020 <HAL_GPIO_EXTI_Callback+0xa8>)
 8000f8c:	601a      	str	r2, [r3, #0]

  // user button to change speed
  if (GPIO_Pin == GPIO_PIN_13 && (currenttime-previoustime>debouncetime) ){
 8000f8e:	88fb      	ldrh	r3, [r7, #6]
 8000f90:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000f94:	d140      	bne.n	8001018 <HAL_GPIO_EXTI_Callback+0xa0>
 8000f96:	4b22      	ldr	r3, [pc, #136]	@ (8001020 <HAL_GPIO_EXTI_Callback+0xa8>)
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	4b22      	ldr	r3, [pc, #136]	@ (8001024 <HAL_GPIO_EXTI_Callback+0xac>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	1ad2      	subs	r2, r2, r3
 8000fa0:	4b21      	ldr	r3, [pc, #132]	@ (8001028 <HAL_GPIO_EXTI_Callback+0xb0>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	429a      	cmp	r2, r3
 8000fa6:	dd37      	ble.n	8001018 <HAL_GPIO_EXTI_Callback+0xa0>
			  m=(m+1)%3;
 8000fa8:	4b20      	ldr	r3, [pc, #128]	@ (800102c <HAL_GPIO_EXTI_Callback+0xb4>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	1c59      	adds	r1, r3, #1
 8000fae:	4b20      	ldr	r3, [pc, #128]	@ (8001030 <HAL_GPIO_EXTI_Callback+0xb8>)
 8000fb0:	fb83 3201 	smull	r3, r2, r3, r1
 8000fb4:	17cb      	asrs	r3, r1, #31
 8000fb6:	1ad2      	subs	r2, r2, r3
 8000fb8:	4613      	mov	r3, r2
 8000fba:	005b      	lsls	r3, r3, #1
 8000fbc:	4413      	add	r3, r2
 8000fbe:	1aca      	subs	r2, r1, r3
 8000fc0:	4b1a      	ldr	r3, [pc, #104]	@ (800102c <HAL_GPIO_EXTI_Callback+0xb4>)
 8000fc2:	601a      	str	r2, [r3, #0]
			  __HAL_TIM_SET_AUTORELOAD(&htim2, speed[m]-1);
 8000fc4:	4b19      	ldr	r3, [pc, #100]	@ (800102c <HAL_GPIO_EXTI_Callback+0xb4>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a1a      	ldr	r2, [pc, #104]	@ (8001034 <HAL_GPIO_EXTI_Callback+0xbc>)
 8000fca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fce:	1e5a      	subs	r2, r3, #1
 8000fd0:	4b19      	ldr	r3, [pc, #100]	@ (8001038 <HAL_GPIO_EXTI_Callback+0xc0>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000fd6:	4b15      	ldr	r3, [pc, #84]	@ (800102c <HAL_GPIO_EXTI_Callback+0xb4>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4a16      	ldr	r2, [pc, #88]	@ (8001034 <HAL_GPIO_EXTI_Callback+0xbc>)
 8000fdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fe0:	3b01      	subs	r3, #1
 8000fe2:	461a      	mov	r2, r3
 8000fe4:	4b14      	ldr	r3, [pc, #80]	@ (8001038 <HAL_GPIO_EXTI_Callback+0xc0>)
 8000fe6:	60da      	str	r2, [r3, #12]
			    TIM2->CNT = 0;               // Reset counter
 8000fe8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000fec:	2200      	movs	r2, #0
 8000fee:	625a      	str	r2, [r3, #36]	@ 0x24
			    TIM2->EGR |= TIM_EGR_UG;     // Force update
 8000ff0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000ff4:	695b      	ldr	r3, [r3, #20]
 8000ff6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ffa:	f043 0301 	orr.w	r3, r3, #1
 8000ffe:	6153      	str	r3, [r2, #20]
			    TIM2->CR1 |= TIM_CR1_CEN;    // Restart Timer
 8001000:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800100a:	f043 0301 	orr.w	r3, r3, #1
 800100e:	6013      	str	r3, [r2, #0]
			  previoustime=currenttime;
 8001010:	4b03      	ldr	r3, [pc, #12]	@ (8001020 <HAL_GPIO_EXTI_Callback+0xa8>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a03      	ldr	r2, [pc, #12]	@ (8001024 <HAL_GPIO_EXTI_Callback+0xac>)
 8001016:	6013      	str	r3, [r2, #0]
	  }
 }
 8001018:	bf00      	nop
 800101a:	3708      	adds	r7, #8
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	200008f0 	.word	0x200008f0
 8001024:	200008ec 	.word	0x200008ec
 8001028:	2000000c 	.word	0x2000000c
 800102c:	200008c0 	.word	0x200008c0
 8001030:	55555556 	.word	0x55555556
 8001034:	20000000 	.word	0x20000000
 8001038:	2000034c 	.word	0x2000034c

0800103c <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
  if (htim->Instance==TIM2){
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800104c:	d101      	bne.n	8001052 <HAL_TIM_PeriodElapsedCallback+0x16>
	  display_graphs();
 800104e:	f7ff fc49 	bl	80008e4 <display_graphs>
	  }

}
 8001052:	bf00      	nop
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}

0800105a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800105a:	b480      	push	{r7}
 800105c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800105e:	b672      	cpsid	i
}
 8001060:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001062:	bf00      	nop
 8001064:	e7fd      	b.n	8001062 <Error_Handler+0x8>
	...

08001068 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800106e:	2300      	movs	r3, #0
 8001070:	607b      	str	r3, [r7, #4]
 8001072:	4b10      	ldr	r3, [pc, #64]	@ (80010b4 <HAL_MspInit+0x4c>)
 8001074:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001076:	4a0f      	ldr	r2, [pc, #60]	@ (80010b4 <HAL_MspInit+0x4c>)
 8001078:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800107c:	6453      	str	r3, [r2, #68]	@ 0x44
 800107e:	4b0d      	ldr	r3, [pc, #52]	@ (80010b4 <HAL_MspInit+0x4c>)
 8001080:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001082:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001086:	607b      	str	r3, [r7, #4]
 8001088:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800108a:	2300      	movs	r3, #0
 800108c:	603b      	str	r3, [r7, #0]
 800108e:	4b09      	ldr	r3, [pc, #36]	@ (80010b4 <HAL_MspInit+0x4c>)
 8001090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001092:	4a08      	ldr	r2, [pc, #32]	@ (80010b4 <HAL_MspInit+0x4c>)
 8001094:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001098:	6413      	str	r3, [r2, #64]	@ 0x40
 800109a:	4b06      	ldr	r3, [pc, #24]	@ (80010b4 <HAL_MspInit+0x4c>)
 800109c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800109e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010a2:	603b      	str	r3, [r7, #0]
 80010a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010a6:	bf00      	nop
 80010a8:	370c      	adds	r7, #12
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	40023800 	.word	0x40023800

080010b8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b08a      	sub	sp, #40	@ 0x28
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c0:	f107 0314 	add.w	r3, r7, #20
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	605a      	str	r2, [r3, #4]
 80010ca:	609a      	str	r2, [r3, #8]
 80010cc:	60da      	str	r2, [r3, #12]
 80010ce:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a17      	ldr	r2, [pc, #92]	@ (8001134 <HAL_ADC_MspInit+0x7c>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d127      	bne.n	800112a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	613b      	str	r3, [r7, #16]
 80010de:	4b16      	ldr	r3, [pc, #88]	@ (8001138 <HAL_ADC_MspInit+0x80>)
 80010e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010e2:	4a15      	ldr	r2, [pc, #84]	@ (8001138 <HAL_ADC_MspInit+0x80>)
 80010e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80010ea:	4b13      	ldr	r3, [pc, #76]	@ (8001138 <HAL_ADC_MspInit+0x80>)
 80010ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010f2:	613b      	str	r3, [r7, #16]
 80010f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f6:	2300      	movs	r3, #0
 80010f8:	60fb      	str	r3, [r7, #12]
 80010fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001138 <HAL_ADC_MspInit+0x80>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010fe:	4a0e      	ldr	r2, [pc, #56]	@ (8001138 <HAL_ADC_MspInit+0x80>)
 8001100:	f043 0301 	orr.w	r3, r3, #1
 8001104:	6313      	str	r3, [r2, #48]	@ 0x30
 8001106:	4b0c      	ldr	r3, [pc, #48]	@ (8001138 <HAL_ADC_MspInit+0x80>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800110a:	f003 0301 	and.w	r3, r3, #1
 800110e:	60fb      	str	r3, [r7, #12]
 8001110:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001112:	2308      	movs	r3, #8
 8001114:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001116:	2303      	movs	r3, #3
 8001118:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111a:	2300      	movs	r3, #0
 800111c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800111e:	f107 0314 	add.w	r3, r7, #20
 8001122:	4619      	mov	r1, r3
 8001124:	4805      	ldr	r0, [pc, #20]	@ (800113c <HAL_ADC_MspInit+0x84>)
 8001126:	f001 fb69 	bl	80027fc <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800112a:	bf00      	nop
 800112c:	3728      	adds	r7, #40	@ 0x28
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	40012000 	.word	0x40012000
 8001138:	40023800 	.word	0x40023800
 800113c:	40020000 	.word	0x40020000

08001140 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b08e      	sub	sp, #56	@ 0x38
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001148:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]
 8001150:	605a      	str	r2, [r3, #4]
 8001152:	609a      	str	r2, [r3, #8]
 8001154:	60da      	str	r2, [r3, #12]
 8001156:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a55      	ldr	r2, [pc, #340]	@ (80012b4 <HAL_ETH_MspInit+0x174>)
 800115e:	4293      	cmp	r3, r2
 8001160:	f040 80a4 	bne.w	80012ac <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001164:	2300      	movs	r3, #0
 8001166:	623b      	str	r3, [r7, #32]
 8001168:	4b53      	ldr	r3, [pc, #332]	@ (80012b8 <HAL_ETH_MspInit+0x178>)
 800116a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800116c:	4a52      	ldr	r2, [pc, #328]	@ (80012b8 <HAL_ETH_MspInit+0x178>)
 800116e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001172:	6313      	str	r3, [r2, #48]	@ 0x30
 8001174:	4b50      	ldr	r3, [pc, #320]	@ (80012b8 <HAL_ETH_MspInit+0x178>)
 8001176:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001178:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800117c:	623b      	str	r3, [r7, #32]
 800117e:	6a3b      	ldr	r3, [r7, #32]
 8001180:	2300      	movs	r3, #0
 8001182:	61fb      	str	r3, [r7, #28]
 8001184:	4b4c      	ldr	r3, [pc, #304]	@ (80012b8 <HAL_ETH_MspInit+0x178>)
 8001186:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001188:	4a4b      	ldr	r2, [pc, #300]	@ (80012b8 <HAL_ETH_MspInit+0x178>)
 800118a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800118e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001190:	4b49      	ldr	r3, [pc, #292]	@ (80012b8 <HAL_ETH_MspInit+0x178>)
 8001192:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001194:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001198:	61fb      	str	r3, [r7, #28]
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	2300      	movs	r3, #0
 800119e:	61bb      	str	r3, [r7, #24]
 80011a0:	4b45      	ldr	r3, [pc, #276]	@ (80012b8 <HAL_ETH_MspInit+0x178>)
 80011a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a4:	4a44      	ldr	r2, [pc, #272]	@ (80012b8 <HAL_ETH_MspInit+0x178>)
 80011a6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80011aa:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ac:	4b42      	ldr	r3, [pc, #264]	@ (80012b8 <HAL_ETH_MspInit+0x178>)
 80011ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80011b4:	61bb      	str	r3, [r7, #24]
 80011b6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011b8:	2300      	movs	r3, #0
 80011ba:	617b      	str	r3, [r7, #20]
 80011bc:	4b3e      	ldr	r3, [pc, #248]	@ (80012b8 <HAL_ETH_MspInit+0x178>)
 80011be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c0:	4a3d      	ldr	r2, [pc, #244]	@ (80012b8 <HAL_ETH_MspInit+0x178>)
 80011c2:	f043 0304 	orr.w	r3, r3, #4
 80011c6:	6313      	str	r3, [r2, #48]	@ 0x30
 80011c8:	4b3b      	ldr	r3, [pc, #236]	@ (80012b8 <HAL_ETH_MspInit+0x178>)
 80011ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011cc:	f003 0304 	and.w	r3, r3, #4
 80011d0:	617b      	str	r3, [r7, #20]
 80011d2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d4:	2300      	movs	r3, #0
 80011d6:	613b      	str	r3, [r7, #16]
 80011d8:	4b37      	ldr	r3, [pc, #220]	@ (80012b8 <HAL_ETH_MspInit+0x178>)
 80011da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011dc:	4a36      	ldr	r2, [pc, #216]	@ (80012b8 <HAL_ETH_MspInit+0x178>)
 80011de:	f043 0301 	orr.w	r3, r3, #1
 80011e2:	6313      	str	r3, [r2, #48]	@ 0x30
 80011e4:	4b34      	ldr	r3, [pc, #208]	@ (80012b8 <HAL_ETH_MspInit+0x178>)
 80011e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011e8:	f003 0301 	and.w	r3, r3, #1
 80011ec:	613b      	str	r3, [r7, #16]
 80011ee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011f0:	2300      	movs	r3, #0
 80011f2:	60fb      	str	r3, [r7, #12]
 80011f4:	4b30      	ldr	r3, [pc, #192]	@ (80012b8 <HAL_ETH_MspInit+0x178>)
 80011f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f8:	4a2f      	ldr	r2, [pc, #188]	@ (80012b8 <HAL_ETH_MspInit+0x178>)
 80011fa:	f043 0302 	orr.w	r3, r3, #2
 80011fe:	6313      	str	r3, [r2, #48]	@ 0x30
 8001200:	4b2d      	ldr	r3, [pc, #180]	@ (80012b8 <HAL_ETH_MspInit+0x178>)
 8001202:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001204:	f003 0302 	and.w	r3, r3, #2
 8001208:	60fb      	str	r3, [r7, #12]
 800120a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800120c:	2300      	movs	r3, #0
 800120e:	60bb      	str	r3, [r7, #8]
 8001210:	4b29      	ldr	r3, [pc, #164]	@ (80012b8 <HAL_ETH_MspInit+0x178>)
 8001212:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001214:	4a28      	ldr	r2, [pc, #160]	@ (80012b8 <HAL_ETH_MspInit+0x178>)
 8001216:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800121a:	6313      	str	r3, [r2, #48]	@ 0x30
 800121c:	4b26      	ldr	r3, [pc, #152]	@ (80012b8 <HAL_ETH_MspInit+0x178>)
 800121e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001220:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001224:	60bb      	str	r3, [r7, #8]
 8001226:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001228:	2332      	movs	r3, #50	@ 0x32
 800122a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800122c:	2302      	movs	r3, #2
 800122e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001230:	2300      	movs	r3, #0
 8001232:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001234:	2303      	movs	r3, #3
 8001236:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001238:	230b      	movs	r3, #11
 800123a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800123c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001240:	4619      	mov	r1, r3
 8001242:	481e      	ldr	r0, [pc, #120]	@ (80012bc <HAL_ETH_MspInit+0x17c>)
 8001244:	f001 fada 	bl	80027fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001248:	2386      	movs	r3, #134	@ 0x86
 800124a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800124c:	2302      	movs	r3, #2
 800124e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001250:	2300      	movs	r3, #0
 8001252:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001254:	2303      	movs	r3, #3
 8001256:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001258:	230b      	movs	r3, #11
 800125a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800125c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001260:	4619      	mov	r1, r3
 8001262:	4817      	ldr	r0, [pc, #92]	@ (80012c0 <HAL_ETH_MspInit+0x180>)
 8001264:	f001 faca 	bl	80027fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001268:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800126c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800126e:	2302      	movs	r3, #2
 8001270:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001272:	2300      	movs	r3, #0
 8001274:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001276:	2303      	movs	r3, #3
 8001278:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800127a:	230b      	movs	r3, #11
 800127c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800127e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001282:	4619      	mov	r1, r3
 8001284:	480f      	ldr	r0, [pc, #60]	@ (80012c4 <HAL_ETH_MspInit+0x184>)
 8001286:	f001 fab9 	bl	80027fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800128a:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800128e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001290:	2302      	movs	r3, #2
 8001292:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001294:	2300      	movs	r3, #0
 8001296:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001298:	2303      	movs	r3, #3
 800129a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800129c:	230b      	movs	r3, #11
 800129e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012a4:	4619      	mov	r1, r3
 80012a6:	4808      	ldr	r0, [pc, #32]	@ (80012c8 <HAL_ETH_MspInit+0x188>)
 80012a8:	f001 faa8 	bl	80027fc <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 80012ac:	bf00      	nop
 80012ae:	3738      	adds	r7, #56	@ 0x38
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	40028000 	.word	0x40028000
 80012b8:	40023800 	.word	0x40023800
 80012bc:	40020800 	.word	0x40020800
 80012c0:	40020000 	.word	0x40020000
 80012c4:	40020400 	.word	0x40020400
 80012c8:	40021800 	.word	0x40021800

080012cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b08a      	sub	sp, #40	@ 0x28
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d4:	f107 0314 	add.w	r3, r7, #20
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
 80012dc:	605a      	str	r2, [r3, #4]
 80012de:	609a      	str	r2, [r3, #8]
 80012e0:	60da      	str	r2, [r3, #12]
 80012e2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a19      	ldr	r2, [pc, #100]	@ (8001350 <HAL_I2C_MspInit+0x84>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d12c      	bne.n	8001348 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ee:	2300      	movs	r3, #0
 80012f0:	613b      	str	r3, [r7, #16]
 80012f2:	4b18      	ldr	r3, [pc, #96]	@ (8001354 <HAL_I2C_MspInit+0x88>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012f6:	4a17      	ldr	r2, [pc, #92]	@ (8001354 <HAL_I2C_MspInit+0x88>)
 80012f8:	f043 0302 	orr.w	r3, r3, #2
 80012fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80012fe:	4b15      	ldr	r3, [pc, #84]	@ (8001354 <HAL_I2C_MspInit+0x88>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001302:	f003 0302 	and.w	r3, r3, #2
 8001306:	613b      	str	r3, [r7, #16]
 8001308:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 800130a:	f44f 7310 	mov.w	r3, #576	@ 0x240
 800130e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001310:	2312      	movs	r3, #18
 8001312:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001314:	2300      	movs	r3, #0
 8001316:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001318:	2303      	movs	r3, #3
 800131a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800131c:	2304      	movs	r3, #4
 800131e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001320:	f107 0314 	add.w	r3, r7, #20
 8001324:	4619      	mov	r1, r3
 8001326:	480c      	ldr	r0, [pc, #48]	@ (8001358 <HAL_I2C_MspInit+0x8c>)
 8001328:	f001 fa68 	bl	80027fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800132c:	2300      	movs	r3, #0
 800132e:	60fb      	str	r3, [r7, #12]
 8001330:	4b08      	ldr	r3, [pc, #32]	@ (8001354 <HAL_I2C_MspInit+0x88>)
 8001332:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001334:	4a07      	ldr	r2, [pc, #28]	@ (8001354 <HAL_I2C_MspInit+0x88>)
 8001336:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800133a:	6413      	str	r3, [r2, #64]	@ 0x40
 800133c:	4b05      	ldr	r3, [pc, #20]	@ (8001354 <HAL_I2C_MspInit+0x88>)
 800133e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001340:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001344:	60fb      	str	r3, [r7, #12]
 8001346:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001348:	bf00      	nop
 800134a:	3728      	adds	r7, #40	@ 0x28
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	40005400 	.word	0x40005400
 8001354:	40023800 	.word	0x40023800
 8001358:	40020400 	.word	0x40020400

0800135c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b084      	sub	sp, #16
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800136c:	d115      	bne.n	800139a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800136e:	2300      	movs	r3, #0
 8001370:	60fb      	str	r3, [r7, #12]
 8001372:	4b0c      	ldr	r3, [pc, #48]	@ (80013a4 <HAL_TIM_Base_MspInit+0x48>)
 8001374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001376:	4a0b      	ldr	r2, [pc, #44]	@ (80013a4 <HAL_TIM_Base_MspInit+0x48>)
 8001378:	f043 0301 	orr.w	r3, r3, #1
 800137c:	6413      	str	r3, [r2, #64]	@ 0x40
 800137e:	4b09      	ldr	r3, [pc, #36]	@ (80013a4 <HAL_TIM_Base_MspInit+0x48>)
 8001380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001382:	f003 0301 	and.w	r3, r3, #1
 8001386:	60fb      	str	r3, [r7, #12]
 8001388:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800138a:	2200      	movs	r2, #0
 800138c:	2100      	movs	r1, #0
 800138e:	201c      	movs	r0, #28
 8001390:	f000 fead 	bl	80020ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001394:	201c      	movs	r0, #28
 8001396:	f000 fec6 	bl	8002126 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 800139a:	bf00      	nop
 800139c:	3710      	adds	r7, #16
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	40023800 	.word	0x40023800

080013a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b08a      	sub	sp, #40	@ 0x28
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b0:	f107 0314 	add.w	r3, r7, #20
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]
 80013b8:	605a      	str	r2, [r3, #4]
 80013ba:	609a      	str	r2, [r3, #8]
 80013bc:	60da      	str	r2, [r3, #12]
 80013be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a19      	ldr	r2, [pc, #100]	@ (800142c <HAL_UART_MspInit+0x84>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d12c      	bne.n	8001424 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80013ca:	2300      	movs	r3, #0
 80013cc:	613b      	str	r3, [r7, #16]
 80013ce:	4b18      	ldr	r3, [pc, #96]	@ (8001430 <HAL_UART_MspInit+0x88>)
 80013d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013d2:	4a17      	ldr	r2, [pc, #92]	@ (8001430 <HAL_UART_MspInit+0x88>)
 80013d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80013d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80013da:	4b15      	ldr	r3, [pc, #84]	@ (8001430 <HAL_UART_MspInit+0x88>)
 80013dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013de:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80013e2:	613b      	str	r3, [r7, #16]
 80013e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013e6:	2300      	movs	r3, #0
 80013e8:	60fb      	str	r3, [r7, #12]
 80013ea:	4b11      	ldr	r3, [pc, #68]	@ (8001430 <HAL_UART_MspInit+0x88>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ee:	4a10      	ldr	r2, [pc, #64]	@ (8001430 <HAL_UART_MspInit+0x88>)
 80013f0:	f043 0308 	orr.w	r3, r3, #8
 80013f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001430 <HAL_UART_MspInit+0x88>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013fa:	f003 0308 	and.w	r3, r3, #8
 80013fe:	60fb      	str	r3, [r7, #12]
 8001400:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001402:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001406:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001408:	2302      	movs	r3, #2
 800140a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140c:	2300      	movs	r3, #0
 800140e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001410:	2303      	movs	r3, #3
 8001412:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001414:	2307      	movs	r3, #7
 8001416:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001418:	f107 0314 	add.w	r3, r7, #20
 800141c:	4619      	mov	r1, r3
 800141e:	4805      	ldr	r0, [pc, #20]	@ (8001434 <HAL_UART_MspInit+0x8c>)
 8001420:	f001 f9ec 	bl	80027fc <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8001424:	bf00      	nop
 8001426:	3728      	adds	r7, #40	@ 0x28
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	40004800 	.word	0x40004800
 8001430:	40023800 	.word	0x40023800
 8001434:	40020c00 	.word	0x40020c00

08001438 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b08a      	sub	sp, #40	@ 0x28
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001440:	f107 0314 	add.w	r3, r7, #20
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]
 8001448:	605a      	str	r2, [r3, #4]
 800144a:	609a      	str	r2, [r3, #8]
 800144c:	60da      	str	r2, [r3, #12]
 800144e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001458:	d13f      	bne.n	80014da <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800145a:	2300      	movs	r3, #0
 800145c:	613b      	str	r3, [r7, #16]
 800145e:	4b21      	ldr	r3, [pc, #132]	@ (80014e4 <HAL_PCD_MspInit+0xac>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001462:	4a20      	ldr	r2, [pc, #128]	@ (80014e4 <HAL_PCD_MspInit+0xac>)
 8001464:	f043 0301 	orr.w	r3, r3, #1
 8001468:	6313      	str	r3, [r2, #48]	@ 0x30
 800146a:	4b1e      	ldr	r3, [pc, #120]	@ (80014e4 <HAL_PCD_MspInit+0xac>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800146e:	f003 0301 	and.w	r3, r3, #1
 8001472:	613b      	str	r3, [r7, #16]
 8001474:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001476:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 800147a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800147c:	2302      	movs	r3, #2
 800147e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001480:	2300      	movs	r3, #0
 8001482:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001484:	2303      	movs	r3, #3
 8001486:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001488:	230a      	movs	r3, #10
 800148a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800148c:	f107 0314 	add.w	r3, r7, #20
 8001490:	4619      	mov	r1, r3
 8001492:	4815      	ldr	r0, [pc, #84]	@ (80014e8 <HAL_PCD_MspInit+0xb0>)
 8001494:	f001 f9b2 	bl	80027fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001498:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800149c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800149e:	2300      	movs	r3, #0
 80014a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a2:	2300      	movs	r3, #0
 80014a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80014a6:	f107 0314 	add.w	r3, r7, #20
 80014aa:	4619      	mov	r1, r3
 80014ac:	480e      	ldr	r0, [pc, #56]	@ (80014e8 <HAL_PCD_MspInit+0xb0>)
 80014ae:	f001 f9a5 	bl	80027fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80014b2:	4b0c      	ldr	r3, [pc, #48]	@ (80014e4 <HAL_PCD_MspInit+0xac>)
 80014b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014b6:	4a0b      	ldr	r2, [pc, #44]	@ (80014e4 <HAL_PCD_MspInit+0xac>)
 80014b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014bc:	6353      	str	r3, [r2, #52]	@ 0x34
 80014be:	2300      	movs	r3, #0
 80014c0:	60fb      	str	r3, [r7, #12]
 80014c2:	4b08      	ldr	r3, [pc, #32]	@ (80014e4 <HAL_PCD_MspInit+0xac>)
 80014c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014c6:	4a07      	ldr	r2, [pc, #28]	@ (80014e4 <HAL_PCD_MspInit+0xac>)
 80014c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80014ce:	4b05      	ldr	r3, [pc, #20]	@ (80014e4 <HAL_PCD_MspInit+0xac>)
 80014d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014d6:	60fb      	str	r3, [r7, #12]
 80014d8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 80014da:	bf00      	nop
 80014dc:	3728      	adds	r7, #40	@ 0x28
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	40023800 	.word	0x40023800
 80014e8:	40020000 	.word	0x40020000

080014ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014f0:	bf00      	nop
 80014f2:	e7fd      	b.n	80014f0 <NMI_Handler+0x4>

080014f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014f8:	bf00      	nop
 80014fa:	e7fd      	b.n	80014f8 <HardFault_Handler+0x4>

080014fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001500:	bf00      	nop
 8001502:	e7fd      	b.n	8001500 <MemManage_Handler+0x4>

08001504 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001508:	bf00      	nop
 800150a:	e7fd      	b.n	8001508 <BusFault_Handler+0x4>

0800150c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001510:	bf00      	nop
 8001512:	e7fd      	b.n	8001510 <UsageFault_Handler+0x4>

08001514 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001518:	bf00      	nop
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr

08001522 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001522:	b480      	push	{r7}
 8001524:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001526:	bf00      	nop
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr

08001530 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001534:	bf00      	nop
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr

0800153e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800153e:	b580      	push	{r7, lr}
 8001540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001542:	f000 f8d9 	bl	80016f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001546:	bf00      	nop
 8001548:	bd80      	pop	{r7, pc}
	...

0800154c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001550:	4802      	ldr	r0, [pc, #8]	@ (800155c <TIM2_IRQHandler+0x10>)
 8001552:	f002 feb1 	bl	80042b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001556:	bf00      	nop
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	2000034c 	.word	0x2000034c

08001560 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001564:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001568:	f001 fb0e 	bl	8002b88 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800156c:	bf00      	nop
 800156e:	bd80      	pop	{r7, pc}

08001570 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b086      	sub	sp, #24
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001578:	4a14      	ldr	r2, [pc, #80]	@ (80015cc <_sbrk+0x5c>)
 800157a:	4b15      	ldr	r3, [pc, #84]	@ (80015d0 <_sbrk+0x60>)
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001584:	4b13      	ldr	r3, [pc, #76]	@ (80015d4 <_sbrk+0x64>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d102      	bne.n	8001592 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800158c:	4b11      	ldr	r3, [pc, #68]	@ (80015d4 <_sbrk+0x64>)
 800158e:	4a12      	ldr	r2, [pc, #72]	@ (80015d8 <_sbrk+0x68>)
 8001590:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001592:	4b10      	ldr	r3, [pc, #64]	@ (80015d4 <_sbrk+0x64>)
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4413      	add	r3, r2
 800159a:	693a      	ldr	r2, [r7, #16]
 800159c:	429a      	cmp	r2, r3
 800159e:	d207      	bcs.n	80015b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015a0:	f004 f82c 	bl	80055fc <__errno>
 80015a4:	4603      	mov	r3, r0
 80015a6:	220c      	movs	r2, #12
 80015a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015aa:	f04f 33ff 	mov.w	r3, #4294967295
 80015ae:	e009      	b.n	80015c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015b0:	4b08      	ldr	r3, [pc, #32]	@ (80015d4 <_sbrk+0x64>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015b6:	4b07      	ldr	r3, [pc, #28]	@ (80015d4 <_sbrk+0x64>)
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4413      	add	r3, r2
 80015be:	4a05      	ldr	r2, [pc, #20]	@ (80015d4 <_sbrk+0x64>)
 80015c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015c2:	68fb      	ldr	r3, [r7, #12]
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3718      	adds	r7, #24
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	20030000 	.word	0x20030000
 80015d0:	00000400 	.word	0x00000400
 80015d4:	200008fc 	.word	0x200008fc
 80015d8:	20000a50 	.word	0x20000a50

080015dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015e0:	4b06      	ldr	r3, [pc, #24]	@ (80015fc <SystemInit+0x20>)
 80015e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015e6:	4a05      	ldr	r2, [pc, #20]	@ (80015fc <SystemInit+0x20>)
 80015e8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80015ec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015f0:	bf00      	nop
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	e000ed00 	.word	0xe000ed00

08001600 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001600:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001638 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001604:	f7ff ffea 	bl	80015dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001608:	480c      	ldr	r0, [pc, #48]	@ (800163c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800160a:	490d      	ldr	r1, [pc, #52]	@ (8001640 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800160c:	4a0d      	ldr	r2, [pc, #52]	@ (8001644 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800160e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001610:	e002      	b.n	8001618 <LoopCopyDataInit>

08001612 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001612:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001614:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001616:	3304      	adds	r3, #4

08001618 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001618:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800161a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800161c:	d3f9      	bcc.n	8001612 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800161e:	4a0a      	ldr	r2, [pc, #40]	@ (8001648 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001620:	4c0a      	ldr	r4, [pc, #40]	@ (800164c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001622:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001624:	e001      	b.n	800162a <LoopFillZerobss>

08001626 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001626:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001628:	3204      	adds	r2, #4

0800162a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800162a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800162c:	d3fb      	bcc.n	8001626 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800162e:	f003 ffeb 	bl	8005608 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001632:	f7ff f9d9 	bl	80009e8 <main>
  bx  lr    
 8001636:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001638:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800163c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001640:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001644:	08005f98 	.word	0x08005f98
  ldr r2, =_sbss
 8001648:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 800164c:	20000a4c 	.word	0x20000a4c

08001650 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001650:	e7fe      	b.n	8001650 <ADC_IRQHandler>
	...

08001654 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001658:	4b0e      	ldr	r3, [pc, #56]	@ (8001694 <HAL_Init+0x40>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a0d      	ldr	r2, [pc, #52]	@ (8001694 <HAL_Init+0x40>)
 800165e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001662:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001664:	4b0b      	ldr	r3, [pc, #44]	@ (8001694 <HAL_Init+0x40>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a0a      	ldr	r2, [pc, #40]	@ (8001694 <HAL_Init+0x40>)
 800166a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800166e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001670:	4b08      	ldr	r3, [pc, #32]	@ (8001694 <HAL_Init+0x40>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a07      	ldr	r2, [pc, #28]	@ (8001694 <HAL_Init+0x40>)
 8001676:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800167a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800167c:	2003      	movs	r0, #3
 800167e:	f000 fd2b 	bl	80020d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001682:	2000      	movs	r0, #0
 8001684:	f000 f808 	bl	8001698 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001688:	f7ff fcee 	bl	8001068 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800168c:	2300      	movs	r3, #0
}
 800168e:	4618      	mov	r0, r3
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	40023c00 	.word	0x40023c00

08001698 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016a0:	4b12      	ldr	r3, [pc, #72]	@ (80016ec <HAL_InitTick+0x54>)
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	4b12      	ldr	r3, [pc, #72]	@ (80016f0 <HAL_InitTick+0x58>)
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	4619      	mov	r1, r3
 80016aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80016b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016b6:	4618      	mov	r0, r3
 80016b8:	f000 fd43 	bl	8002142 <HAL_SYSTICK_Config>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e00e      	b.n	80016e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2b0f      	cmp	r3, #15
 80016ca:	d80a      	bhi.n	80016e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016cc:	2200      	movs	r2, #0
 80016ce:	6879      	ldr	r1, [r7, #4]
 80016d0:	f04f 30ff 	mov.w	r0, #4294967295
 80016d4:	f000 fd0b 	bl	80020ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016d8:	4a06      	ldr	r2, [pc, #24]	@ (80016f4 <HAL_InitTick+0x5c>)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016de:	2300      	movs	r3, #0
 80016e0:	e000      	b.n	80016e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3708      	adds	r7, #8
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	20000010 	.word	0x20000010
 80016f0:	20000018 	.word	0x20000018
 80016f4:	20000014 	.word	0x20000014

080016f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016fc:	4b06      	ldr	r3, [pc, #24]	@ (8001718 <HAL_IncTick+0x20>)
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	461a      	mov	r2, r3
 8001702:	4b06      	ldr	r3, [pc, #24]	@ (800171c <HAL_IncTick+0x24>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4413      	add	r3, r2
 8001708:	4a04      	ldr	r2, [pc, #16]	@ (800171c <HAL_IncTick+0x24>)
 800170a:	6013      	str	r3, [r2, #0]
}
 800170c:	bf00      	nop
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	20000018 	.word	0x20000018
 800171c:	20000900 	.word	0x20000900

08001720 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  return uwTick;
 8001724:	4b03      	ldr	r3, [pc, #12]	@ (8001734 <HAL_GetTick+0x14>)
 8001726:	681b      	ldr	r3, [r3, #0]
}
 8001728:	4618      	mov	r0, r3
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	20000900 	.word	0x20000900

08001738 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001740:	f7ff ffee 	bl	8001720 <HAL_GetTick>
 8001744:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001750:	d005      	beq.n	800175e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001752:	4b0a      	ldr	r3, [pc, #40]	@ (800177c <HAL_Delay+0x44>)
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	461a      	mov	r2, r3
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	4413      	add	r3, r2
 800175c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800175e:	bf00      	nop
 8001760:	f7ff ffde 	bl	8001720 <HAL_GetTick>
 8001764:	4602      	mov	r2, r0
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	68fa      	ldr	r2, [r7, #12]
 800176c:	429a      	cmp	r2, r3
 800176e:	d8f7      	bhi.n	8001760 <HAL_Delay+0x28>
  {
  }
}
 8001770:	bf00      	nop
 8001772:	bf00      	nop
 8001774:	3710      	adds	r7, #16
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	20000018 	.word	0x20000018

08001780 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001788:	2300      	movs	r3, #0
 800178a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d101      	bne.n	8001796 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e033      	b.n	80017fe <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800179a:	2b00      	cmp	r3, #0
 800179c:	d109      	bne.n	80017b2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800179e:	6878      	ldr	r0, [r7, #4]
 80017a0:	f7ff fc8a 	bl	80010b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2200      	movs	r2, #0
 80017a8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2200      	movs	r2, #0
 80017ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017b6:	f003 0310 	and.w	r3, r3, #16
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d118      	bne.n	80017f0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017c2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80017c6:	f023 0302 	bic.w	r3, r3, #2
 80017ca:	f043 0202 	orr.w	r2, r3, #2
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f000 fab4 	bl	8001d40 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2200      	movs	r2, #0
 80017dc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017e2:	f023 0303 	bic.w	r3, r3, #3
 80017e6:	f043 0201 	orr.w	r2, r3, #1
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	641a      	str	r2, [r3, #64]	@ 0x40
 80017ee:	e001      	b.n	80017f4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2200      	movs	r2, #0
 80017f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80017fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3710      	adds	r7, #16
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
	...

08001808 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001808:	b480      	push	{r7}
 800180a:	b085      	sub	sp, #20
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001810:	2300      	movs	r3, #0
 8001812:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800181a:	2b01      	cmp	r3, #1
 800181c:	d101      	bne.n	8001822 <HAL_ADC_Start+0x1a>
 800181e:	2302      	movs	r3, #2
 8001820:	e0b2      	b.n	8001988 <HAL_ADC_Start+0x180>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2201      	movs	r2, #1
 8001826:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	f003 0301 	and.w	r3, r3, #1
 8001834:	2b01      	cmp	r3, #1
 8001836:	d018      	beq.n	800186a <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	689a      	ldr	r2, [r3, #8]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f042 0201 	orr.w	r2, r2, #1
 8001846:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001848:	4b52      	ldr	r3, [pc, #328]	@ (8001994 <HAL_ADC_Start+0x18c>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a52      	ldr	r2, [pc, #328]	@ (8001998 <HAL_ADC_Start+0x190>)
 800184e:	fba2 2303 	umull	r2, r3, r2, r3
 8001852:	0c9a      	lsrs	r2, r3, #18
 8001854:	4613      	mov	r3, r2
 8001856:	005b      	lsls	r3, r3, #1
 8001858:	4413      	add	r3, r2
 800185a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800185c:	e002      	b.n	8001864 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	3b01      	subs	r3, #1
 8001862:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d1f9      	bne.n	800185e <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	f003 0301 	and.w	r3, r3, #1
 8001874:	2b01      	cmp	r3, #1
 8001876:	d17a      	bne.n	800196e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800187c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001880:	f023 0301 	bic.w	r3, r3, #1
 8001884:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001896:	2b00      	cmp	r3, #0
 8001898:	d007      	beq.n	80018aa <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800189e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80018a2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80018b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80018b6:	d106      	bne.n	80018c6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018bc:	f023 0206 	bic.w	r2, r3, #6
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	645a      	str	r2, [r3, #68]	@ 0x44
 80018c4:	e002      	b.n	80018cc <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2200      	movs	r2, #0
 80018ca:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2200      	movs	r2, #0
 80018d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80018d4:	4b31      	ldr	r3, [pc, #196]	@ (800199c <HAL_ADC_Start+0x194>)
 80018d6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80018e0:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	f003 031f 	and.w	r3, r3, #31
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d12a      	bne.n	8001944 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a2b      	ldr	r2, [pc, #172]	@ (80019a0 <HAL_ADC_Start+0x198>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d015      	beq.n	8001924 <HAL_ADC_Start+0x11c>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a29      	ldr	r2, [pc, #164]	@ (80019a4 <HAL_ADC_Start+0x19c>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d105      	bne.n	800190e <HAL_ADC_Start+0x106>
 8001902:	4b26      	ldr	r3, [pc, #152]	@ (800199c <HAL_ADC_Start+0x194>)
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	f003 031f 	and.w	r3, r3, #31
 800190a:	2b00      	cmp	r3, #0
 800190c:	d00a      	beq.n	8001924 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a25      	ldr	r2, [pc, #148]	@ (80019a8 <HAL_ADC_Start+0x1a0>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d136      	bne.n	8001986 <HAL_ADC_Start+0x17e>
 8001918:	4b20      	ldr	r3, [pc, #128]	@ (800199c <HAL_ADC_Start+0x194>)
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f003 0310 	and.w	r3, r3, #16
 8001920:	2b00      	cmp	r3, #0
 8001922:	d130      	bne.n	8001986 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d129      	bne.n	8001986 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	689a      	ldr	r2, [r3, #8]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001940:	609a      	str	r2, [r3, #8]
 8001942:	e020      	b.n	8001986 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a15      	ldr	r2, [pc, #84]	@ (80019a0 <HAL_ADC_Start+0x198>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d11b      	bne.n	8001986 <HAL_ADC_Start+0x17e>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001958:	2b00      	cmp	r3, #0
 800195a:	d114      	bne.n	8001986 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	689a      	ldr	r2, [r3, #8]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800196a:	609a      	str	r2, [r3, #8]
 800196c:	e00b      	b.n	8001986 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001972:	f043 0210 	orr.w	r2, r3, #16
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800197e:	f043 0201 	orr.w	r2, r3, #1
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001986:	2300      	movs	r3, #0
}
 8001988:	4618      	mov	r0, r3
 800198a:	3714      	adds	r7, #20
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr
 8001994:	20000010 	.word	0x20000010
 8001998:	431bde83 	.word	0x431bde83
 800199c:	40012300 	.word	0x40012300
 80019a0:	40012000 	.word	0x40012000
 80019a4:	40012100 	.word	0x40012100
 80019a8:	40012200 	.word	0x40012200

080019ac <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b084      	sub	sp, #16
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80019b6:	2300      	movs	r3, #0
 80019b8:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80019c8:	d113      	bne.n	80019f2 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80019d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80019d8:	d10b      	bne.n	80019f2 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019de:	f043 0220 	orr.w	r2, r3, #32
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2200      	movs	r2, #0
 80019ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e063      	b.n	8001aba <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80019f2:	f7ff fe95 	bl	8001720 <HAL_GetTick>
 80019f6:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80019f8:	e021      	b.n	8001a3e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a00:	d01d      	beq.n	8001a3e <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d007      	beq.n	8001a18 <HAL_ADC_PollForConversion+0x6c>
 8001a08:	f7ff fe8a 	bl	8001720 <HAL_GetTick>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	683a      	ldr	r2, [r7, #0]
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d212      	bcs.n	8001a3e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0302 	and.w	r3, r3, #2
 8001a22:	2b02      	cmp	r3, #2
 8001a24:	d00b      	beq.n	8001a3e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a2a:	f043 0204 	orr.w	r2, r3, #4
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2200      	movs	r2, #0
 8001a36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e03d      	b.n	8001aba <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 0302 	and.w	r3, r3, #2
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	d1d6      	bne.n	80019fa <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f06f 0212 	mvn.w	r2, #18
 8001a54:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a5a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d123      	bne.n	8001ab8 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d11f      	bne.n	8001ab8 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a7e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d006      	beq.n	8001a94 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d111      	bne.n	8001ab8 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a98:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aa4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d105      	bne.n	8001ab8 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ab0:	f043 0201 	orr.w	r2, r3, #1
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8001ab8:	2300      	movs	r3, #0
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3710      	adds	r7, #16
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}

08001ac2 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001ac2:	b480      	push	{r7}
 8001ac4:	b083      	sub	sp, #12
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	370c      	adds	r7, #12
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b085      	sub	sp, #20
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d101      	bne.n	8001af8 <HAL_ADC_ConfigChannel+0x1c>
 8001af4:	2302      	movs	r3, #2
 8001af6:	e113      	b.n	8001d20 <HAL_ADC_ConfigChannel+0x244>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2201      	movs	r2, #1
 8001afc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	2b09      	cmp	r3, #9
 8001b06:	d925      	bls.n	8001b54 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	68d9      	ldr	r1, [r3, #12]
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	b29b      	uxth	r3, r3
 8001b14:	461a      	mov	r2, r3
 8001b16:	4613      	mov	r3, r2
 8001b18:	005b      	lsls	r3, r3, #1
 8001b1a:	4413      	add	r3, r2
 8001b1c:	3b1e      	subs	r3, #30
 8001b1e:	2207      	movs	r2, #7
 8001b20:	fa02 f303 	lsl.w	r3, r2, r3
 8001b24:	43da      	mvns	r2, r3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	400a      	ands	r2, r1
 8001b2c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	68d9      	ldr	r1, [r3, #12]
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	689a      	ldr	r2, [r3, #8]
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	b29b      	uxth	r3, r3
 8001b3e:	4618      	mov	r0, r3
 8001b40:	4603      	mov	r3, r0
 8001b42:	005b      	lsls	r3, r3, #1
 8001b44:	4403      	add	r3, r0
 8001b46:	3b1e      	subs	r3, #30
 8001b48:	409a      	lsls	r2, r3
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	430a      	orrs	r2, r1
 8001b50:	60da      	str	r2, [r3, #12]
 8001b52:	e022      	b.n	8001b9a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	6919      	ldr	r1, [r3, #16]
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	b29b      	uxth	r3, r3
 8001b60:	461a      	mov	r2, r3
 8001b62:	4613      	mov	r3, r2
 8001b64:	005b      	lsls	r3, r3, #1
 8001b66:	4413      	add	r3, r2
 8001b68:	2207      	movs	r2, #7
 8001b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6e:	43da      	mvns	r2, r3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	400a      	ands	r2, r1
 8001b76:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	6919      	ldr	r1, [r3, #16]
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	689a      	ldr	r2, [r3, #8]
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	b29b      	uxth	r3, r3
 8001b88:	4618      	mov	r0, r3
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	005b      	lsls	r3, r3, #1
 8001b8e:	4403      	add	r3, r0
 8001b90:	409a      	lsls	r2, r3
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	430a      	orrs	r2, r1
 8001b98:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	2b06      	cmp	r3, #6
 8001ba0:	d824      	bhi.n	8001bec <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	685a      	ldr	r2, [r3, #4]
 8001bac:	4613      	mov	r3, r2
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	4413      	add	r3, r2
 8001bb2:	3b05      	subs	r3, #5
 8001bb4:	221f      	movs	r2, #31
 8001bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bba:	43da      	mvns	r2, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	400a      	ands	r2, r1
 8001bc2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	b29b      	uxth	r3, r3
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	685a      	ldr	r2, [r3, #4]
 8001bd6:	4613      	mov	r3, r2
 8001bd8:	009b      	lsls	r3, r3, #2
 8001bda:	4413      	add	r3, r2
 8001bdc:	3b05      	subs	r3, #5
 8001bde:	fa00 f203 	lsl.w	r2, r0, r3
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	430a      	orrs	r2, r1
 8001be8:	635a      	str	r2, [r3, #52]	@ 0x34
 8001bea:	e04c      	b.n	8001c86 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	2b0c      	cmp	r3, #12
 8001bf2:	d824      	bhi.n	8001c3e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	685a      	ldr	r2, [r3, #4]
 8001bfe:	4613      	mov	r3, r2
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	4413      	add	r3, r2
 8001c04:	3b23      	subs	r3, #35	@ 0x23
 8001c06:	221f      	movs	r2, #31
 8001c08:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0c:	43da      	mvns	r2, r3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	400a      	ands	r2, r1
 8001c14:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	b29b      	uxth	r3, r3
 8001c22:	4618      	mov	r0, r3
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	685a      	ldr	r2, [r3, #4]
 8001c28:	4613      	mov	r3, r2
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	4413      	add	r3, r2
 8001c2e:	3b23      	subs	r3, #35	@ 0x23
 8001c30:	fa00 f203 	lsl.w	r2, r0, r3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	430a      	orrs	r2, r1
 8001c3a:	631a      	str	r2, [r3, #48]	@ 0x30
 8001c3c:	e023      	b.n	8001c86 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	685a      	ldr	r2, [r3, #4]
 8001c48:	4613      	mov	r3, r2
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	4413      	add	r3, r2
 8001c4e:	3b41      	subs	r3, #65	@ 0x41
 8001c50:	221f      	movs	r2, #31
 8001c52:	fa02 f303 	lsl.w	r3, r2, r3
 8001c56:	43da      	mvns	r2, r3
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	400a      	ands	r2, r1
 8001c5e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	b29b      	uxth	r3, r3
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	685a      	ldr	r2, [r3, #4]
 8001c72:	4613      	mov	r3, r2
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	4413      	add	r3, r2
 8001c78:	3b41      	subs	r3, #65	@ 0x41
 8001c7a:	fa00 f203 	lsl.w	r2, r0, r3
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	430a      	orrs	r2, r1
 8001c84:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c86:	4b29      	ldr	r3, [pc, #164]	@ (8001d2c <HAL_ADC_ConfigChannel+0x250>)
 8001c88:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a28      	ldr	r2, [pc, #160]	@ (8001d30 <HAL_ADC_ConfigChannel+0x254>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d10f      	bne.n	8001cb4 <HAL_ADC_ConfigChannel+0x1d8>
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	2b12      	cmp	r3, #18
 8001c9a:	d10b      	bne.n	8001cb4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a1d      	ldr	r2, [pc, #116]	@ (8001d30 <HAL_ADC_ConfigChannel+0x254>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d12b      	bne.n	8001d16 <HAL_ADC_ConfigChannel+0x23a>
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a1c      	ldr	r2, [pc, #112]	@ (8001d34 <HAL_ADC_ConfigChannel+0x258>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d003      	beq.n	8001cd0 <HAL_ADC_ConfigChannel+0x1f4>
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	2b11      	cmp	r3, #17
 8001cce:	d122      	bne.n	8001d16 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a11      	ldr	r2, [pc, #68]	@ (8001d34 <HAL_ADC_ConfigChannel+0x258>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d111      	bne.n	8001d16 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001cf2:	4b11      	ldr	r3, [pc, #68]	@ (8001d38 <HAL_ADC_ConfigChannel+0x25c>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a11      	ldr	r2, [pc, #68]	@ (8001d3c <HAL_ADC_ConfigChannel+0x260>)
 8001cf8:	fba2 2303 	umull	r2, r3, r2, r3
 8001cfc:	0c9a      	lsrs	r2, r3, #18
 8001cfe:	4613      	mov	r3, r2
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	4413      	add	r3, r2
 8001d04:	005b      	lsls	r3, r3, #1
 8001d06:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001d08:	e002      	b.n	8001d10 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	3b01      	subs	r3, #1
 8001d0e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d1f9      	bne.n	8001d0a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001d1e:	2300      	movs	r3, #0
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3714      	adds	r7, #20
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr
 8001d2c:	40012300 	.word	0x40012300
 8001d30:	40012000 	.word	0x40012000
 8001d34:	10000012 	.word	0x10000012
 8001d38:	20000010 	.word	0x20000010
 8001d3c:	431bde83 	.word	0x431bde83

08001d40 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b085      	sub	sp, #20
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d48:	4b79      	ldr	r3, [pc, #484]	@ (8001f30 <ADC_Init+0x1f0>)
 8001d4a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	685a      	ldr	r2, [r3, #4]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	431a      	orrs	r2, r3
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	685a      	ldr	r2, [r3, #4]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001d74:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	6859      	ldr	r1, [r3, #4]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	691b      	ldr	r3, [r3, #16]
 8001d80:	021a      	lsls	r2, r3, #8
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	430a      	orrs	r2, r1
 8001d88:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	685a      	ldr	r2, [r3, #4]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001d98:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	6859      	ldr	r1, [r3, #4]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	689a      	ldr	r2, [r3, #8]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	430a      	orrs	r2, r1
 8001daa:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	689a      	ldr	r2, [r3, #8]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001dba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	6899      	ldr	r1, [r3, #8]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	68da      	ldr	r2, [r3, #12]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	430a      	orrs	r2, r1
 8001dcc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dd2:	4a58      	ldr	r2, [pc, #352]	@ (8001f34 <ADC_Init+0x1f4>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d022      	beq.n	8001e1e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	689a      	ldr	r2, [r3, #8]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001de6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	6899      	ldr	r1, [r3, #8]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	430a      	orrs	r2, r1
 8001df8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	689a      	ldr	r2, [r3, #8]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001e08:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	6899      	ldr	r1, [r3, #8]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	430a      	orrs	r2, r1
 8001e1a:	609a      	str	r2, [r3, #8]
 8001e1c:	e00f      	b.n	8001e3e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	689a      	ldr	r2, [r3, #8]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001e2c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	689a      	ldr	r2, [r3, #8]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001e3c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	689a      	ldr	r2, [r3, #8]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f022 0202 	bic.w	r2, r2, #2
 8001e4c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	6899      	ldr	r1, [r3, #8]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	7e1b      	ldrb	r3, [r3, #24]
 8001e58:	005a      	lsls	r2, r3, #1
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	430a      	orrs	r2, r1
 8001e60:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d01b      	beq.n	8001ea4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	685a      	ldr	r2, [r3, #4]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001e7a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	685a      	ldr	r2, [r3, #4]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001e8a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	6859      	ldr	r1, [r3, #4]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e96:	3b01      	subs	r3, #1
 8001e98:	035a      	lsls	r2, r3, #13
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	430a      	orrs	r2, r1
 8001ea0:	605a      	str	r2, [r3, #4]
 8001ea2:	e007      	b.n	8001eb4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	685a      	ldr	r2, [r3, #4]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001eb2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001ec2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	69db      	ldr	r3, [r3, #28]
 8001ece:	3b01      	subs	r3, #1
 8001ed0:	051a      	lsls	r2, r3, #20
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	430a      	orrs	r2, r1
 8001ed8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	689a      	ldr	r2, [r3, #8]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001ee8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	6899      	ldr	r1, [r3, #8]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001ef6:	025a      	lsls	r2, r3, #9
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	430a      	orrs	r2, r1
 8001efe:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	689a      	ldr	r2, [r3, #8]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001f0e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	6899      	ldr	r1, [r3, #8]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	695b      	ldr	r3, [r3, #20]
 8001f1a:	029a      	lsls	r2, r3, #10
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	430a      	orrs	r2, r1
 8001f22:	609a      	str	r2, [r3, #8]
}
 8001f24:	bf00      	nop
 8001f26:	3714      	adds	r7, #20
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr
 8001f30:	40012300 	.word	0x40012300
 8001f34:	0f000001 	.word	0x0f000001

08001f38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b085      	sub	sp, #20
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	f003 0307 	and.w	r3, r3, #7
 8001f46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f48:	4b0c      	ldr	r3, [pc, #48]	@ (8001f7c <__NVIC_SetPriorityGrouping+0x44>)
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f4e:	68ba      	ldr	r2, [r7, #8]
 8001f50:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f54:	4013      	ands	r3, r2
 8001f56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f60:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f6a:	4a04      	ldr	r2, [pc, #16]	@ (8001f7c <__NVIC_SetPriorityGrouping+0x44>)
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	60d3      	str	r3, [r2, #12]
}
 8001f70:	bf00      	nop
 8001f72:	3714      	adds	r7, #20
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr
 8001f7c:	e000ed00 	.word	0xe000ed00

08001f80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f84:	4b04      	ldr	r3, [pc, #16]	@ (8001f98 <__NVIC_GetPriorityGrouping+0x18>)
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	0a1b      	lsrs	r3, r3, #8
 8001f8a:	f003 0307 	and.w	r3, r3, #7
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr
 8001f98:	e000ed00 	.word	0xe000ed00

08001f9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	db0b      	blt.n	8001fc6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fae:	79fb      	ldrb	r3, [r7, #7]
 8001fb0:	f003 021f 	and.w	r2, r3, #31
 8001fb4:	4907      	ldr	r1, [pc, #28]	@ (8001fd4 <__NVIC_EnableIRQ+0x38>)
 8001fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fba:	095b      	lsrs	r3, r3, #5
 8001fbc:	2001      	movs	r0, #1
 8001fbe:	fa00 f202 	lsl.w	r2, r0, r2
 8001fc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001fc6:	bf00      	nop
 8001fc8:	370c      	adds	r7, #12
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	e000e100 	.word	0xe000e100

08001fd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	4603      	mov	r3, r0
 8001fe0:	6039      	str	r1, [r7, #0]
 8001fe2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fe4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	db0a      	blt.n	8002002 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	b2da      	uxtb	r2, r3
 8001ff0:	490c      	ldr	r1, [pc, #48]	@ (8002024 <__NVIC_SetPriority+0x4c>)
 8001ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff6:	0112      	lsls	r2, r2, #4
 8001ff8:	b2d2      	uxtb	r2, r2
 8001ffa:	440b      	add	r3, r1
 8001ffc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002000:	e00a      	b.n	8002018 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	b2da      	uxtb	r2, r3
 8002006:	4908      	ldr	r1, [pc, #32]	@ (8002028 <__NVIC_SetPriority+0x50>)
 8002008:	79fb      	ldrb	r3, [r7, #7]
 800200a:	f003 030f 	and.w	r3, r3, #15
 800200e:	3b04      	subs	r3, #4
 8002010:	0112      	lsls	r2, r2, #4
 8002012:	b2d2      	uxtb	r2, r2
 8002014:	440b      	add	r3, r1
 8002016:	761a      	strb	r2, [r3, #24]
}
 8002018:	bf00      	nop
 800201a:	370c      	adds	r7, #12
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr
 8002024:	e000e100 	.word	0xe000e100
 8002028:	e000ed00 	.word	0xe000ed00

0800202c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800202c:	b480      	push	{r7}
 800202e:	b089      	sub	sp, #36	@ 0x24
 8002030:	af00      	add	r7, sp, #0
 8002032:	60f8      	str	r0, [r7, #12]
 8002034:	60b9      	str	r1, [r7, #8]
 8002036:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	f003 0307 	and.w	r3, r3, #7
 800203e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	f1c3 0307 	rsb	r3, r3, #7
 8002046:	2b04      	cmp	r3, #4
 8002048:	bf28      	it	cs
 800204a:	2304      	movcs	r3, #4
 800204c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	3304      	adds	r3, #4
 8002052:	2b06      	cmp	r3, #6
 8002054:	d902      	bls.n	800205c <NVIC_EncodePriority+0x30>
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	3b03      	subs	r3, #3
 800205a:	e000      	b.n	800205e <NVIC_EncodePriority+0x32>
 800205c:	2300      	movs	r3, #0
 800205e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002060:	f04f 32ff 	mov.w	r2, #4294967295
 8002064:	69bb      	ldr	r3, [r7, #24]
 8002066:	fa02 f303 	lsl.w	r3, r2, r3
 800206a:	43da      	mvns	r2, r3
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	401a      	ands	r2, r3
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002074:	f04f 31ff 	mov.w	r1, #4294967295
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	fa01 f303 	lsl.w	r3, r1, r3
 800207e:	43d9      	mvns	r1, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002084:	4313      	orrs	r3, r2
         );
}
 8002086:	4618      	mov	r0, r3
 8002088:	3724      	adds	r7, #36	@ 0x24
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr
	...

08002094 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	3b01      	subs	r3, #1
 80020a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80020a4:	d301      	bcc.n	80020aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020a6:	2301      	movs	r3, #1
 80020a8:	e00f      	b.n	80020ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020aa:	4a0a      	ldr	r2, [pc, #40]	@ (80020d4 <SysTick_Config+0x40>)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	3b01      	subs	r3, #1
 80020b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020b2:	210f      	movs	r1, #15
 80020b4:	f04f 30ff 	mov.w	r0, #4294967295
 80020b8:	f7ff ff8e 	bl	8001fd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020bc:	4b05      	ldr	r3, [pc, #20]	@ (80020d4 <SysTick_Config+0x40>)
 80020be:	2200      	movs	r2, #0
 80020c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020c2:	4b04      	ldr	r3, [pc, #16]	@ (80020d4 <SysTick_Config+0x40>)
 80020c4:	2207      	movs	r2, #7
 80020c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020c8:	2300      	movs	r3, #0
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3708      	adds	r7, #8
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	e000e010 	.word	0xe000e010

080020d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020e0:	6878      	ldr	r0, [r7, #4]
 80020e2:	f7ff ff29 	bl	8001f38 <__NVIC_SetPriorityGrouping>
}
 80020e6:	bf00      	nop
 80020e8:	3708      	adds	r7, #8
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}

080020ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020ee:	b580      	push	{r7, lr}
 80020f0:	b086      	sub	sp, #24
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	4603      	mov	r3, r0
 80020f6:	60b9      	str	r1, [r7, #8]
 80020f8:	607a      	str	r2, [r7, #4]
 80020fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020fc:	2300      	movs	r3, #0
 80020fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002100:	f7ff ff3e 	bl	8001f80 <__NVIC_GetPriorityGrouping>
 8002104:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	68b9      	ldr	r1, [r7, #8]
 800210a:	6978      	ldr	r0, [r7, #20]
 800210c:	f7ff ff8e 	bl	800202c <NVIC_EncodePriority>
 8002110:	4602      	mov	r2, r0
 8002112:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002116:	4611      	mov	r1, r2
 8002118:	4618      	mov	r0, r3
 800211a:	f7ff ff5d 	bl	8001fd8 <__NVIC_SetPriority>
}
 800211e:	bf00      	nop
 8002120:	3718      	adds	r7, #24
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}

08002126 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002126:	b580      	push	{r7, lr}
 8002128:	b082      	sub	sp, #8
 800212a:	af00      	add	r7, sp, #0
 800212c:	4603      	mov	r3, r0
 800212e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002130:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002134:	4618      	mov	r0, r3
 8002136:	f7ff ff31 	bl	8001f9c <__NVIC_EnableIRQ>
}
 800213a:	bf00      	nop
 800213c:	3708      	adds	r7, #8
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}

08002142 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002142:	b580      	push	{r7, lr}
 8002144:	b082      	sub	sp, #8
 8002146:	af00      	add	r7, sp, #0
 8002148:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f7ff ffa2 	bl	8002094 <SysTick_Config>
 8002150:	4603      	mov	r3, r0
}
 8002152:	4618      	mov	r0, r3
 8002154:	3708      	adds	r7, #8
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
	...

0800215c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b084      	sub	sp, #16
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d101      	bne.n	800216e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e08a      	b.n	8002284 <HAL_ETH_Init+0x128>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002174:	2b00      	cmp	r3, #0
 8002176:	d106      	bne.n	8002186 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2223      	movs	r2, #35	@ 0x23
 800217c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	f7fe ffdd 	bl	8001140 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002186:	2300      	movs	r3, #0
 8002188:	60bb      	str	r3, [r7, #8]
 800218a:	4b40      	ldr	r3, [pc, #256]	@ (800228c <HAL_ETH_Init+0x130>)
 800218c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800218e:	4a3f      	ldr	r2, [pc, #252]	@ (800228c <HAL_ETH_Init+0x130>)
 8002190:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002194:	6453      	str	r3, [r2, #68]	@ 0x44
 8002196:	4b3d      	ldr	r3, [pc, #244]	@ (800228c <HAL_ETH_Init+0x130>)
 8002198:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800219a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800219e:	60bb      	str	r3, [r7, #8]
 80021a0:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80021a2:	4b3b      	ldr	r3, [pc, #236]	@ (8002290 <HAL_ETH_Init+0x134>)
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	4a3a      	ldr	r2, [pc, #232]	@ (8002290 <HAL_ETH_Init+0x134>)
 80021a8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80021ac:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80021ae:	4b38      	ldr	r3, [pc, #224]	@ (8002290 <HAL_ETH_Init+0x134>)
 80021b0:	685a      	ldr	r2, [r3, #4]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	4936      	ldr	r1, [pc, #216]	@ (8002290 <HAL_ETH_Init+0x134>)
 80021b8:	4313      	orrs	r3, r2
 80021ba:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80021bc:	4b34      	ldr	r3, [pc, #208]	@ (8002290 <HAL_ETH_Init+0x134>)
 80021be:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	6812      	ldr	r2, [r2, #0]
 80021ce:	f043 0301 	orr.w	r3, r3, #1
 80021d2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80021d6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80021d8:	f7ff faa2 	bl	8001720 <HAL_GetTick>
 80021dc:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80021de:	e011      	b.n	8002204 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80021e0:	f7ff fa9e 	bl	8001720 <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80021ee:	d909      	bls.n	8002204 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2204      	movs	r2, #4
 80021f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	22e0      	movs	r2, #224	@ 0xe0
 80021fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	e03f      	b.n	8002284 <HAL_ETH_Init+0x128>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0301 	and.w	r3, r3, #1
 8002212:	2b00      	cmp	r3, #0
 8002214:	d1e4      	bne.n	80021e0 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f000 f97a 	bl	8002510 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	f000 fa25 	bl	800266c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f000 fa7b 	bl	800271e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	461a      	mov	r2, r3
 800222e:	2100      	movs	r1, #0
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	f000 f9e3 	bl	80025fc <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8002244:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	6812      	ldr	r2, [r2, #0]
 8002252:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002256:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800225a:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 800226e:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2200      	movs	r2, #0
 8002276:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2210      	movs	r2, #16
 800227e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002282:	2300      	movs	r3, #0
}
 8002284:	4618      	mov	r0, r3
 8002286:	3710      	adds	r7, #16
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	40023800 	.word	0x40023800
 8002290:	40013800 	.word	0x40013800

08002294 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80022a6:	68fa      	ldr	r2, [r7, #12]
 80022a8:	4b53      	ldr	r3, [pc, #332]	@ (80023f8 <ETH_SetMACConfig+0x164>)
 80022aa:	4013      	ands	r3, r2
 80022ac:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	7b9b      	ldrb	r3, [r3, #14]
 80022b2:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80022b4:	683a      	ldr	r2, [r7, #0]
 80022b6:	7c12      	ldrb	r2, [r2, #16]
 80022b8:	2a00      	cmp	r2, #0
 80022ba:	d102      	bne.n	80022c2 <ETH_SetMACConfig+0x2e>
 80022bc:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80022c0:	e000      	b.n	80022c4 <ETH_SetMACConfig+0x30>
 80022c2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80022c4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80022c6:	683a      	ldr	r2, [r7, #0]
 80022c8:	7c52      	ldrb	r2, [r2, #17]
 80022ca:	2a00      	cmp	r2, #0
 80022cc:	d102      	bne.n	80022d4 <ETH_SetMACConfig+0x40>
 80022ce:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80022d2:	e000      	b.n	80022d6 <ETH_SetMACConfig+0x42>
 80022d4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80022d6:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80022dc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	7fdb      	ldrb	r3, [r3, #31]
 80022e2:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80022e4:	431a      	orrs	r2, r3
                        macconf->Speed |
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80022ea:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80022ec:	683a      	ldr	r2, [r7, #0]
 80022ee:	7f92      	ldrb	r2, [r2, #30]
 80022f0:	2a00      	cmp	r2, #0
 80022f2:	d102      	bne.n	80022fa <ETH_SetMACConfig+0x66>
 80022f4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80022f8:	e000      	b.n	80022fc <ETH_SetMACConfig+0x68>
 80022fa:	2200      	movs	r2, #0
                        macconf->Speed |
 80022fc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	7f1b      	ldrb	r3, [r3, #28]
 8002302:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002304:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800230a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	791b      	ldrb	r3, [r3, #4]
 8002310:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002312:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002314:	683a      	ldr	r2, [r7, #0]
 8002316:	f892 2020 	ldrb.w	r2, [r2, #32]
 800231a:	2a00      	cmp	r2, #0
 800231c:	d102      	bne.n	8002324 <ETH_SetMACConfig+0x90>
 800231e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002322:	e000      	b.n	8002326 <ETH_SetMACConfig+0x92>
 8002324:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002326:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	7bdb      	ldrb	r3, [r3, #15]
 800232c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800232e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002334:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800233c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800233e:	4313      	orrs	r3, r2
 8002340:	68fa      	ldr	r2, [r7, #12]
 8002342:	4313      	orrs	r3, r2
 8002344:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	68fa      	ldr	r2, [r7, #12]
 800234c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002356:	2001      	movs	r0, #1
 8002358:	f7ff f9ee 	bl	8001738 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	68fa      	ldr	r2, [r7, #12]
 8002362:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	699b      	ldr	r3, [r3, #24]
 800236a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800236c:	68fa      	ldr	r2, [r7, #12]
 800236e:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8002372:	4013      	ands	r3, r2
 8002374:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800237a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800237c:	683a      	ldr	r2, [r7, #0]
 800237e:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8002382:	2a00      	cmp	r2, #0
 8002384:	d101      	bne.n	800238a <ETH_SetMACConfig+0xf6>
 8002386:	2280      	movs	r2, #128	@ 0x80
 8002388:	e000      	b.n	800238c <ETH_SetMACConfig+0xf8>
 800238a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800238c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002392:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002394:	683a      	ldr	r2, [r7, #0]
 8002396:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 800239a:	2a01      	cmp	r2, #1
 800239c:	d101      	bne.n	80023a2 <ETH_SetMACConfig+0x10e>
 800239e:	2208      	movs	r2, #8
 80023a0:	e000      	b.n	80023a4 <ETH_SetMACConfig+0x110>
 80023a2:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80023a4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80023a6:	683a      	ldr	r2, [r7, #0]
 80023a8:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 80023ac:	2a01      	cmp	r2, #1
 80023ae:	d101      	bne.n	80023b4 <ETH_SetMACConfig+0x120>
 80023b0:	2204      	movs	r2, #4
 80023b2:	e000      	b.n	80023b6 <ETH_SetMACConfig+0x122>
 80023b4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80023b6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80023b8:	683a      	ldr	r2, [r7, #0]
 80023ba:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80023be:	2a01      	cmp	r2, #1
 80023c0:	d101      	bne.n	80023c6 <ETH_SetMACConfig+0x132>
 80023c2:	2202      	movs	r2, #2
 80023c4:	e000      	b.n	80023c8 <ETH_SetMACConfig+0x134>
 80023c6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80023c8:	4313      	orrs	r3, r2
 80023ca:	68fa      	ldr	r2, [r7, #12]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	68fa      	ldr	r2, [r7, #12]
 80023d6:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	699b      	ldr	r3, [r3, #24]
 80023de:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80023e0:	2001      	movs	r0, #1
 80023e2:	f7ff f9a9 	bl	8001738 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	68fa      	ldr	r2, [r7, #12]
 80023ec:	619a      	str	r2, [r3, #24]
}
 80023ee:	bf00      	nop
 80023f0:	3710      	adds	r7, #16
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	fd20810f 	.word	0xfd20810f

080023fc <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800240e:	699b      	ldr	r3, [r3, #24]
 8002410:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002412:	68fa      	ldr	r2, [r7, #12]
 8002414:	4b3d      	ldr	r3, [pc, #244]	@ (800250c <ETH_SetDMAConfig+0x110>)
 8002416:	4013      	ands	r3, r2
 8002418:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	7b1b      	ldrb	r3, [r3, #12]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d102      	bne.n	8002428 <ETH_SetDMAConfig+0x2c>
 8002422:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002426:	e000      	b.n	800242a <ETH_SetDMAConfig+0x2e>
 8002428:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	7b5b      	ldrb	r3, [r3, #13]
 800242e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002430:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002432:	683a      	ldr	r2, [r7, #0]
 8002434:	7f52      	ldrb	r2, [r2, #29]
 8002436:	2a00      	cmp	r2, #0
 8002438:	d102      	bne.n	8002440 <ETH_SetDMAConfig+0x44>
 800243a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800243e:	e000      	b.n	8002442 <ETH_SetDMAConfig+0x46>
 8002440:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002442:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	7b9b      	ldrb	r3, [r3, #14]
 8002448:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800244a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002450:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	7f1b      	ldrb	r3, [r3, #28]
 8002456:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002458:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	7f9b      	ldrb	r3, [r3, #30]
 800245e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002460:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002466:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800246e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002470:	4313      	orrs	r3, r2
 8002472:	68fa      	ldr	r2, [r7, #12]
 8002474:	4313      	orrs	r3, r2
 8002476:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002480:	461a      	mov	r2, r3
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800248e:	699b      	ldr	r3, [r3, #24]
 8002490:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002492:	2001      	movs	r0, #1
 8002494:	f7ff f950 	bl	8001738 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80024a0:	461a      	mov	r2, r3
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	791b      	ldrb	r3, [r3, #4]
 80024aa:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80024b0:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80024b6:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80024bc:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80024c4:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80024c6:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024cc:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80024ce:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80024d4:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	6812      	ldr	r2, [r2, #0]
 80024da:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80024de:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80024e2:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80024f0:	2001      	movs	r0, #1
 80024f2:	f7ff f921 	bl	8001738 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80024fe:	461a      	mov	r2, r3
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	6013      	str	r3, [r2, #0]
}
 8002504:	bf00      	nop
 8002506:	3710      	adds	r7, #16
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}
 800250c:	f8de3f23 	.word	0xf8de3f23

08002510 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b0a6      	sub	sp, #152	@ 0x98
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002518:	2301      	movs	r3, #1
 800251a:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 800251e:	2301      	movs	r3, #1
 8002520:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002524:	2300      	movs	r3, #0
 8002526:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002528:	2300      	movs	r3, #0
 800252a:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800252e:	2301      	movs	r3, #1
 8002530:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002534:	2300      	movs	r3, #0
 8002536:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800253a:	2301      	movs	r3, #1
 800253c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8002540:	2301      	movs	r3, #1
 8002542:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002546:	2300      	movs	r3, #0
 8002548:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800254c:	2300      	movs	r3, #0
 800254e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002552:	2300      	movs	r3, #0
 8002554:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002556:	2300      	movs	r3, #0
 8002558:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800255c:	2300      	movs	r3, #0
 800255e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002560:	2300      	movs	r3, #0
 8002562:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002566:	2300      	movs	r3, #0
 8002568:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800256c:	2300      	movs	r3, #0
 800256e:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002572:	2300      	movs	r3, #0
 8002574:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002578:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800257c:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800257e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002582:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002584:	2300      	movs	r3, #0
 8002586:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800258a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800258e:	4619      	mov	r1, r3
 8002590:	6878      	ldr	r0, [r7, #4]
 8002592:	f7ff fe7f 	bl	8002294 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002596:	2301      	movs	r3, #1
 8002598:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800259a:	2301      	movs	r3, #1
 800259c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800259e:	2301      	movs	r3, #1
 80025a0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80025a4:	2301      	movs	r3, #1
 80025a6:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80025a8:	2300      	movs	r3, #0
 80025aa:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80025ac:	2300      	movs	r3, #0
 80025ae:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80025b2:	2300      	movs	r3, #0
 80025b4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80025b8:	2300      	movs	r3, #0
 80025ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80025bc:	2301      	movs	r3, #1
 80025be:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80025c2:	2301      	movs	r3, #1
 80025c4:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80025c6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80025ca:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80025cc:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80025d0:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80025d2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80025d6:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80025d8:	2301      	movs	r3, #1
 80025da:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80025de:	2300      	movs	r3, #0
 80025e0:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80025e2:	2300      	movs	r3, #0
 80025e4:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80025e6:	f107 0308 	add.w	r3, r7, #8
 80025ea:	4619      	mov	r1, r3
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	f7ff ff05 	bl	80023fc <ETH_SetDMAConfig>
}
 80025f2:	bf00      	nop
 80025f4:	3798      	adds	r7, #152	@ 0x98
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
	...

080025fc <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b087      	sub	sp, #28
 8002600:	af00      	add	r7, sp, #0
 8002602:	60f8      	str	r0, [r7, #12]
 8002604:	60b9      	str	r1, [r7, #8]
 8002606:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	3305      	adds	r3, #5
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	021b      	lsls	r3, r3, #8
 8002610:	687a      	ldr	r2, [r7, #4]
 8002612:	3204      	adds	r2, #4
 8002614:	7812      	ldrb	r2, [r2, #0]
 8002616:	4313      	orrs	r3, r2
 8002618:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800261a:	68ba      	ldr	r2, [r7, #8]
 800261c:	4b11      	ldr	r3, [pc, #68]	@ (8002664 <ETH_MACAddressConfig+0x68>)
 800261e:	4413      	add	r3, r2
 8002620:	461a      	mov	r2, r3
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	3303      	adds	r3, #3
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	061a      	lsls	r2, r3, #24
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	3302      	adds	r3, #2
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	041b      	lsls	r3, r3, #16
 8002636:	431a      	orrs	r2, r3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	3301      	adds	r3, #1
 800263c:	781b      	ldrb	r3, [r3, #0]
 800263e:	021b      	lsls	r3, r3, #8
 8002640:	4313      	orrs	r3, r2
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	7812      	ldrb	r2, [r2, #0]
 8002646:	4313      	orrs	r3, r2
 8002648:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800264a:	68ba      	ldr	r2, [r7, #8]
 800264c:	4b06      	ldr	r3, [pc, #24]	@ (8002668 <ETH_MACAddressConfig+0x6c>)
 800264e:	4413      	add	r3, r2
 8002650:	461a      	mov	r2, r3
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	6013      	str	r3, [r2, #0]
}
 8002656:	bf00      	nop
 8002658:	371c      	adds	r7, #28
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr
 8002662:	bf00      	nop
 8002664:	40028040 	.word	0x40028040
 8002668:	40028044 	.word	0x40028044

0800266c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800266c:	b480      	push	{r7}
 800266e:	b085      	sub	sp, #20
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002674:	2300      	movs	r3, #0
 8002676:	60fb      	str	r3, [r7, #12]
 8002678:	e03e      	b.n	80026f8 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	68d9      	ldr	r1, [r3, #12]
 800267e:	68fa      	ldr	r2, [r7, #12]
 8002680:	4613      	mov	r3, r2
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	4413      	add	r3, r2
 8002686:	00db      	lsls	r3, r3, #3
 8002688:	440b      	add	r3, r1
 800268a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	2200      	movs	r2, #0
 8002690:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	2200      	movs	r2, #0
 8002696:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	2200      	movs	r2, #0
 800269c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	2200      	movs	r2, #0
 80026a2:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80026a4:	68b9      	ldr	r1, [r7, #8]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	68fa      	ldr	r2, [r7, #12]
 80026aa:	3206      	adds	r2, #6
 80026ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2b02      	cmp	r3, #2
 80026c0:	d80c      	bhi.n	80026dc <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	68d9      	ldr	r1, [r3, #12]
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	1c5a      	adds	r2, r3, #1
 80026ca:	4613      	mov	r3, r2
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	4413      	add	r3, r2
 80026d0:	00db      	lsls	r3, r3, #3
 80026d2:	440b      	add	r3, r1
 80026d4:	461a      	mov	r2, r3
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	60da      	str	r2, [r3, #12]
 80026da:	e004      	b.n	80026e6 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	461a      	mov	r2, r3
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	3301      	adds	r3, #1
 80026f6:	60fb      	str	r3, [r7, #12]
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2b03      	cmp	r3, #3
 80026fc:	d9bd      	bls.n	800267a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2200      	movs	r2, #0
 8002702:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	68da      	ldr	r2, [r3, #12]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002710:	611a      	str	r2, [r3, #16]
}
 8002712:	bf00      	nop
 8002714:	3714      	adds	r7, #20
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr

0800271e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800271e:	b480      	push	{r7}
 8002720:	b085      	sub	sp, #20
 8002722:	af00      	add	r7, sp, #0
 8002724:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002726:	2300      	movs	r3, #0
 8002728:	60fb      	str	r3, [r7, #12]
 800272a:	e048      	b.n	80027be <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6919      	ldr	r1, [r3, #16]
 8002730:	68fa      	ldr	r2, [r7, #12]
 8002732:	4613      	mov	r3, r2
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	4413      	add	r3, r2
 8002738:	00db      	lsls	r3, r3, #3
 800273a:	440b      	add	r3, r1
 800273c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	2200      	movs	r2, #0
 8002742:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	2200      	movs	r2, #0
 8002748:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	2200      	movs	r2, #0
 800274e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	2200      	movs	r2, #0
 8002754:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	2200      	movs	r2, #0
 800275a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	2200      	movs	r2, #0
 8002760:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002768:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	695b      	ldr	r3, [r3, #20]
 800276e:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002782:	68b9      	ldr	r1, [r7, #8]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	68fa      	ldr	r2, [r7, #12]
 8002788:	3212      	adds	r2, #18
 800278a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2b02      	cmp	r3, #2
 8002792:	d80c      	bhi.n	80027ae <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6919      	ldr	r1, [r3, #16]
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	1c5a      	adds	r2, r3, #1
 800279c:	4613      	mov	r3, r2
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	4413      	add	r3, r2
 80027a2:	00db      	lsls	r3, r3, #3
 80027a4:	440b      	add	r3, r1
 80027a6:	461a      	mov	r2, r3
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	60da      	str	r2, [r3, #12]
 80027ac:	e004      	b.n	80027b8 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	691b      	ldr	r3, [r3, #16]
 80027b2:	461a      	mov	r2, r3
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	3301      	adds	r3, #1
 80027bc:	60fb      	str	r3, [r7, #12]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2b03      	cmp	r3, #3
 80027c2:	d9b3      	bls.n	800272c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2200      	movs	r2, #0
 80027c8:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2200      	movs	r2, #0
 80027ce:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2200      	movs	r2, #0
 80027d4:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2200      	movs	r2, #0
 80027da:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2200      	movs	r2, #0
 80027e0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	691a      	ldr	r2, [r3, #16]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80027ee:	60da      	str	r2, [r3, #12]
}
 80027f0:	bf00      	nop
 80027f2:	3714      	adds	r7, #20
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr

080027fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b089      	sub	sp, #36	@ 0x24
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002806:	2300      	movs	r3, #0
 8002808:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800280a:	2300      	movs	r3, #0
 800280c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800280e:	2300      	movs	r3, #0
 8002810:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002812:	2300      	movs	r3, #0
 8002814:	61fb      	str	r3, [r7, #28]
 8002816:	e177      	b.n	8002b08 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002818:	2201      	movs	r2, #1
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	fa02 f303 	lsl.w	r3, r2, r3
 8002820:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	697a      	ldr	r2, [r7, #20]
 8002828:	4013      	ands	r3, r2
 800282a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800282c:	693a      	ldr	r2, [r7, #16]
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	429a      	cmp	r2, r3
 8002832:	f040 8166 	bne.w	8002b02 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	f003 0303 	and.w	r3, r3, #3
 800283e:	2b01      	cmp	r3, #1
 8002840:	d005      	beq.n	800284e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800284a:	2b02      	cmp	r3, #2
 800284c:	d130      	bne.n	80028b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	005b      	lsls	r3, r3, #1
 8002858:	2203      	movs	r2, #3
 800285a:	fa02 f303 	lsl.w	r3, r2, r3
 800285e:	43db      	mvns	r3, r3
 8002860:	69ba      	ldr	r2, [r7, #24]
 8002862:	4013      	ands	r3, r2
 8002864:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	68da      	ldr	r2, [r3, #12]
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	005b      	lsls	r3, r3, #1
 800286e:	fa02 f303 	lsl.w	r3, r2, r3
 8002872:	69ba      	ldr	r2, [r7, #24]
 8002874:	4313      	orrs	r3, r2
 8002876:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	69ba      	ldr	r2, [r7, #24]
 800287c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002884:	2201      	movs	r2, #1
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	fa02 f303 	lsl.w	r3, r2, r3
 800288c:	43db      	mvns	r3, r3
 800288e:	69ba      	ldr	r2, [r7, #24]
 8002890:	4013      	ands	r3, r2
 8002892:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	091b      	lsrs	r3, r3, #4
 800289a:	f003 0201 	and.w	r2, r3, #1
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	fa02 f303 	lsl.w	r3, r2, r3
 80028a4:	69ba      	ldr	r2, [r7, #24]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	69ba      	ldr	r2, [r7, #24]
 80028ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f003 0303 	and.w	r3, r3, #3
 80028b8:	2b03      	cmp	r3, #3
 80028ba:	d017      	beq.n	80028ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	005b      	lsls	r3, r3, #1
 80028c6:	2203      	movs	r2, #3
 80028c8:	fa02 f303 	lsl.w	r3, r2, r3
 80028cc:	43db      	mvns	r3, r3
 80028ce:	69ba      	ldr	r2, [r7, #24]
 80028d0:	4013      	ands	r3, r2
 80028d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	689a      	ldr	r2, [r3, #8]
 80028d8:	69fb      	ldr	r3, [r7, #28]
 80028da:	005b      	lsls	r3, r3, #1
 80028dc:	fa02 f303 	lsl.w	r3, r2, r3
 80028e0:	69ba      	ldr	r2, [r7, #24]
 80028e2:	4313      	orrs	r3, r2
 80028e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	69ba      	ldr	r2, [r7, #24]
 80028ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f003 0303 	and.w	r3, r3, #3
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	d123      	bne.n	8002940 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	08da      	lsrs	r2, r3, #3
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	3208      	adds	r2, #8
 8002900:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002904:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	f003 0307 	and.w	r3, r3, #7
 800290c:	009b      	lsls	r3, r3, #2
 800290e:	220f      	movs	r2, #15
 8002910:	fa02 f303 	lsl.w	r3, r2, r3
 8002914:	43db      	mvns	r3, r3
 8002916:	69ba      	ldr	r2, [r7, #24]
 8002918:	4013      	ands	r3, r2
 800291a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	691a      	ldr	r2, [r3, #16]
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	f003 0307 	and.w	r3, r3, #7
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	fa02 f303 	lsl.w	r3, r2, r3
 800292c:	69ba      	ldr	r2, [r7, #24]
 800292e:	4313      	orrs	r3, r2
 8002930:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	08da      	lsrs	r2, r3, #3
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	3208      	adds	r2, #8
 800293a:	69b9      	ldr	r1, [r7, #24]
 800293c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002946:	69fb      	ldr	r3, [r7, #28]
 8002948:	005b      	lsls	r3, r3, #1
 800294a:	2203      	movs	r2, #3
 800294c:	fa02 f303 	lsl.w	r3, r2, r3
 8002950:	43db      	mvns	r3, r3
 8002952:	69ba      	ldr	r2, [r7, #24]
 8002954:	4013      	ands	r3, r2
 8002956:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f003 0203 	and.w	r2, r3, #3
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	005b      	lsls	r3, r3, #1
 8002964:	fa02 f303 	lsl.w	r3, r2, r3
 8002968:	69ba      	ldr	r2, [r7, #24]
 800296a:	4313      	orrs	r3, r2
 800296c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	69ba      	ldr	r2, [r7, #24]
 8002972:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800297c:	2b00      	cmp	r3, #0
 800297e:	f000 80c0 	beq.w	8002b02 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002982:	2300      	movs	r3, #0
 8002984:	60fb      	str	r3, [r7, #12]
 8002986:	4b66      	ldr	r3, [pc, #408]	@ (8002b20 <HAL_GPIO_Init+0x324>)
 8002988:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800298a:	4a65      	ldr	r2, [pc, #404]	@ (8002b20 <HAL_GPIO_Init+0x324>)
 800298c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002990:	6453      	str	r3, [r2, #68]	@ 0x44
 8002992:	4b63      	ldr	r3, [pc, #396]	@ (8002b20 <HAL_GPIO_Init+0x324>)
 8002994:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002996:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800299a:	60fb      	str	r3, [r7, #12]
 800299c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800299e:	4a61      	ldr	r2, [pc, #388]	@ (8002b24 <HAL_GPIO_Init+0x328>)
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	089b      	lsrs	r3, r3, #2
 80029a4:	3302      	adds	r3, #2
 80029a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	f003 0303 	and.w	r3, r3, #3
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	220f      	movs	r2, #15
 80029b6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ba:	43db      	mvns	r3, r3
 80029bc:	69ba      	ldr	r2, [r7, #24]
 80029be:	4013      	ands	r3, r2
 80029c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4a58      	ldr	r2, [pc, #352]	@ (8002b28 <HAL_GPIO_Init+0x32c>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d037      	beq.n	8002a3a <HAL_GPIO_Init+0x23e>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	4a57      	ldr	r2, [pc, #348]	@ (8002b2c <HAL_GPIO_Init+0x330>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d031      	beq.n	8002a36 <HAL_GPIO_Init+0x23a>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4a56      	ldr	r2, [pc, #344]	@ (8002b30 <HAL_GPIO_Init+0x334>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d02b      	beq.n	8002a32 <HAL_GPIO_Init+0x236>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	4a55      	ldr	r2, [pc, #340]	@ (8002b34 <HAL_GPIO_Init+0x338>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d025      	beq.n	8002a2e <HAL_GPIO_Init+0x232>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4a54      	ldr	r2, [pc, #336]	@ (8002b38 <HAL_GPIO_Init+0x33c>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d01f      	beq.n	8002a2a <HAL_GPIO_Init+0x22e>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4a53      	ldr	r2, [pc, #332]	@ (8002b3c <HAL_GPIO_Init+0x340>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d019      	beq.n	8002a26 <HAL_GPIO_Init+0x22a>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4a52      	ldr	r2, [pc, #328]	@ (8002b40 <HAL_GPIO_Init+0x344>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d013      	beq.n	8002a22 <HAL_GPIO_Init+0x226>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4a51      	ldr	r2, [pc, #324]	@ (8002b44 <HAL_GPIO_Init+0x348>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d00d      	beq.n	8002a1e <HAL_GPIO_Init+0x222>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4a50      	ldr	r2, [pc, #320]	@ (8002b48 <HAL_GPIO_Init+0x34c>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d007      	beq.n	8002a1a <HAL_GPIO_Init+0x21e>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4a4f      	ldr	r2, [pc, #316]	@ (8002b4c <HAL_GPIO_Init+0x350>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d101      	bne.n	8002a16 <HAL_GPIO_Init+0x21a>
 8002a12:	2309      	movs	r3, #9
 8002a14:	e012      	b.n	8002a3c <HAL_GPIO_Init+0x240>
 8002a16:	230a      	movs	r3, #10
 8002a18:	e010      	b.n	8002a3c <HAL_GPIO_Init+0x240>
 8002a1a:	2308      	movs	r3, #8
 8002a1c:	e00e      	b.n	8002a3c <HAL_GPIO_Init+0x240>
 8002a1e:	2307      	movs	r3, #7
 8002a20:	e00c      	b.n	8002a3c <HAL_GPIO_Init+0x240>
 8002a22:	2306      	movs	r3, #6
 8002a24:	e00a      	b.n	8002a3c <HAL_GPIO_Init+0x240>
 8002a26:	2305      	movs	r3, #5
 8002a28:	e008      	b.n	8002a3c <HAL_GPIO_Init+0x240>
 8002a2a:	2304      	movs	r3, #4
 8002a2c:	e006      	b.n	8002a3c <HAL_GPIO_Init+0x240>
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e004      	b.n	8002a3c <HAL_GPIO_Init+0x240>
 8002a32:	2302      	movs	r3, #2
 8002a34:	e002      	b.n	8002a3c <HAL_GPIO_Init+0x240>
 8002a36:	2301      	movs	r3, #1
 8002a38:	e000      	b.n	8002a3c <HAL_GPIO_Init+0x240>
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	69fa      	ldr	r2, [r7, #28]
 8002a3e:	f002 0203 	and.w	r2, r2, #3
 8002a42:	0092      	lsls	r2, r2, #2
 8002a44:	4093      	lsls	r3, r2
 8002a46:	69ba      	ldr	r2, [r7, #24]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a4c:	4935      	ldr	r1, [pc, #212]	@ (8002b24 <HAL_GPIO_Init+0x328>)
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	089b      	lsrs	r3, r3, #2
 8002a52:	3302      	adds	r3, #2
 8002a54:	69ba      	ldr	r2, [r7, #24]
 8002a56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a5a:	4b3d      	ldr	r3, [pc, #244]	@ (8002b50 <HAL_GPIO_Init+0x354>)
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	43db      	mvns	r3, r3
 8002a64:	69ba      	ldr	r2, [r7, #24]
 8002a66:	4013      	ands	r3, r2
 8002a68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d003      	beq.n	8002a7e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002a76:	69ba      	ldr	r2, [r7, #24]
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a7e:	4a34      	ldr	r2, [pc, #208]	@ (8002b50 <HAL_GPIO_Init+0x354>)
 8002a80:	69bb      	ldr	r3, [r7, #24]
 8002a82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a84:	4b32      	ldr	r3, [pc, #200]	@ (8002b50 <HAL_GPIO_Init+0x354>)
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	43db      	mvns	r3, r3
 8002a8e:	69ba      	ldr	r2, [r7, #24]
 8002a90:	4013      	ands	r3, r2
 8002a92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d003      	beq.n	8002aa8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002aa0:	69ba      	ldr	r2, [r7, #24]
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002aa8:	4a29      	ldr	r2, [pc, #164]	@ (8002b50 <HAL_GPIO_Init+0x354>)
 8002aaa:	69bb      	ldr	r3, [r7, #24]
 8002aac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002aae:	4b28      	ldr	r3, [pc, #160]	@ (8002b50 <HAL_GPIO_Init+0x354>)
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	43db      	mvns	r3, r3
 8002ab8:	69ba      	ldr	r2, [r7, #24]
 8002aba:	4013      	ands	r3, r2
 8002abc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d003      	beq.n	8002ad2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002aca:	69ba      	ldr	r2, [r7, #24]
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ad2:	4a1f      	ldr	r2, [pc, #124]	@ (8002b50 <HAL_GPIO_Init+0x354>)
 8002ad4:	69bb      	ldr	r3, [r7, #24]
 8002ad6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ad8:	4b1d      	ldr	r3, [pc, #116]	@ (8002b50 <HAL_GPIO_Init+0x354>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	43db      	mvns	r3, r3
 8002ae2:	69ba      	ldr	r2, [r7, #24]
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d003      	beq.n	8002afc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002af4:	69ba      	ldr	r2, [r7, #24]
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	4313      	orrs	r3, r2
 8002afa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002afc:	4a14      	ldr	r2, [pc, #80]	@ (8002b50 <HAL_GPIO_Init+0x354>)
 8002afe:	69bb      	ldr	r3, [r7, #24]
 8002b00:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	3301      	adds	r3, #1
 8002b06:	61fb      	str	r3, [r7, #28]
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	2b0f      	cmp	r3, #15
 8002b0c:	f67f ae84 	bls.w	8002818 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b10:	bf00      	nop
 8002b12:	bf00      	nop
 8002b14:	3724      	adds	r7, #36	@ 0x24
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr
 8002b1e:	bf00      	nop
 8002b20:	40023800 	.word	0x40023800
 8002b24:	40013800 	.word	0x40013800
 8002b28:	40020000 	.word	0x40020000
 8002b2c:	40020400 	.word	0x40020400
 8002b30:	40020800 	.word	0x40020800
 8002b34:	40020c00 	.word	0x40020c00
 8002b38:	40021000 	.word	0x40021000
 8002b3c:	40021400 	.word	0x40021400
 8002b40:	40021800 	.word	0x40021800
 8002b44:	40021c00 	.word	0x40021c00
 8002b48:	40022000 	.word	0x40022000
 8002b4c:	40022400 	.word	0x40022400
 8002b50:	40013c00 	.word	0x40013c00

08002b54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	460b      	mov	r3, r1
 8002b5e:	807b      	strh	r3, [r7, #2]
 8002b60:	4613      	mov	r3, r2
 8002b62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b64:	787b      	ldrb	r3, [r7, #1]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d003      	beq.n	8002b72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b6a:	887a      	ldrh	r2, [r7, #2]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b70:	e003      	b.n	8002b7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b72:	887b      	ldrh	r3, [r7, #2]
 8002b74:	041a      	lsls	r2, r3, #16
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	619a      	str	r2, [r3, #24]
}
 8002b7a:	bf00      	nop
 8002b7c:	370c      	adds	r7, #12
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr
	...

08002b88 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b082      	sub	sp, #8
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	4603      	mov	r3, r0
 8002b90:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002b92:	4b08      	ldr	r3, [pc, #32]	@ (8002bb4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b94:	695a      	ldr	r2, [r3, #20]
 8002b96:	88fb      	ldrh	r3, [r7, #6]
 8002b98:	4013      	ands	r3, r2
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d006      	beq.n	8002bac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002b9e:	4a05      	ldr	r2, [pc, #20]	@ (8002bb4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ba0:	88fb      	ldrh	r3, [r7, #6]
 8002ba2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002ba4:	88fb      	ldrh	r3, [r7, #6]
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f7fe f9e6 	bl	8000f78 <HAL_GPIO_EXTI_Callback>
  }
}
 8002bac:	bf00      	nop
 8002bae:	3708      	adds	r7, #8
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	40013c00 	.word	0x40013c00

08002bb8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b084      	sub	sp, #16
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d101      	bne.n	8002bca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e12b      	b.n	8002e22 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d106      	bne.n	8002be4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f7fe fb74 	bl	80012cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2224      	movs	r2, #36	@ 0x24
 8002be8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f022 0201 	bic.w	r2, r2, #1
 8002bfa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002c0a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002c1a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c1c:	f001 fa64 	bl	80040e8 <HAL_RCC_GetPCLK1Freq>
 8002c20:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	4a81      	ldr	r2, [pc, #516]	@ (8002e2c <HAL_I2C_Init+0x274>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d807      	bhi.n	8002c3c <HAL_I2C_Init+0x84>
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	4a80      	ldr	r2, [pc, #512]	@ (8002e30 <HAL_I2C_Init+0x278>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	bf94      	ite	ls
 8002c34:	2301      	movls	r3, #1
 8002c36:	2300      	movhi	r3, #0
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	e006      	b.n	8002c4a <HAL_I2C_Init+0x92>
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	4a7d      	ldr	r2, [pc, #500]	@ (8002e34 <HAL_I2C_Init+0x27c>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	bf94      	ite	ls
 8002c44:	2301      	movls	r3, #1
 8002c46:	2300      	movhi	r3, #0
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d001      	beq.n	8002c52 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e0e7      	b.n	8002e22 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	4a78      	ldr	r2, [pc, #480]	@ (8002e38 <HAL_I2C_Init+0x280>)
 8002c56:	fba2 2303 	umull	r2, r3, r2, r3
 8002c5a:	0c9b      	lsrs	r3, r3, #18
 8002c5c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	68ba      	ldr	r2, [r7, #8]
 8002c6e:	430a      	orrs	r2, r1
 8002c70:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	6a1b      	ldr	r3, [r3, #32]
 8002c78:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	4a6a      	ldr	r2, [pc, #424]	@ (8002e2c <HAL_I2C_Init+0x274>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d802      	bhi.n	8002c8c <HAL_I2C_Init+0xd4>
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	3301      	adds	r3, #1
 8002c8a:	e009      	b.n	8002ca0 <HAL_I2C_Init+0xe8>
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002c92:	fb02 f303 	mul.w	r3, r2, r3
 8002c96:	4a69      	ldr	r2, [pc, #420]	@ (8002e3c <HAL_I2C_Init+0x284>)
 8002c98:	fba2 2303 	umull	r2, r3, r2, r3
 8002c9c:	099b      	lsrs	r3, r3, #6
 8002c9e:	3301      	adds	r3, #1
 8002ca0:	687a      	ldr	r2, [r7, #4]
 8002ca2:	6812      	ldr	r2, [r2, #0]
 8002ca4:	430b      	orrs	r3, r1
 8002ca6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	69db      	ldr	r3, [r3, #28]
 8002cae:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002cb2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	495c      	ldr	r1, [pc, #368]	@ (8002e2c <HAL_I2C_Init+0x274>)
 8002cbc:	428b      	cmp	r3, r1
 8002cbe:	d819      	bhi.n	8002cf4 <HAL_I2C_Init+0x13c>
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	1e59      	subs	r1, r3, #1
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	005b      	lsls	r3, r3, #1
 8002cca:	fbb1 f3f3 	udiv	r3, r1, r3
 8002cce:	1c59      	adds	r1, r3, #1
 8002cd0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002cd4:	400b      	ands	r3, r1
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d00a      	beq.n	8002cf0 <HAL_I2C_Init+0x138>
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	1e59      	subs	r1, r3, #1
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	005b      	lsls	r3, r3, #1
 8002ce4:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ce8:	3301      	adds	r3, #1
 8002cea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cee:	e051      	b.n	8002d94 <HAL_I2C_Init+0x1dc>
 8002cf0:	2304      	movs	r3, #4
 8002cf2:	e04f      	b.n	8002d94 <HAL_I2C_Init+0x1dc>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d111      	bne.n	8002d20 <HAL_I2C_Init+0x168>
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	1e58      	subs	r0, r3, #1
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6859      	ldr	r1, [r3, #4]
 8002d04:	460b      	mov	r3, r1
 8002d06:	005b      	lsls	r3, r3, #1
 8002d08:	440b      	add	r3, r1
 8002d0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d0e:	3301      	adds	r3, #1
 8002d10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	bf0c      	ite	eq
 8002d18:	2301      	moveq	r3, #1
 8002d1a:	2300      	movne	r3, #0
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	e012      	b.n	8002d46 <HAL_I2C_Init+0x18e>
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	1e58      	subs	r0, r3, #1
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6859      	ldr	r1, [r3, #4]
 8002d28:	460b      	mov	r3, r1
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	440b      	add	r3, r1
 8002d2e:	0099      	lsls	r1, r3, #2
 8002d30:	440b      	add	r3, r1
 8002d32:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d36:	3301      	adds	r3, #1
 8002d38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	bf0c      	ite	eq
 8002d40:	2301      	moveq	r3, #1
 8002d42:	2300      	movne	r3, #0
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d001      	beq.n	8002d4e <HAL_I2C_Init+0x196>
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e022      	b.n	8002d94 <HAL_I2C_Init+0x1dc>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d10e      	bne.n	8002d74 <HAL_I2C_Init+0x1bc>
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	1e58      	subs	r0, r3, #1
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6859      	ldr	r1, [r3, #4]
 8002d5e:	460b      	mov	r3, r1
 8002d60:	005b      	lsls	r3, r3, #1
 8002d62:	440b      	add	r3, r1
 8002d64:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d68:	3301      	adds	r3, #1
 8002d6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d6e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002d72:	e00f      	b.n	8002d94 <HAL_I2C_Init+0x1dc>
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	1e58      	subs	r0, r3, #1
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6859      	ldr	r1, [r3, #4]
 8002d7c:	460b      	mov	r3, r1
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	440b      	add	r3, r1
 8002d82:	0099      	lsls	r1, r3, #2
 8002d84:	440b      	add	r3, r1
 8002d86:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d90:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002d94:	6879      	ldr	r1, [r7, #4]
 8002d96:	6809      	ldr	r1, [r1, #0]
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	69da      	ldr	r2, [r3, #28]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6a1b      	ldr	r3, [r3, #32]
 8002dae:	431a      	orrs	r2, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	430a      	orrs	r2, r1
 8002db6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002dc2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	6911      	ldr	r1, [r2, #16]
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	68d2      	ldr	r2, [r2, #12]
 8002dce:	4311      	orrs	r1, r2
 8002dd0:	687a      	ldr	r2, [r7, #4]
 8002dd2:	6812      	ldr	r2, [r2, #0]
 8002dd4:	430b      	orrs	r3, r1
 8002dd6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	68db      	ldr	r3, [r3, #12]
 8002dde:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	695a      	ldr	r2, [r3, #20]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	699b      	ldr	r3, [r3, #24]
 8002dea:	431a      	orrs	r2, r3
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	430a      	orrs	r2, r1
 8002df2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f042 0201 	orr.w	r2, r2, #1
 8002e02:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2200      	movs	r2, #0
 8002e08:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2220      	movs	r2, #32
 8002e0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2200      	movs	r2, #0
 8002e16:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002e20:	2300      	movs	r3, #0
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3710      	adds	r7, #16
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	000186a0 	.word	0x000186a0
 8002e30:	001e847f 	.word	0x001e847f
 8002e34:	003d08ff 	.word	0x003d08ff
 8002e38:	431bde83 	.word	0x431bde83
 8002e3c:	10624dd3 	.word	0x10624dd3

08002e40 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b088      	sub	sp, #32
 8002e44:	af02      	add	r7, sp, #8
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	607a      	str	r2, [r7, #4]
 8002e4a:	461a      	mov	r2, r3
 8002e4c:	460b      	mov	r3, r1
 8002e4e:	817b      	strh	r3, [r7, #10]
 8002e50:	4613      	mov	r3, r2
 8002e52:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e54:	f7fe fc64 	bl	8001720 <HAL_GetTick>
 8002e58:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	2b20      	cmp	r3, #32
 8002e64:	f040 80e0 	bne.w	8003028 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	9300      	str	r3, [sp, #0]
 8002e6c:	2319      	movs	r3, #25
 8002e6e:	2201      	movs	r2, #1
 8002e70:	4970      	ldr	r1, [pc, #448]	@ (8003034 <HAL_I2C_Master_Transmit+0x1f4>)
 8002e72:	68f8      	ldr	r0, [r7, #12]
 8002e74:	f000 f964 	bl	8003140 <I2C_WaitOnFlagUntilTimeout>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d001      	beq.n	8002e82 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002e7e:	2302      	movs	r3, #2
 8002e80:	e0d3      	b.n	800302a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d101      	bne.n	8002e90 <HAL_I2C_Master_Transmit+0x50>
 8002e8c:	2302      	movs	r3, #2
 8002e8e:	e0cc      	b.n	800302a <HAL_I2C_Master_Transmit+0x1ea>
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2201      	movs	r2, #1
 8002e94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 0301 	and.w	r3, r3, #1
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d007      	beq.n	8002eb6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f042 0201 	orr.w	r2, r2, #1
 8002eb4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ec4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2221      	movs	r2, #33	@ 0x21
 8002eca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2210      	movs	r2, #16
 8002ed2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	893a      	ldrh	r2, [r7, #8]
 8002ee6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002eec:	b29a      	uxth	r2, r3
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	4a50      	ldr	r2, [pc, #320]	@ (8003038 <HAL_I2C_Master_Transmit+0x1f8>)
 8002ef6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002ef8:	8979      	ldrh	r1, [r7, #10]
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	6a3a      	ldr	r2, [r7, #32]
 8002efe:	68f8      	ldr	r0, [r7, #12]
 8002f00:	f000 f89c 	bl	800303c <I2C_MasterRequestWrite>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d001      	beq.n	8002f0e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e08d      	b.n	800302a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f0e:	2300      	movs	r3, #0
 8002f10:	613b      	str	r3, [r7, #16]
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	695b      	ldr	r3, [r3, #20]
 8002f18:	613b      	str	r3, [r7, #16]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	699b      	ldr	r3, [r3, #24]
 8002f20:	613b      	str	r3, [r7, #16]
 8002f22:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002f24:	e066      	b.n	8002ff4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f26:	697a      	ldr	r2, [r7, #20]
 8002f28:	6a39      	ldr	r1, [r7, #32]
 8002f2a:	68f8      	ldr	r0, [r7, #12]
 8002f2c:	f000 fa22 	bl	8003374 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d00d      	beq.n	8002f52 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f3a:	2b04      	cmp	r3, #4
 8002f3c:	d107      	bne.n	8002f4e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f4c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e06b      	b.n	800302a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f56:	781a      	ldrb	r2, [r3, #0]
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f62:	1c5a      	adds	r2, r3, #1
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f6c:	b29b      	uxth	r3, r3
 8002f6e:	3b01      	subs	r3, #1
 8002f70:	b29a      	uxth	r2, r3
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f7a:	3b01      	subs	r3, #1
 8002f7c:	b29a      	uxth	r2, r3
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	695b      	ldr	r3, [r3, #20]
 8002f88:	f003 0304 	and.w	r3, r3, #4
 8002f8c:	2b04      	cmp	r3, #4
 8002f8e:	d11b      	bne.n	8002fc8 <HAL_I2C_Master_Transmit+0x188>
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d017      	beq.n	8002fc8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f9c:	781a      	ldrb	r2, [r3, #0]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fa8:	1c5a      	adds	r2, r3, #1
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fb2:	b29b      	uxth	r3, r3
 8002fb4:	3b01      	subs	r3, #1
 8002fb6:	b29a      	uxth	r2, r3
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fc0:	3b01      	subs	r3, #1
 8002fc2:	b29a      	uxth	r2, r3
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fc8:	697a      	ldr	r2, [r7, #20]
 8002fca:	6a39      	ldr	r1, [r7, #32]
 8002fcc:	68f8      	ldr	r0, [r7, #12]
 8002fce:	f000 fa19 	bl	8003404 <I2C_WaitOnBTFFlagUntilTimeout>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d00d      	beq.n	8002ff4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fdc:	2b04      	cmp	r3, #4
 8002fde:	d107      	bne.n	8002ff0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fee:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e01a      	b.n	800302a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d194      	bne.n	8002f26 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800300a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2220      	movs	r2, #32
 8003010:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2200      	movs	r2, #0
 8003018:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2200      	movs	r2, #0
 8003020:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003024:	2300      	movs	r3, #0
 8003026:	e000      	b.n	800302a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003028:	2302      	movs	r3, #2
  }
}
 800302a:	4618      	mov	r0, r3
 800302c:	3718      	adds	r7, #24
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	00100002 	.word	0x00100002
 8003038:	ffff0000 	.word	0xffff0000

0800303c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b088      	sub	sp, #32
 8003040:	af02      	add	r7, sp, #8
 8003042:	60f8      	str	r0, [r7, #12]
 8003044:	607a      	str	r2, [r7, #4]
 8003046:	603b      	str	r3, [r7, #0]
 8003048:	460b      	mov	r3, r1
 800304a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003050:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	2b08      	cmp	r3, #8
 8003056:	d006      	beq.n	8003066 <I2C_MasterRequestWrite+0x2a>
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	2b01      	cmp	r3, #1
 800305c:	d003      	beq.n	8003066 <I2C_MasterRequestWrite+0x2a>
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003064:	d108      	bne.n	8003078 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003074:	601a      	str	r2, [r3, #0]
 8003076:	e00b      	b.n	8003090 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800307c:	2b12      	cmp	r3, #18
 800307e:	d107      	bne.n	8003090 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800308e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	9300      	str	r3, [sp, #0]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2200      	movs	r2, #0
 8003098:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800309c:	68f8      	ldr	r0, [r7, #12]
 800309e:	f000 f84f 	bl	8003140 <I2C_WaitOnFlagUntilTimeout>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d00d      	beq.n	80030c4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80030b6:	d103      	bne.n	80030c0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80030be:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80030c0:	2303      	movs	r3, #3
 80030c2:	e035      	b.n	8003130 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	691b      	ldr	r3, [r3, #16]
 80030c8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80030cc:	d108      	bne.n	80030e0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80030ce:	897b      	ldrh	r3, [r7, #10]
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	461a      	mov	r2, r3
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80030dc:	611a      	str	r2, [r3, #16]
 80030de:	e01b      	b.n	8003118 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80030e0:	897b      	ldrh	r3, [r7, #10]
 80030e2:	11db      	asrs	r3, r3, #7
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	f003 0306 	and.w	r3, r3, #6
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	f063 030f 	orn	r3, r3, #15
 80030f0:	b2da      	uxtb	r2, r3
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	490e      	ldr	r1, [pc, #56]	@ (8003138 <I2C_MasterRequestWrite+0xfc>)
 80030fe:	68f8      	ldr	r0, [r7, #12]
 8003100:	f000 f898 	bl	8003234 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003104:	4603      	mov	r3, r0
 8003106:	2b00      	cmp	r3, #0
 8003108:	d001      	beq.n	800310e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e010      	b.n	8003130 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800310e:	897b      	ldrh	r3, [r7, #10]
 8003110:	b2da      	uxtb	r2, r3
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	4907      	ldr	r1, [pc, #28]	@ (800313c <I2C_MasterRequestWrite+0x100>)
 800311e:	68f8      	ldr	r0, [r7, #12]
 8003120:	f000 f888 	bl	8003234 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	d001      	beq.n	800312e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e000      	b.n	8003130 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800312e:	2300      	movs	r3, #0
}
 8003130:	4618      	mov	r0, r3
 8003132:	3718      	adds	r7, #24
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}
 8003138:	00010008 	.word	0x00010008
 800313c:	00010002 	.word	0x00010002

08003140 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af00      	add	r7, sp, #0
 8003146:	60f8      	str	r0, [r7, #12]
 8003148:	60b9      	str	r1, [r7, #8]
 800314a:	603b      	str	r3, [r7, #0]
 800314c:	4613      	mov	r3, r2
 800314e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003150:	e048      	b.n	80031e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003158:	d044      	beq.n	80031e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800315a:	f7fe fae1 	bl	8001720 <HAL_GetTick>
 800315e:	4602      	mov	r2, r0
 8003160:	69bb      	ldr	r3, [r7, #24]
 8003162:	1ad3      	subs	r3, r2, r3
 8003164:	683a      	ldr	r2, [r7, #0]
 8003166:	429a      	cmp	r2, r3
 8003168:	d302      	bcc.n	8003170 <I2C_WaitOnFlagUntilTimeout+0x30>
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d139      	bne.n	80031e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	0c1b      	lsrs	r3, r3, #16
 8003174:	b2db      	uxtb	r3, r3
 8003176:	2b01      	cmp	r3, #1
 8003178:	d10d      	bne.n	8003196 <I2C_WaitOnFlagUntilTimeout+0x56>
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	695b      	ldr	r3, [r3, #20]
 8003180:	43da      	mvns	r2, r3
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	4013      	ands	r3, r2
 8003186:	b29b      	uxth	r3, r3
 8003188:	2b00      	cmp	r3, #0
 800318a:	bf0c      	ite	eq
 800318c:	2301      	moveq	r3, #1
 800318e:	2300      	movne	r3, #0
 8003190:	b2db      	uxtb	r3, r3
 8003192:	461a      	mov	r2, r3
 8003194:	e00c      	b.n	80031b0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	699b      	ldr	r3, [r3, #24]
 800319c:	43da      	mvns	r2, r3
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	4013      	ands	r3, r2
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	bf0c      	ite	eq
 80031a8:	2301      	moveq	r3, #1
 80031aa:	2300      	movne	r3, #0
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	461a      	mov	r2, r3
 80031b0:	79fb      	ldrb	r3, [r7, #7]
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d116      	bne.n	80031e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2200      	movs	r2, #0
 80031ba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2220      	movs	r2, #32
 80031c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2200      	movs	r2, #0
 80031c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031d0:	f043 0220 	orr.w	r2, r3, #32
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2200      	movs	r2, #0
 80031dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e023      	b.n	800322c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	0c1b      	lsrs	r3, r3, #16
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d10d      	bne.n	800320a <I2C_WaitOnFlagUntilTimeout+0xca>
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	695b      	ldr	r3, [r3, #20]
 80031f4:	43da      	mvns	r2, r3
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	4013      	ands	r3, r2
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	bf0c      	ite	eq
 8003200:	2301      	moveq	r3, #1
 8003202:	2300      	movne	r3, #0
 8003204:	b2db      	uxtb	r3, r3
 8003206:	461a      	mov	r2, r3
 8003208:	e00c      	b.n	8003224 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	699b      	ldr	r3, [r3, #24]
 8003210:	43da      	mvns	r2, r3
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	4013      	ands	r3, r2
 8003216:	b29b      	uxth	r3, r3
 8003218:	2b00      	cmp	r3, #0
 800321a:	bf0c      	ite	eq
 800321c:	2301      	moveq	r3, #1
 800321e:	2300      	movne	r3, #0
 8003220:	b2db      	uxtb	r3, r3
 8003222:	461a      	mov	r2, r3
 8003224:	79fb      	ldrb	r3, [r7, #7]
 8003226:	429a      	cmp	r2, r3
 8003228:	d093      	beq.n	8003152 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800322a:	2300      	movs	r3, #0
}
 800322c:	4618      	mov	r0, r3
 800322e:	3710      	adds	r7, #16
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}

08003234 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b084      	sub	sp, #16
 8003238:	af00      	add	r7, sp, #0
 800323a:	60f8      	str	r0, [r7, #12]
 800323c:	60b9      	str	r1, [r7, #8]
 800323e:	607a      	str	r2, [r7, #4]
 8003240:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003242:	e071      	b.n	8003328 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	695b      	ldr	r3, [r3, #20]
 800324a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800324e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003252:	d123      	bne.n	800329c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003262:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800326c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2200      	movs	r2, #0
 8003272:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2220      	movs	r2, #32
 8003278:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2200      	movs	r2, #0
 8003280:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003288:	f043 0204 	orr.w	r2, r3, #4
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2200      	movs	r2, #0
 8003294:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	e067      	b.n	800336c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032a2:	d041      	beq.n	8003328 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032a4:	f7fe fa3c 	bl	8001720 <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d302      	bcc.n	80032ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d136      	bne.n	8003328 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	0c1b      	lsrs	r3, r3, #16
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d10c      	bne.n	80032de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	695b      	ldr	r3, [r3, #20]
 80032ca:	43da      	mvns	r2, r3
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	4013      	ands	r3, r2
 80032d0:	b29b      	uxth	r3, r3
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	bf14      	ite	ne
 80032d6:	2301      	movne	r3, #1
 80032d8:	2300      	moveq	r3, #0
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	e00b      	b.n	80032f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	699b      	ldr	r3, [r3, #24]
 80032e4:	43da      	mvns	r2, r3
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	4013      	ands	r3, r2
 80032ea:	b29b      	uxth	r3, r3
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	bf14      	ite	ne
 80032f0:	2301      	movne	r3, #1
 80032f2:	2300      	moveq	r3, #0
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d016      	beq.n	8003328 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2200      	movs	r2, #0
 80032fe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2220      	movs	r2, #32
 8003304:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2200      	movs	r2, #0
 800330c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003314:	f043 0220 	orr.w	r2, r3, #32
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2200      	movs	r2, #0
 8003320:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e021      	b.n	800336c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	0c1b      	lsrs	r3, r3, #16
 800332c:	b2db      	uxtb	r3, r3
 800332e:	2b01      	cmp	r3, #1
 8003330:	d10c      	bne.n	800334c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	695b      	ldr	r3, [r3, #20]
 8003338:	43da      	mvns	r2, r3
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	4013      	ands	r3, r2
 800333e:	b29b      	uxth	r3, r3
 8003340:	2b00      	cmp	r3, #0
 8003342:	bf14      	ite	ne
 8003344:	2301      	movne	r3, #1
 8003346:	2300      	moveq	r3, #0
 8003348:	b2db      	uxtb	r3, r3
 800334a:	e00b      	b.n	8003364 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	699b      	ldr	r3, [r3, #24]
 8003352:	43da      	mvns	r2, r3
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	4013      	ands	r3, r2
 8003358:	b29b      	uxth	r3, r3
 800335a:	2b00      	cmp	r3, #0
 800335c:	bf14      	ite	ne
 800335e:	2301      	movne	r3, #1
 8003360:	2300      	moveq	r3, #0
 8003362:	b2db      	uxtb	r3, r3
 8003364:	2b00      	cmp	r3, #0
 8003366:	f47f af6d 	bne.w	8003244 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800336a:	2300      	movs	r3, #0
}
 800336c:	4618      	mov	r0, r3
 800336e:	3710      	adds	r7, #16
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}

08003374 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b084      	sub	sp, #16
 8003378:	af00      	add	r7, sp, #0
 800337a:	60f8      	str	r0, [r7, #12]
 800337c:	60b9      	str	r1, [r7, #8]
 800337e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003380:	e034      	b.n	80033ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003382:	68f8      	ldr	r0, [r7, #12]
 8003384:	f000 f886 	bl	8003494 <I2C_IsAcknowledgeFailed>
 8003388:	4603      	mov	r3, r0
 800338a:	2b00      	cmp	r3, #0
 800338c:	d001      	beq.n	8003392 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e034      	b.n	80033fc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003398:	d028      	beq.n	80033ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800339a:	f7fe f9c1 	bl	8001720 <HAL_GetTick>
 800339e:	4602      	mov	r2, r0
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	1ad3      	subs	r3, r2, r3
 80033a4:	68ba      	ldr	r2, [r7, #8]
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d302      	bcc.n	80033b0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d11d      	bne.n	80033ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	695b      	ldr	r3, [r3, #20]
 80033b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033ba:	2b80      	cmp	r3, #128	@ 0x80
 80033bc:	d016      	beq.n	80033ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2200      	movs	r2, #0
 80033c2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2220      	movs	r2, #32
 80033c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2200      	movs	r2, #0
 80033d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033d8:	f043 0220 	orr.w	r2, r3, #32
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2200      	movs	r2, #0
 80033e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	e007      	b.n	80033fc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	695b      	ldr	r3, [r3, #20]
 80033f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033f6:	2b80      	cmp	r3, #128	@ 0x80
 80033f8:	d1c3      	bne.n	8003382 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80033fa:	2300      	movs	r3, #0
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3710      	adds	r7, #16
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}

08003404 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b084      	sub	sp, #16
 8003408:	af00      	add	r7, sp, #0
 800340a:	60f8      	str	r0, [r7, #12]
 800340c:	60b9      	str	r1, [r7, #8]
 800340e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003410:	e034      	b.n	800347c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003412:	68f8      	ldr	r0, [r7, #12]
 8003414:	f000 f83e 	bl	8003494 <I2C_IsAcknowledgeFailed>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d001      	beq.n	8003422 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e034      	b.n	800348c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003428:	d028      	beq.n	800347c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800342a:	f7fe f979 	bl	8001720 <HAL_GetTick>
 800342e:	4602      	mov	r2, r0
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	68ba      	ldr	r2, [r7, #8]
 8003436:	429a      	cmp	r2, r3
 8003438:	d302      	bcc.n	8003440 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d11d      	bne.n	800347c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	695b      	ldr	r3, [r3, #20]
 8003446:	f003 0304 	and.w	r3, r3, #4
 800344a:	2b04      	cmp	r3, #4
 800344c:	d016      	beq.n	800347c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2200      	movs	r2, #0
 8003452:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2220      	movs	r2, #32
 8003458:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2200      	movs	r2, #0
 8003460:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003468:	f043 0220 	orr.w	r2, r3, #32
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2200      	movs	r2, #0
 8003474:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	e007      	b.n	800348c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	695b      	ldr	r3, [r3, #20]
 8003482:	f003 0304 	and.w	r3, r3, #4
 8003486:	2b04      	cmp	r3, #4
 8003488:	d1c3      	bne.n	8003412 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800348a:	2300      	movs	r3, #0
}
 800348c:	4618      	mov	r0, r3
 800348e:	3710      	adds	r7, #16
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}

08003494 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	695b      	ldr	r3, [r3, #20]
 80034a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034aa:	d11b      	bne.n	80034e4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80034b4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2200      	movs	r2, #0
 80034ba:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2220      	movs	r2, #32
 80034c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2200      	movs	r2, #0
 80034c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034d0:	f043 0204 	orr.w	r2, r3, #4
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2200      	movs	r2, #0
 80034dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	e000      	b.n	80034e6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80034e4:	2300      	movs	r3, #0
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	370c      	adds	r7, #12
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr

080034f2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80034f2:	b480      	push	{r7}
 80034f4:	b083      	sub	sp, #12
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	6078      	str	r0, [r7, #4]
 80034fa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003502:	b2db      	uxtb	r3, r3
 8003504:	2b20      	cmp	r3, #32
 8003506:	d129      	bne.n	800355c <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2224      	movs	r2, #36	@ 0x24
 800350c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f022 0201 	bic.w	r2, r2, #1
 800351e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f022 0210 	bic.w	r2, r2, #16
 800352e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	683a      	ldr	r2, [r7, #0]
 800353c:	430a      	orrs	r2, r1
 800353e:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f042 0201 	orr.w	r2, r2, #1
 800354e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2220      	movs	r2, #32
 8003554:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8003558:	2300      	movs	r3, #0
 800355a:	e000      	b.n	800355e <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800355c:	2302      	movs	r3, #2
  }
}
 800355e:	4618      	mov	r0, r3
 8003560:	370c      	adds	r7, #12
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr

0800356a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800356a:	b480      	push	{r7}
 800356c:	b085      	sub	sp, #20
 800356e:	af00      	add	r7, sp, #0
 8003570:	6078      	str	r0, [r7, #4]
 8003572:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003574:	2300      	movs	r3, #0
 8003576:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800357e:	b2db      	uxtb	r3, r3
 8003580:	2b20      	cmp	r3, #32
 8003582:	d12a      	bne.n	80035da <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2224      	movs	r2, #36	@ 0x24
 8003588:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f022 0201 	bic.w	r2, r2, #1
 800359a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035a2:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80035a4:	89fb      	ldrh	r3, [r7, #14]
 80035a6:	f023 030f 	bic.w	r3, r3, #15
 80035aa:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	b29a      	uxth	r2, r3
 80035b0:	89fb      	ldrh	r3, [r7, #14]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	89fa      	ldrh	r2, [r7, #14]
 80035bc:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f042 0201 	orr.w	r2, r2, #1
 80035cc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2220      	movs	r2, #32
 80035d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80035d6:	2300      	movs	r3, #0
 80035d8:	e000      	b.n	80035dc <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80035da:	2302      	movs	r3, #2
  }
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3714      	adds	r7, #20
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr

080035e8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b086      	sub	sp, #24
 80035ec:	af02      	add	r7, sp, #8
 80035ee:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d101      	bne.n	80035fa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e101      	b.n	80037fe <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003606:	b2db      	uxtb	r3, r3
 8003608:	2b00      	cmp	r3, #0
 800360a:	d106      	bne.n	800361a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2200      	movs	r2, #0
 8003610:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	f7fd ff0f 	bl	8001438 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2203      	movs	r2, #3
 800361e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003628:	d102      	bne.n	8003630 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4618      	mov	r0, r3
 8003636:	f001 fd1d 	bl	8005074 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6818      	ldr	r0, [r3, #0]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	7c1a      	ldrb	r2, [r3, #16]
 8003642:	f88d 2000 	strb.w	r2, [sp]
 8003646:	3304      	adds	r3, #4
 8003648:	cb0e      	ldmia	r3, {r1, r2, r3}
 800364a:	f001 fcaf 	bl	8004fac <USB_CoreInit>
 800364e:	4603      	mov	r3, r0
 8003650:	2b00      	cmp	r3, #0
 8003652:	d005      	beq.n	8003660 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2202      	movs	r2, #2
 8003658:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	e0ce      	b.n	80037fe <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	2100      	movs	r1, #0
 8003666:	4618      	mov	r0, r3
 8003668:	f001 fd15 	bl	8005096 <USB_SetCurrentMode>
 800366c:	4603      	mov	r3, r0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d005      	beq.n	800367e <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2202      	movs	r2, #2
 8003676:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e0bf      	b.n	80037fe <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800367e:	2300      	movs	r3, #0
 8003680:	73fb      	strb	r3, [r7, #15]
 8003682:	e04a      	b.n	800371a <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003684:	7bfa      	ldrb	r2, [r7, #15]
 8003686:	6879      	ldr	r1, [r7, #4]
 8003688:	4613      	mov	r3, r2
 800368a:	00db      	lsls	r3, r3, #3
 800368c:	4413      	add	r3, r2
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	440b      	add	r3, r1
 8003692:	3315      	adds	r3, #21
 8003694:	2201      	movs	r2, #1
 8003696:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003698:	7bfa      	ldrb	r2, [r7, #15]
 800369a:	6879      	ldr	r1, [r7, #4]
 800369c:	4613      	mov	r3, r2
 800369e:	00db      	lsls	r3, r3, #3
 80036a0:	4413      	add	r3, r2
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	440b      	add	r3, r1
 80036a6:	3314      	adds	r3, #20
 80036a8:	7bfa      	ldrb	r2, [r7, #15]
 80036aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80036ac:	7bfa      	ldrb	r2, [r7, #15]
 80036ae:	7bfb      	ldrb	r3, [r7, #15]
 80036b0:	b298      	uxth	r0, r3
 80036b2:	6879      	ldr	r1, [r7, #4]
 80036b4:	4613      	mov	r3, r2
 80036b6:	00db      	lsls	r3, r3, #3
 80036b8:	4413      	add	r3, r2
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	440b      	add	r3, r1
 80036be:	332e      	adds	r3, #46	@ 0x2e
 80036c0:	4602      	mov	r2, r0
 80036c2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80036c4:	7bfa      	ldrb	r2, [r7, #15]
 80036c6:	6879      	ldr	r1, [r7, #4]
 80036c8:	4613      	mov	r3, r2
 80036ca:	00db      	lsls	r3, r3, #3
 80036cc:	4413      	add	r3, r2
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	440b      	add	r3, r1
 80036d2:	3318      	adds	r3, #24
 80036d4:	2200      	movs	r2, #0
 80036d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80036d8:	7bfa      	ldrb	r2, [r7, #15]
 80036da:	6879      	ldr	r1, [r7, #4]
 80036dc:	4613      	mov	r3, r2
 80036de:	00db      	lsls	r3, r3, #3
 80036e0:	4413      	add	r3, r2
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	440b      	add	r3, r1
 80036e6:	331c      	adds	r3, #28
 80036e8:	2200      	movs	r2, #0
 80036ea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80036ec:	7bfa      	ldrb	r2, [r7, #15]
 80036ee:	6879      	ldr	r1, [r7, #4]
 80036f0:	4613      	mov	r3, r2
 80036f2:	00db      	lsls	r3, r3, #3
 80036f4:	4413      	add	r3, r2
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	440b      	add	r3, r1
 80036fa:	3320      	adds	r3, #32
 80036fc:	2200      	movs	r2, #0
 80036fe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003700:	7bfa      	ldrb	r2, [r7, #15]
 8003702:	6879      	ldr	r1, [r7, #4]
 8003704:	4613      	mov	r3, r2
 8003706:	00db      	lsls	r3, r3, #3
 8003708:	4413      	add	r3, r2
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	440b      	add	r3, r1
 800370e:	3324      	adds	r3, #36	@ 0x24
 8003710:	2200      	movs	r2, #0
 8003712:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003714:	7bfb      	ldrb	r3, [r7, #15]
 8003716:	3301      	adds	r3, #1
 8003718:	73fb      	strb	r3, [r7, #15]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	791b      	ldrb	r3, [r3, #4]
 800371e:	7bfa      	ldrb	r2, [r7, #15]
 8003720:	429a      	cmp	r2, r3
 8003722:	d3af      	bcc.n	8003684 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003724:	2300      	movs	r3, #0
 8003726:	73fb      	strb	r3, [r7, #15]
 8003728:	e044      	b.n	80037b4 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800372a:	7bfa      	ldrb	r2, [r7, #15]
 800372c:	6879      	ldr	r1, [r7, #4]
 800372e:	4613      	mov	r3, r2
 8003730:	00db      	lsls	r3, r3, #3
 8003732:	4413      	add	r3, r2
 8003734:	009b      	lsls	r3, r3, #2
 8003736:	440b      	add	r3, r1
 8003738:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800373c:	2200      	movs	r2, #0
 800373e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003740:	7bfa      	ldrb	r2, [r7, #15]
 8003742:	6879      	ldr	r1, [r7, #4]
 8003744:	4613      	mov	r3, r2
 8003746:	00db      	lsls	r3, r3, #3
 8003748:	4413      	add	r3, r2
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	440b      	add	r3, r1
 800374e:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003752:	7bfa      	ldrb	r2, [r7, #15]
 8003754:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003756:	7bfa      	ldrb	r2, [r7, #15]
 8003758:	6879      	ldr	r1, [r7, #4]
 800375a:	4613      	mov	r3, r2
 800375c:	00db      	lsls	r3, r3, #3
 800375e:	4413      	add	r3, r2
 8003760:	009b      	lsls	r3, r3, #2
 8003762:	440b      	add	r3, r1
 8003764:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003768:	2200      	movs	r2, #0
 800376a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800376c:	7bfa      	ldrb	r2, [r7, #15]
 800376e:	6879      	ldr	r1, [r7, #4]
 8003770:	4613      	mov	r3, r2
 8003772:	00db      	lsls	r3, r3, #3
 8003774:	4413      	add	r3, r2
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	440b      	add	r3, r1
 800377a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800377e:	2200      	movs	r2, #0
 8003780:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003782:	7bfa      	ldrb	r2, [r7, #15]
 8003784:	6879      	ldr	r1, [r7, #4]
 8003786:	4613      	mov	r3, r2
 8003788:	00db      	lsls	r3, r3, #3
 800378a:	4413      	add	r3, r2
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	440b      	add	r3, r1
 8003790:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003794:	2200      	movs	r2, #0
 8003796:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003798:	7bfa      	ldrb	r2, [r7, #15]
 800379a:	6879      	ldr	r1, [r7, #4]
 800379c:	4613      	mov	r3, r2
 800379e:	00db      	lsls	r3, r3, #3
 80037a0:	4413      	add	r3, r2
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	440b      	add	r3, r1
 80037a6:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80037aa:	2200      	movs	r2, #0
 80037ac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037ae:	7bfb      	ldrb	r3, [r7, #15]
 80037b0:	3301      	adds	r3, #1
 80037b2:	73fb      	strb	r3, [r7, #15]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	791b      	ldrb	r3, [r3, #4]
 80037b8:	7bfa      	ldrb	r2, [r7, #15]
 80037ba:	429a      	cmp	r2, r3
 80037bc:	d3b5      	bcc.n	800372a <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6818      	ldr	r0, [r3, #0]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	7c1a      	ldrb	r2, [r3, #16]
 80037c6:	f88d 2000 	strb.w	r2, [sp]
 80037ca:	3304      	adds	r3, #4
 80037cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80037ce:	f001 fcaf 	bl	8005130 <USB_DevInit>
 80037d2:	4603      	mov	r3, r0
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d005      	beq.n	80037e4 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2202      	movs	r2, #2
 80037dc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	e00c      	b.n	80037fe <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2201      	movs	r2, #1
 80037ee:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4618      	mov	r0, r3
 80037f8:	f001 fe77 	bl	80054ea <USB_DevDisconnect>

  return HAL_OK;
 80037fc:	2300      	movs	r3, #0
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3710      	adds	r7, #16
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
	...

08003808 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b086      	sub	sp, #24
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d101      	bne.n	800381a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e267      	b.n	8003cea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 0301 	and.w	r3, r3, #1
 8003822:	2b00      	cmp	r3, #0
 8003824:	d075      	beq.n	8003912 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003826:	4b88      	ldr	r3, [pc, #544]	@ (8003a48 <HAL_RCC_OscConfig+0x240>)
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	f003 030c 	and.w	r3, r3, #12
 800382e:	2b04      	cmp	r3, #4
 8003830:	d00c      	beq.n	800384c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003832:	4b85      	ldr	r3, [pc, #532]	@ (8003a48 <HAL_RCC_OscConfig+0x240>)
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800383a:	2b08      	cmp	r3, #8
 800383c:	d112      	bne.n	8003864 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800383e:	4b82      	ldr	r3, [pc, #520]	@ (8003a48 <HAL_RCC_OscConfig+0x240>)
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003846:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800384a:	d10b      	bne.n	8003864 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800384c:	4b7e      	ldr	r3, [pc, #504]	@ (8003a48 <HAL_RCC_OscConfig+0x240>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003854:	2b00      	cmp	r3, #0
 8003856:	d05b      	beq.n	8003910 <HAL_RCC_OscConfig+0x108>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d157      	bne.n	8003910 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e242      	b.n	8003cea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800386c:	d106      	bne.n	800387c <HAL_RCC_OscConfig+0x74>
 800386e:	4b76      	ldr	r3, [pc, #472]	@ (8003a48 <HAL_RCC_OscConfig+0x240>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a75      	ldr	r2, [pc, #468]	@ (8003a48 <HAL_RCC_OscConfig+0x240>)
 8003874:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003878:	6013      	str	r3, [r2, #0]
 800387a:	e01d      	b.n	80038b8 <HAL_RCC_OscConfig+0xb0>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003884:	d10c      	bne.n	80038a0 <HAL_RCC_OscConfig+0x98>
 8003886:	4b70      	ldr	r3, [pc, #448]	@ (8003a48 <HAL_RCC_OscConfig+0x240>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a6f      	ldr	r2, [pc, #444]	@ (8003a48 <HAL_RCC_OscConfig+0x240>)
 800388c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003890:	6013      	str	r3, [r2, #0]
 8003892:	4b6d      	ldr	r3, [pc, #436]	@ (8003a48 <HAL_RCC_OscConfig+0x240>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a6c      	ldr	r2, [pc, #432]	@ (8003a48 <HAL_RCC_OscConfig+0x240>)
 8003898:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800389c:	6013      	str	r3, [r2, #0]
 800389e:	e00b      	b.n	80038b8 <HAL_RCC_OscConfig+0xb0>
 80038a0:	4b69      	ldr	r3, [pc, #420]	@ (8003a48 <HAL_RCC_OscConfig+0x240>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a68      	ldr	r2, [pc, #416]	@ (8003a48 <HAL_RCC_OscConfig+0x240>)
 80038a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038aa:	6013      	str	r3, [r2, #0]
 80038ac:	4b66      	ldr	r3, [pc, #408]	@ (8003a48 <HAL_RCC_OscConfig+0x240>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a65      	ldr	r2, [pc, #404]	@ (8003a48 <HAL_RCC_OscConfig+0x240>)
 80038b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80038b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d013      	beq.n	80038e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038c0:	f7fd ff2e 	bl	8001720 <HAL_GetTick>
 80038c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038c6:	e008      	b.n	80038da <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038c8:	f7fd ff2a 	bl	8001720 <HAL_GetTick>
 80038cc:	4602      	mov	r2, r0
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	1ad3      	subs	r3, r2, r3
 80038d2:	2b64      	cmp	r3, #100	@ 0x64
 80038d4:	d901      	bls.n	80038da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80038d6:	2303      	movs	r3, #3
 80038d8:	e207      	b.n	8003cea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038da:	4b5b      	ldr	r3, [pc, #364]	@ (8003a48 <HAL_RCC_OscConfig+0x240>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d0f0      	beq.n	80038c8 <HAL_RCC_OscConfig+0xc0>
 80038e6:	e014      	b.n	8003912 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038e8:	f7fd ff1a 	bl	8001720 <HAL_GetTick>
 80038ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038ee:	e008      	b.n	8003902 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038f0:	f7fd ff16 	bl	8001720 <HAL_GetTick>
 80038f4:	4602      	mov	r2, r0
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	1ad3      	subs	r3, r2, r3
 80038fa:	2b64      	cmp	r3, #100	@ 0x64
 80038fc:	d901      	bls.n	8003902 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80038fe:	2303      	movs	r3, #3
 8003900:	e1f3      	b.n	8003cea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003902:	4b51      	ldr	r3, [pc, #324]	@ (8003a48 <HAL_RCC_OscConfig+0x240>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800390a:	2b00      	cmp	r3, #0
 800390c:	d1f0      	bne.n	80038f0 <HAL_RCC_OscConfig+0xe8>
 800390e:	e000      	b.n	8003912 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003910:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 0302 	and.w	r3, r3, #2
 800391a:	2b00      	cmp	r3, #0
 800391c:	d063      	beq.n	80039e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800391e:	4b4a      	ldr	r3, [pc, #296]	@ (8003a48 <HAL_RCC_OscConfig+0x240>)
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	f003 030c 	and.w	r3, r3, #12
 8003926:	2b00      	cmp	r3, #0
 8003928:	d00b      	beq.n	8003942 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800392a:	4b47      	ldr	r3, [pc, #284]	@ (8003a48 <HAL_RCC_OscConfig+0x240>)
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003932:	2b08      	cmp	r3, #8
 8003934:	d11c      	bne.n	8003970 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003936:	4b44      	ldr	r3, [pc, #272]	@ (8003a48 <HAL_RCC_OscConfig+0x240>)
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d116      	bne.n	8003970 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003942:	4b41      	ldr	r3, [pc, #260]	@ (8003a48 <HAL_RCC_OscConfig+0x240>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 0302 	and.w	r3, r3, #2
 800394a:	2b00      	cmp	r3, #0
 800394c:	d005      	beq.n	800395a <HAL_RCC_OscConfig+0x152>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	68db      	ldr	r3, [r3, #12]
 8003952:	2b01      	cmp	r3, #1
 8003954:	d001      	beq.n	800395a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e1c7      	b.n	8003cea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800395a:	4b3b      	ldr	r3, [pc, #236]	@ (8003a48 <HAL_RCC_OscConfig+0x240>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	691b      	ldr	r3, [r3, #16]
 8003966:	00db      	lsls	r3, r3, #3
 8003968:	4937      	ldr	r1, [pc, #220]	@ (8003a48 <HAL_RCC_OscConfig+0x240>)
 800396a:	4313      	orrs	r3, r2
 800396c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800396e:	e03a      	b.n	80039e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d020      	beq.n	80039ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003978:	4b34      	ldr	r3, [pc, #208]	@ (8003a4c <HAL_RCC_OscConfig+0x244>)
 800397a:	2201      	movs	r2, #1
 800397c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800397e:	f7fd fecf 	bl	8001720 <HAL_GetTick>
 8003982:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003984:	e008      	b.n	8003998 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003986:	f7fd fecb 	bl	8001720 <HAL_GetTick>
 800398a:	4602      	mov	r2, r0
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	1ad3      	subs	r3, r2, r3
 8003990:	2b02      	cmp	r3, #2
 8003992:	d901      	bls.n	8003998 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003994:	2303      	movs	r3, #3
 8003996:	e1a8      	b.n	8003cea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003998:	4b2b      	ldr	r3, [pc, #172]	@ (8003a48 <HAL_RCC_OscConfig+0x240>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 0302 	and.w	r3, r3, #2
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d0f0      	beq.n	8003986 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039a4:	4b28      	ldr	r3, [pc, #160]	@ (8003a48 <HAL_RCC_OscConfig+0x240>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	691b      	ldr	r3, [r3, #16]
 80039b0:	00db      	lsls	r3, r3, #3
 80039b2:	4925      	ldr	r1, [pc, #148]	@ (8003a48 <HAL_RCC_OscConfig+0x240>)
 80039b4:	4313      	orrs	r3, r2
 80039b6:	600b      	str	r3, [r1, #0]
 80039b8:	e015      	b.n	80039e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039ba:	4b24      	ldr	r3, [pc, #144]	@ (8003a4c <HAL_RCC_OscConfig+0x244>)
 80039bc:	2200      	movs	r2, #0
 80039be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039c0:	f7fd feae 	bl	8001720 <HAL_GetTick>
 80039c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039c6:	e008      	b.n	80039da <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039c8:	f7fd feaa 	bl	8001720 <HAL_GetTick>
 80039cc:	4602      	mov	r2, r0
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	2b02      	cmp	r3, #2
 80039d4:	d901      	bls.n	80039da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80039d6:	2303      	movs	r3, #3
 80039d8:	e187      	b.n	8003cea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039da:	4b1b      	ldr	r3, [pc, #108]	@ (8003a48 <HAL_RCC_OscConfig+0x240>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 0302 	and.w	r3, r3, #2
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d1f0      	bne.n	80039c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 0308 	and.w	r3, r3, #8
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d036      	beq.n	8003a60 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	695b      	ldr	r3, [r3, #20]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d016      	beq.n	8003a28 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039fa:	4b15      	ldr	r3, [pc, #84]	@ (8003a50 <HAL_RCC_OscConfig+0x248>)
 80039fc:	2201      	movs	r2, #1
 80039fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a00:	f7fd fe8e 	bl	8001720 <HAL_GetTick>
 8003a04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a06:	e008      	b.n	8003a1a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a08:	f7fd fe8a 	bl	8001720 <HAL_GetTick>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	2b02      	cmp	r3, #2
 8003a14:	d901      	bls.n	8003a1a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	e167      	b.n	8003cea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a1a:	4b0b      	ldr	r3, [pc, #44]	@ (8003a48 <HAL_RCC_OscConfig+0x240>)
 8003a1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a1e:	f003 0302 	and.w	r3, r3, #2
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d0f0      	beq.n	8003a08 <HAL_RCC_OscConfig+0x200>
 8003a26:	e01b      	b.n	8003a60 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a28:	4b09      	ldr	r3, [pc, #36]	@ (8003a50 <HAL_RCC_OscConfig+0x248>)
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a2e:	f7fd fe77 	bl	8001720 <HAL_GetTick>
 8003a32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a34:	e00e      	b.n	8003a54 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a36:	f7fd fe73 	bl	8001720 <HAL_GetTick>
 8003a3a:	4602      	mov	r2, r0
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	1ad3      	subs	r3, r2, r3
 8003a40:	2b02      	cmp	r3, #2
 8003a42:	d907      	bls.n	8003a54 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003a44:	2303      	movs	r3, #3
 8003a46:	e150      	b.n	8003cea <HAL_RCC_OscConfig+0x4e2>
 8003a48:	40023800 	.word	0x40023800
 8003a4c:	42470000 	.word	0x42470000
 8003a50:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a54:	4b88      	ldr	r3, [pc, #544]	@ (8003c78 <HAL_RCC_OscConfig+0x470>)
 8003a56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a58:	f003 0302 	and.w	r3, r3, #2
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d1ea      	bne.n	8003a36 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 0304 	and.w	r3, r3, #4
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	f000 8097 	beq.w	8003b9c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a72:	4b81      	ldr	r3, [pc, #516]	@ (8003c78 <HAL_RCC_OscConfig+0x470>)
 8003a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d10f      	bne.n	8003a9e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a7e:	2300      	movs	r3, #0
 8003a80:	60bb      	str	r3, [r7, #8]
 8003a82:	4b7d      	ldr	r3, [pc, #500]	@ (8003c78 <HAL_RCC_OscConfig+0x470>)
 8003a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a86:	4a7c      	ldr	r2, [pc, #496]	@ (8003c78 <HAL_RCC_OscConfig+0x470>)
 8003a88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a8e:	4b7a      	ldr	r3, [pc, #488]	@ (8003c78 <HAL_RCC_OscConfig+0x470>)
 8003a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a96:	60bb      	str	r3, [r7, #8]
 8003a98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a9e:	4b77      	ldr	r3, [pc, #476]	@ (8003c7c <HAL_RCC_OscConfig+0x474>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d118      	bne.n	8003adc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003aaa:	4b74      	ldr	r3, [pc, #464]	@ (8003c7c <HAL_RCC_OscConfig+0x474>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a73      	ldr	r2, [pc, #460]	@ (8003c7c <HAL_RCC_OscConfig+0x474>)
 8003ab0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ab4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ab6:	f7fd fe33 	bl	8001720 <HAL_GetTick>
 8003aba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003abc:	e008      	b.n	8003ad0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003abe:	f7fd fe2f 	bl	8001720 <HAL_GetTick>
 8003ac2:	4602      	mov	r2, r0
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	1ad3      	subs	r3, r2, r3
 8003ac8:	2b02      	cmp	r3, #2
 8003aca:	d901      	bls.n	8003ad0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003acc:	2303      	movs	r3, #3
 8003ace:	e10c      	b.n	8003cea <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ad0:	4b6a      	ldr	r3, [pc, #424]	@ (8003c7c <HAL_RCC_OscConfig+0x474>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d0f0      	beq.n	8003abe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d106      	bne.n	8003af2 <HAL_RCC_OscConfig+0x2ea>
 8003ae4:	4b64      	ldr	r3, [pc, #400]	@ (8003c78 <HAL_RCC_OscConfig+0x470>)
 8003ae6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ae8:	4a63      	ldr	r2, [pc, #396]	@ (8003c78 <HAL_RCC_OscConfig+0x470>)
 8003aea:	f043 0301 	orr.w	r3, r3, #1
 8003aee:	6713      	str	r3, [r2, #112]	@ 0x70
 8003af0:	e01c      	b.n	8003b2c <HAL_RCC_OscConfig+0x324>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	2b05      	cmp	r3, #5
 8003af8:	d10c      	bne.n	8003b14 <HAL_RCC_OscConfig+0x30c>
 8003afa:	4b5f      	ldr	r3, [pc, #380]	@ (8003c78 <HAL_RCC_OscConfig+0x470>)
 8003afc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003afe:	4a5e      	ldr	r2, [pc, #376]	@ (8003c78 <HAL_RCC_OscConfig+0x470>)
 8003b00:	f043 0304 	orr.w	r3, r3, #4
 8003b04:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b06:	4b5c      	ldr	r3, [pc, #368]	@ (8003c78 <HAL_RCC_OscConfig+0x470>)
 8003b08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b0a:	4a5b      	ldr	r2, [pc, #364]	@ (8003c78 <HAL_RCC_OscConfig+0x470>)
 8003b0c:	f043 0301 	orr.w	r3, r3, #1
 8003b10:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b12:	e00b      	b.n	8003b2c <HAL_RCC_OscConfig+0x324>
 8003b14:	4b58      	ldr	r3, [pc, #352]	@ (8003c78 <HAL_RCC_OscConfig+0x470>)
 8003b16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b18:	4a57      	ldr	r2, [pc, #348]	@ (8003c78 <HAL_RCC_OscConfig+0x470>)
 8003b1a:	f023 0301 	bic.w	r3, r3, #1
 8003b1e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b20:	4b55      	ldr	r3, [pc, #340]	@ (8003c78 <HAL_RCC_OscConfig+0x470>)
 8003b22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b24:	4a54      	ldr	r2, [pc, #336]	@ (8003c78 <HAL_RCC_OscConfig+0x470>)
 8003b26:	f023 0304 	bic.w	r3, r3, #4
 8003b2a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d015      	beq.n	8003b60 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b34:	f7fd fdf4 	bl	8001720 <HAL_GetTick>
 8003b38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b3a:	e00a      	b.n	8003b52 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b3c:	f7fd fdf0 	bl	8001720 <HAL_GetTick>
 8003b40:	4602      	mov	r2, r0
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	1ad3      	subs	r3, r2, r3
 8003b46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d901      	bls.n	8003b52 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003b4e:	2303      	movs	r3, #3
 8003b50:	e0cb      	b.n	8003cea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b52:	4b49      	ldr	r3, [pc, #292]	@ (8003c78 <HAL_RCC_OscConfig+0x470>)
 8003b54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b56:	f003 0302 	and.w	r3, r3, #2
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d0ee      	beq.n	8003b3c <HAL_RCC_OscConfig+0x334>
 8003b5e:	e014      	b.n	8003b8a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b60:	f7fd fdde 	bl	8001720 <HAL_GetTick>
 8003b64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b66:	e00a      	b.n	8003b7e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b68:	f7fd fdda 	bl	8001720 <HAL_GetTick>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d901      	bls.n	8003b7e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	e0b5      	b.n	8003cea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b7e:	4b3e      	ldr	r3, [pc, #248]	@ (8003c78 <HAL_RCC_OscConfig+0x470>)
 8003b80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b82:	f003 0302 	and.w	r3, r3, #2
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d1ee      	bne.n	8003b68 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003b8a:	7dfb      	ldrb	r3, [r7, #23]
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d105      	bne.n	8003b9c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b90:	4b39      	ldr	r3, [pc, #228]	@ (8003c78 <HAL_RCC_OscConfig+0x470>)
 8003b92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b94:	4a38      	ldr	r2, [pc, #224]	@ (8003c78 <HAL_RCC_OscConfig+0x470>)
 8003b96:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b9a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	699b      	ldr	r3, [r3, #24]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	f000 80a1 	beq.w	8003ce8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ba6:	4b34      	ldr	r3, [pc, #208]	@ (8003c78 <HAL_RCC_OscConfig+0x470>)
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	f003 030c 	and.w	r3, r3, #12
 8003bae:	2b08      	cmp	r3, #8
 8003bb0:	d05c      	beq.n	8003c6c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	699b      	ldr	r3, [r3, #24]
 8003bb6:	2b02      	cmp	r3, #2
 8003bb8:	d141      	bne.n	8003c3e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bba:	4b31      	ldr	r3, [pc, #196]	@ (8003c80 <HAL_RCC_OscConfig+0x478>)
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bc0:	f7fd fdae 	bl	8001720 <HAL_GetTick>
 8003bc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bc6:	e008      	b.n	8003bda <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bc8:	f7fd fdaa 	bl	8001720 <HAL_GetTick>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	1ad3      	subs	r3, r2, r3
 8003bd2:	2b02      	cmp	r3, #2
 8003bd4:	d901      	bls.n	8003bda <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003bd6:	2303      	movs	r3, #3
 8003bd8:	e087      	b.n	8003cea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bda:	4b27      	ldr	r3, [pc, #156]	@ (8003c78 <HAL_RCC_OscConfig+0x470>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d1f0      	bne.n	8003bc8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	69da      	ldr	r2, [r3, #28]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6a1b      	ldr	r3, [r3, #32]
 8003bee:	431a      	orrs	r2, r3
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bf4:	019b      	lsls	r3, r3, #6
 8003bf6:	431a      	orrs	r2, r3
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bfc:	085b      	lsrs	r3, r3, #1
 8003bfe:	3b01      	subs	r3, #1
 8003c00:	041b      	lsls	r3, r3, #16
 8003c02:	431a      	orrs	r2, r3
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c08:	061b      	lsls	r3, r3, #24
 8003c0a:	491b      	ldr	r1, [pc, #108]	@ (8003c78 <HAL_RCC_OscConfig+0x470>)
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c10:	4b1b      	ldr	r3, [pc, #108]	@ (8003c80 <HAL_RCC_OscConfig+0x478>)
 8003c12:	2201      	movs	r2, #1
 8003c14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c16:	f7fd fd83 	bl	8001720 <HAL_GetTick>
 8003c1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c1c:	e008      	b.n	8003c30 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c1e:	f7fd fd7f 	bl	8001720 <HAL_GetTick>
 8003c22:	4602      	mov	r2, r0
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	1ad3      	subs	r3, r2, r3
 8003c28:	2b02      	cmp	r3, #2
 8003c2a:	d901      	bls.n	8003c30 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003c2c:	2303      	movs	r3, #3
 8003c2e:	e05c      	b.n	8003cea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c30:	4b11      	ldr	r3, [pc, #68]	@ (8003c78 <HAL_RCC_OscConfig+0x470>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d0f0      	beq.n	8003c1e <HAL_RCC_OscConfig+0x416>
 8003c3c:	e054      	b.n	8003ce8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c3e:	4b10      	ldr	r3, [pc, #64]	@ (8003c80 <HAL_RCC_OscConfig+0x478>)
 8003c40:	2200      	movs	r2, #0
 8003c42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c44:	f7fd fd6c 	bl	8001720 <HAL_GetTick>
 8003c48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c4a:	e008      	b.n	8003c5e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c4c:	f7fd fd68 	bl	8001720 <HAL_GetTick>
 8003c50:	4602      	mov	r2, r0
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	1ad3      	subs	r3, r2, r3
 8003c56:	2b02      	cmp	r3, #2
 8003c58:	d901      	bls.n	8003c5e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003c5a:	2303      	movs	r3, #3
 8003c5c:	e045      	b.n	8003cea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c5e:	4b06      	ldr	r3, [pc, #24]	@ (8003c78 <HAL_RCC_OscConfig+0x470>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d1f0      	bne.n	8003c4c <HAL_RCC_OscConfig+0x444>
 8003c6a:	e03d      	b.n	8003ce8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	699b      	ldr	r3, [r3, #24]
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d107      	bne.n	8003c84 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	e038      	b.n	8003cea <HAL_RCC_OscConfig+0x4e2>
 8003c78:	40023800 	.word	0x40023800
 8003c7c:	40007000 	.word	0x40007000
 8003c80:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003c84:	4b1b      	ldr	r3, [pc, #108]	@ (8003cf4 <HAL_RCC_OscConfig+0x4ec>)
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	699b      	ldr	r3, [r3, #24]
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d028      	beq.n	8003ce4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d121      	bne.n	8003ce4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003caa:	429a      	cmp	r2, r3
 8003cac:	d11a      	bne.n	8003ce4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003cae:	68fa      	ldr	r2, [r7, #12]
 8003cb0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	687a      	ldr	r2, [r7, #4]
 8003cb8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003cba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d111      	bne.n	8003ce4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cca:	085b      	lsrs	r3, r3, #1
 8003ccc:	3b01      	subs	r3, #1
 8003cce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d107      	bne.n	8003ce4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cde:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d001      	beq.n	8003ce8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	e000      	b.n	8003cea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003ce8:	2300      	movs	r3, #0
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3718      	adds	r7, #24
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	40023800 	.word	0x40023800

08003cf8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b084      	sub	sp, #16
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
 8003d00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d101      	bne.n	8003d0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	e0cc      	b.n	8003ea6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d0c:	4b68      	ldr	r3, [pc, #416]	@ (8003eb0 <HAL_RCC_ClockConfig+0x1b8>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 030f 	and.w	r3, r3, #15
 8003d14:	683a      	ldr	r2, [r7, #0]
 8003d16:	429a      	cmp	r2, r3
 8003d18:	d90c      	bls.n	8003d34 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d1a:	4b65      	ldr	r3, [pc, #404]	@ (8003eb0 <HAL_RCC_ClockConfig+0x1b8>)
 8003d1c:	683a      	ldr	r2, [r7, #0]
 8003d1e:	b2d2      	uxtb	r2, r2
 8003d20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d22:	4b63      	ldr	r3, [pc, #396]	@ (8003eb0 <HAL_RCC_ClockConfig+0x1b8>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 030f 	and.w	r3, r3, #15
 8003d2a:	683a      	ldr	r2, [r7, #0]
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d001      	beq.n	8003d34 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	e0b8      	b.n	8003ea6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 0302 	and.w	r3, r3, #2
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d020      	beq.n	8003d82 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f003 0304 	and.w	r3, r3, #4
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d005      	beq.n	8003d58 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d4c:	4b59      	ldr	r3, [pc, #356]	@ (8003eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	4a58      	ldr	r2, [pc, #352]	@ (8003eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d52:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003d56:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 0308 	and.w	r3, r3, #8
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d005      	beq.n	8003d70 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d64:	4b53      	ldr	r3, [pc, #332]	@ (8003eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	4a52      	ldr	r2, [pc, #328]	@ (8003eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d6a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003d6e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d70:	4b50      	ldr	r3, [pc, #320]	@ (8003eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	494d      	ldr	r1, [pc, #308]	@ (8003eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 0301 	and.w	r3, r3, #1
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d044      	beq.n	8003e18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	d107      	bne.n	8003da6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d96:	4b47      	ldr	r3, [pc, #284]	@ (8003eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d119      	bne.n	8003dd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	e07f      	b.n	8003ea6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	2b02      	cmp	r3, #2
 8003dac:	d003      	beq.n	8003db6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003db2:	2b03      	cmp	r3, #3
 8003db4:	d107      	bne.n	8003dc6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003db6:	4b3f      	ldr	r3, [pc, #252]	@ (8003eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d109      	bne.n	8003dd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e06f      	b.n	8003ea6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dc6:	4b3b      	ldr	r3, [pc, #236]	@ (8003eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f003 0302 	and.w	r3, r3, #2
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d101      	bne.n	8003dd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e067      	b.n	8003ea6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003dd6:	4b37      	ldr	r3, [pc, #220]	@ (8003eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	f023 0203 	bic.w	r2, r3, #3
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	4934      	ldr	r1, [pc, #208]	@ (8003eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003de4:	4313      	orrs	r3, r2
 8003de6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003de8:	f7fd fc9a 	bl	8001720 <HAL_GetTick>
 8003dec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dee:	e00a      	b.n	8003e06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003df0:	f7fd fc96 	bl	8001720 <HAL_GetTick>
 8003df4:	4602      	mov	r2, r0
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	1ad3      	subs	r3, r2, r3
 8003dfa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d901      	bls.n	8003e06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e02:	2303      	movs	r3, #3
 8003e04:	e04f      	b.n	8003ea6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e06:	4b2b      	ldr	r3, [pc, #172]	@ (8003eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	f003 020c 	and.w	r2, r3, #12
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	009b      	lsls	r3, r3, #2
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d1eb      	bne.n	8003df0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e18:	4b25      	ldr	r3, [pc, #148]	@ (8003eb0 <HAL_RCC_ClockConfig+0x1b8>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 030f 	and.w	r3, r3, #15
 8003e20:	683a      	ldr	r2, [r7, #0]
 8003e22:	429a      	cmp	r2, r3
 8003e24:	d20c      	bcs.n	8003e40 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e26:	4b22      	ldr	r3, [pc, #136]	@ (8003eb0 <HAL_RCC_ClockConfig+0x1b8>)
 8003e28:	683a      	ldr	r2, [r7, #0]
 8003e2a:	b2d2      	uxtb	r2, r2
 8003e2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e2e:	4b20      	ldr	r3, [pc, #128]	@ (8003eb0 <HAL_RCC_ClockConfig+0x1b8>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 030f 	and.w	r3, r3, #15
 8003e36:	683a      	ldr	r2, [r7, #0]
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d001      	beq.n	8003e40 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e032      	b.n	8003ea6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 0304 	and.w	r3, r3, #4
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d008      	beq.n	8003e5e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e4c:	4b19      	ldr	r3, [pc, #100]	@ (8003eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	68db      	ldr	r3, [r3, #12]
 8003e58:	4916      	ldr	r1, [pc, #88]	@ (8003eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 0308 	and.w	r3, r3, #8
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d009      	beq.n	8003e7e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e6a:	4b12      	ldr	r3, [pc, #72]	@ (8003eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	691b      	ldr	r3, [r3, #16]
 8003e76:	00db      	lsls	r3, r3, #3
 8003e78:	490e      	ldr	r1, [pc, #56]	@ (8003eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003e7e:	f000 f821 	bl	8003ec4 <HAL_RCC_GetSysClockFreq>
 8003e82:	4602      	mov	r2, r0
 8003e84:	4b0b      	ldr	r3, [pc, #44]	@ (8003eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	091b      	lsrs	r3, r3, #4
 8003e8a:	f003 030f 	and.w	r3, r3, #15
 8003e8e:	490a      	ldr	r1, [pc, #40]	@ (8003eb8 <HAL_RCC_ClockConfig+0x1c0>)
 8003e90:	5ccb      	ldrb	r3, [r1, r3]
 8003e92:	fa22 f303 	lsr.w	r3, r2, r3
 8003e96:	4a09      	ldr	r2, [pc, #36]	@ (8003ebc <HAL_RCC_ClockConfig+0x1c4>)
 8003e98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003e9a:	4b09      	ldr	r3, [pc, #36]	@ (8003ec0 <HAL_RCC_ClockConfig+0x1c8>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f7fd fbfa 	bl	8001698 <HAL_InitTick>

  return HAL_OK;
 8003ea4:	2300      	movs	r3, #0
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3710      	adds	r7, #16
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}
 8003eae:	bf00      	nop
 8003eb0:	40023c00 	.word	0x40023c00
 8003eb4:	40023800 	.word	0x40023800
 8003eb8:	08005f3c 	.word	0x08005f3c
 8003ebc:	20000010 	.word	0x20000010
 8003ec0:	20000014 	.word	0x20000014

08003ec4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ec4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ec8:	b094      	sub	sp, #80	@ 0x50
 8003eca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003edc:	4b79      	ldr	r3, [pc, #484]	@ (80040c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	f003 030c 	and.w	r3, r3, #12
 8003ee4:	2b08      	cmp	r3, #8
 8003ee6:	d00d      	beq.n	8003f04 <HAL_RCC_GetSysClockFreq+0x40>
 8003ee8:	2b08      	cmp	r3, #8
 8003eea:	f200 80e1 	bhi.w	80040b0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d002      	beq.n	8003ef8 <HAL_RCC_GetSysClockFreq+0x34>
 8003ef2:	2b04      	cmp	r3, #4
 8003ef4:	d003      	beq.n	8003efe <HAL_RCC_GetSysClockFreq+0x3a>
 8003ef6:	e0db      	b.n	80040b0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ef8:	4b73      	ldr	r3, [pc, #460]	@ (80040c8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003efa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003efc:	e0db      	b.n	80040b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003efe:	4b73      	ldr	r3, [pc, #460]	@ (80040cc <HAL_RCC_GetSysClockFreq+0x208>)
 8003f00:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003f02:	e0d8      	b.n	80040b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f04:	4b6f      	ldr	r3, [pc, #444]	@ (80040c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003f0c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f0e:	4b6d      	ldr	r3, [pc, #436]	@ (80040c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d063      	beq.n	8003fe2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f1a:	4b6a      	ldr	r3, [pc, #424]	@ (80040c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	099b      	lsrs	r3, r3, #6
 8003f20:	2200      	movs	r2, #0
 8003f22:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003f24:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003f26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f2c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003f2e:	2300      	movs	r3, #0
 8003f30:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f32:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003f36:	4622      	mov	r2, r4
 8003f38:	462b      	mov	r3, r5
 8003f3a:	f04f 0000 	mov.w	r0, #0
 8003f3e:	f04f 0100 	mov.w	r1, #0
 8003f42:	0159      	lsls	r1, r3, #5
 8003f44:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f48:	0150      	lsls	r0, r2, #5
 8003f4a:	4602      	mov	r2, r0
 8003f4c:	460b      	mov	r3, r1
 8003f4e:	4621      	mov	r1, r4
 8003f50:	1a51      	subs	r1, r2, r1
 8003f52:	6139      	str	r1, [r7, #16]
 8003f54:	4629      	mov	r1, r5
 8003f56:	eb63 0301 	sbc.w	r3, r3, r1
 8003f5a:	617b      	str	r3, [r7, #20]
 8003f5c:	f04f 0200 	mov.w	r2, #0
 8003f60:	f04f 0300 	mov.w	r3, #0
 8003f64:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003f68:	4659      	mov	r1, fp
 8003f6a:	018b      	lsls	r3, r1, #6
 8003f6c:	4651      	mov	r1, sl
 8003f6e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f72:	4651      	mov	r1, sl
 8003f74:	018a      	lsls	r2, r1, #6
 8003f76:	4651      	mov	r1, sl
 8003f78:	ebb2 0801 	subs.w	r8, r2, r1
 8003f7c:	4659      	mov	r1, fp
 8003f7e:	eb63 0901 	sbc.w	r9, r3, r1
 8003f82:	f04f 0200 	mov.w	r2, #0
 8003f86:	f04f 0300 	mov.w	r3, #0
 8003f8a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f8e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f92:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f96:	4690      	mov	r8, r2
 8003f98:	4699      	mov	r9, r3
 8003f9a:	4623      	mov	r3, r4
 8003f9c:	eb18 0303 	adds.w	r3, r8, r3
 8003fa0:	60bb      	str	r3, [r7, #8]
 8003fa2:	462b      	mov	r3, r5
 8003fa4:	eb49 0303 	adc.w	r3, r9, r3
 8003fa8:	60fb      	str	r3, [r7, #12]
 8003faa:	f04f 0200 	mov.w	r2, #0
 8003fae:	f04f 0300 	mov.w	r3, #0
 8003fb2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003fb6:	4629      	mov	r1, r5
 8003fb8:	024b      	lsls	r3, r1, #9
 8003fba:	4621      	mov	r1, r4
 8003fbc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003fc0:	4621      	mov	r1, r4
 8003fc2:	024a      	lsls	r2, r1, #9
 8003fc4:	4610      	mov	r0, r2
 8003fc6:	4619      	mov	r1, r3
 8003fc8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003fca:	2200      	movs	r2, #0
 8003fcc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003fce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003fd0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003fd4:	f7fc f95c 	bl	8000290 <__aeabi_uldivmod>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	460b      	mov	r3, r1
 8003fdc:	4613      	mov	r3, r2
 8003fde:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003fe0:	e058      	b.n	8004094 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fe2:	4b38      	ldr	r3, [pc, #224]	@ (80040c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	099b      	lsrs	r3, r3, #6
 8003fe8:	2200      	movs	r2, #0
 8003fea:	4618      	mov	r0, r3
 8003fec:	4611      	mov	r1, r2
 8003fee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003ff2:	623b      	str	r3, [r7, #32]
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ff8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003ffc:	4642      	mov	r2, r8
 8003ffe:	464b      	mov	r3, r9
 8004000:	f04f 0000 	mov.w	r0, #0
 8004004:	f04f 0100 	mov.w	r1, #0
 8004008:	0159      	lsls	r1, r3, #5
 800400a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800400e:	0150      	lsls	r0, r2, #5
 8004010:	4602      	mov	r2, r0
 8004012:	460b      	mov	r3, r1
 8004014:	4641      	mov	r1, r8
 8004016:	ebb2 0a01 	subs.w	sl, r2, r1
 800401a:	4649      	mov	r1, r9
 800401c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004020:	f04f 0200 	mov.w	r2, #0
 8004024:	f04f 0300 	mov.w	r3, #0
 8004028:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800402c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004030:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004034:	ebb2 040a 	subs.w	r4, r2, sl
 8004038:	eb63 050b 	sbc.w	r5, r3, fp
 800403c:	f04f 0200 	mov.w	r2, #0
 8004040:	f04f 0300 	mov.w	r3, #0
 8004044:	00eb      	lsls	r3, r5, #3
 8004046:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800404a:	00e2      	lsls	r2, r4, #3
 800404c:	4614      	mov	r4, r2
 800404e:	461d      	mov	r5, r3
 8004050:	4643      	mov	r3, r8
 8004052:	18e3      	adds	r3, r4, r3
 8004054:	603b      	str	r3, [r7, #0]
 8004056:	464b      	mov	r3, r9
 8004058:	eb45 0303 	adc.w	r3, r5, r3
 800405c:	607b      	str	r3, [r7, #4]
 800405e:	f04f 0200 	mov.w	r2, #0
 8004062:	f04f 0300 	mov.w	r3, #0
 8004066:	e9d7 4500 	ldrd	r4, r5, [r7]
 800406a:	4629      	mov	r1, r5
 800406c:	028b      	lsls	r3, r1, #10
 800406e:	4621      	mov	r1, r4
 8004070:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004074:	4621      	mov	r1, r4
 8004076:	028a      	lsls	r2, r1, #10
 8004078:	4610      	mov	r0, r2
 800407a:	4619      	mov	r1, r3
 800407c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800407e:	2200      	movs	r2, #0
 8004080:	61bb      	str	r3, [r7, #24]
 8004082:	61fa      	str	r2, [r7, #28]
 8004084:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004088:	f7fc f902 	bl	8000290 <__aeabi_uldivmod>
 800408c:	4602      	mov	r2, r0
 800408e:	460b      	mov	r3, r1
 8004090:	4613      	mov	r3, r2
 8004092:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004094:	4b0b      	ldr	r3, [pc, #44]	@ (80040c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	0c1b      	lsrs	r3, r3, #16
 800409a:	f003 0303 	and.w	r3, r3, #3
 800409e:	3301      	adds	r3, #1
 80040a0:	005b      	lsls	r3, r3, #1
 80040a2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80040a4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80040a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80040a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80040ac:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80040ae:	e002      	b.n	80040b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80040b0:	4b05      	ldr	r3, [pc, #20]	@ (80040c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80040b2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80040b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	3750      	adds	r7, #80	@ 0x50
 80040bc:	46bd      	mov	sp, r7
 80040be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040c2:	bf00      	nop
 80040c4:	40023800 	.word	0x40023800
 80040c8:	00f42400 	.word	0x00f42400
 80040cc:	007a1200 	.word	0x007a1200

080040d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040d0:	b480      	push	{r7}
 80040d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040d4:	4b03      	ldr	r3, [pc, #12]	@ (80040e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80040d6:	681b      	ldr	r3, [r3, #0]
}
 80040d8:	4618      	mov	r0, r3
 80040da:	46bd      	mov	sp, r7
 80040dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e0:	4770      	bx	lr
 80040e2:	bf00      	nop
 80040e4:	20000010 	.word	0x20000010

080040e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80040ec:	f7ff fff0 	bl	80040d0 <HAL_RCC_GetHCLKFreq>
 80040f0:	4602      	mov	r2, r0
 80040f2:	4b05      	ldr	r3, [pc, #20]	@ (8004108 <HAL_RCC_GetPCLK1Freq+0x20>)
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	0a9b      	lsrs	r3, r3, #10
 80040f8:	f003 0307 	and.w	r3, r3, #7
 80040fc:	4903      	ldr	r1, [pc, #12]	@ (800410c <HAL_RCC_GetPCLK1Freq+0x24>)
 80040fe:	5ccb      	ldrb	r3, [r1, r3]
 8004100:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004104:	4618      	mov	r0, r3
 8004106:	bd80      	pop	{r7, pc}
 8004108:	40023800 	.word	0x40023800
 800410c:	08005f4c 	.word	0x08005f4c

08004110 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004114:	f7ff ffdc 	bl	80040d0 <HAL_RCC_GetHCLKFreq>
 8004118:	4602      	mov	r2, r0
 800411a:	4b05      	ldr	r3, [pc, #20]	@ (8004130 <HAL_RCC_GetPCLK2Freq+0x20>)
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	0b5b      	lsrs	r3, r3, #13
 8004120:	f003 0307 	and.w	r3, r3, #7
 8004124:	4903      	ldr	r1, [pc, #12]	@ (8004134 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004126:	5ccb      	ldrb	r3, [r1, r3]
 8004128:	fa22 f303 	lsr.w	r3, r2, r3
}
 800412c:	4618      	mov	r0, r3
 800412e:	bd80      	pop	{r7, pc}
 8004130:	40023800 	.word	0x40023800
 8004134:	08005f4c 	.word	0x08005f4c

08004138 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b082      	sub	sp, #8
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d101      	bne.n	800414a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e041      	b.n	80041ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004150:	b2db      	uxtb	r3, r3
 8004152:	2b00      	cmp	r3, #0
 8004154:	d106      	bne.n	8004164 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2200      	movs	r2, #0
 800415a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f7fd f8fc 	bl	800135c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2202      	movs	r2, #2
 8004168:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	3304      	adds	r3, #4
 8004174:	4619      	mov	r1, r3
 8004176:	4610      	mov	r0, r2
 8004178:	f000 fa7e 	bl	8004678 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2201      	movs	r2, #1
 8004180:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2201      	movs	r2, #1
 8004188:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2201      	movs	r2, #1
 8004190:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2201      	movs	r2, #1
 8004198:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2201      	movs	r2, #1
 80041a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2201      	movs	r2, #1
 80041a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2201      	movs	r2, #1
 80041b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2201      	movs	r2, #1
 80041b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2201      	movs	r2, #1
 80041c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2201      	movs	r2, #1
 80041c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80041cc:	2300      	movs	r3, #0
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3708      	adds	r7, #8
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}
	...

080041d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80041d8:	b480      	push	{r7}
 80041da:	b085      	sub	sp, #20
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041e6:	b2db      	uxtb	r3, r3
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d001      	beq.n	80041f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	e04e      	b.n	800428e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2202      	movs	r2, #2
 80041f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	68da      	ldr	r2, [r3, #12]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f042 0201 	orr.w	r2, r2, #1
 8004206:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a23      	ldr	r2, [pc, #140]	@ (800429c <HAL_TIM_Base_Start_IT+0xc4>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d022      	beq.n	8004258 <HAL_TIM_Base_Start_IT+0x80>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800421a:	d01d      	beq.n	8004258 <HAL_TIM_Base_Start_IT+0x80>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a1f      	ldr	r2, [pc, #124]	@ (80042a0 <HAL_TIM_Base_Start_IT+0xc8>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d018      	beq.n	8004258 <HAL_TIM_Base_Start_IT+0x80>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a1e      	ldr	r2, [pc, #120]	@ (80042a4 <HAL_TIM_Base_Start_IT+0xcc>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d013      	beq.n	8004258 <HAL_TIM_Base_Start_IT+0x80>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a1c      	ldr	r2, [pc, #112]	@ (80042a8 <HAL_TIM_Base_Start_IT+0xd0>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d00e      	beq.n	8004258 <HAL_TIM_Base_Start_IT+0x80>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a1b      	ldr	r2, [pc, #108]	@ (80042ac <HAL_TIM_Base_Start_IT+0xd4>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d009      	beq.n	8004258 <HAL_TIM_Base_Start_IT+0x80>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a19      	ldr	r2, [pc, #100]	@ (80042b0 <HAL_TIM_Base_Start_IT+0xd8>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d004      	beq.n	8004258 <HAL_TIM_Base_Start_IT+0x80>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a18      	ldr	r2, [pc, #96]	@ (80042b4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d111      	bne.n	800427c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	f003 0307 	and.w	r3, r3, #7
 8004262:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2b06      	cmp	r3, #6
 8004268:	d010      	beq.n	800428c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f042 0201 	orr.w	r2, r2, #1
 8004278:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800427a:	e007      	b.n	800428c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f042 0201 	orr.w	r2, r2, #1
 800428a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800428c:	2300      	movs	r3, #0
}
 800428e:	4618      	mov	r0, r3
 8004290:	3714      	adds	r7, #20
 8004292:	46bd      	mov	sp, r7
 8004294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004298:	4770      	bx	lr
 800429a:	bf00      	nop
 800429c:	40010000 	.word	0x40010000
 80042a0:	40000400 	.word	0x40000400
 80042a4:	40000800 	.word	0x40000800
 80042a8:	40000c00 	.word	0x40000c00
 80042ac:	40010400 	.word	0x40010400
 80042b0:	40014000 	.word	0x40014000
 80042b4:	40001800 	.word	0x40001800

080042b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b084      	sub	sp, #16
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	68db      	ldr	r3, [r3, #12]
 80042c6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	691b      	ldr	r3, [r3, #16]
 80042ce:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	f003 0302 	and.w	r3, r3, #2
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d020      	beq.n	800431c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	f003 0302 	and.w	r3, r3, #2
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d01b      	beq.n	800431c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f06f 0202 	mvn.w	r2, #2
 80042ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2201      	movs	r2, #1
 80042f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	699b      	ldr	r3, [r3, #24]
 80042fa:	f003 0303 	and.w	r3, r3, #3
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d003      	beq.n	800430a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f000 f999 	bl	800463a <HAL_TIM_IC_CaptureCallback>
 8004308:	e005      	b.n	8004316 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f000 f98b 	bl	8004626 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	f000 f99c 	bl	800464e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2200      	movs	r2, #0
 800431a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	f003 0304 	and.w	r3, r3, #4
 8004322:	2b00      	cmp	r3, #0
 8004324:	d020      	beq.n	8004368 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	f003 0304 	and.w	r3, r3, #4
 800432c:	2b00      	cmp	r3, #0
 800432e:	d01b      	beq.n	8004368 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f06f 0204 	mvn.w	r2, #4
 8004338:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2202      	movs	r2, #2
 800433e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	699b      	ldr	r3, [r3, #24]
 8004346:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800434a:	2b00      	cmp	r3, #0
 800434c:	d003      	beq.n	8004356 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f000 f973 	bl	800463a <HAL_TIM_IC_CaptureCallback>
 8004354:	e005      	b.n	8004362 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f000 f965 	bl	8004626 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	f000 f976 	bl	800464e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2200      	movs	r2, #0
 8004366:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	f003 0308 	and.w	r3, r3, #8
 800436e:	2b00      	cmp	r3, #0
 8004370:	d020      	beq.n	80043b4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	f003 0308 	and.w	r3, r3, #8
 8004378:	2b00      	cmp	r3, #0
 800437a:	d01b      	beq.n	80043b4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f06f 0208 	mvn.w	r2, #8
 8004384:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2204      	movs	r2, #4
 800438a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	69db      	ldr	r3, [r3, #28]
 8004392:	f003 0303 	and.w	r3, r3, #3
 8004396:	2b00      	cmp	r3, #0
 8004398:	d003      	beq.n	80043a2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f000 f94d 	bl	800463a <HAL_TIM_IC_CaptureCallback>
 80043a0:	e005      	b.n	80043ae <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f000 f93f 	bl	8004626 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043a8:	6878      	ldr	r0, [r7, #4]
 80043aa:	f000 f950 	bl	800464e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2200      	movs	r2, #0
 80043b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	f003 0310 	and.w	r3, r3, #16
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d020      	beq.n	8004400 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	f003 0310 	and.w	r3, r3, #16
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d01b      	beq.n	8004400 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f06f 0210 	mvn.w	r2, #16
 80043d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2208      	movs	r2, #8
 80043d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	69db      	ldr	r3, [r3, #28]
 80043de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d003      	beq.n	80043ee <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f000 f927 	bl	800463a <HAL_TIM_IC_CaptureCallback>
 80043ec:	e005      	b.n	80043fa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f000 f919 	bl	8004626 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	f000 f92a 	bl	800464e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2200      	movs	r2, #0
 80043fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	f003 0301 	and.w	r3, r3, #1
 8004406:	2b00      	cmp	r3, #0
 8004408:	d00c      	beq.n	8004424 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	f003 0301 	and.w	r3, r3, #1
 8004410:	2b00      	cmp	r3, #0
 8004412:	d007      	beq.n	8004424 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f06f 0201 	mvn.w	r2, #1
 800441c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f7fc fe0c 	bl	800103c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800442a:	2b00      	cmp	r3, #0
 800442c:	d00c      	beq.n	8004448 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004434:	2b00      	cmp	r3, #0
 8004436:	d007      	beq.n	8004448 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004440:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f000 fae4 	bl	8004a10 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800444e:	2b00      	cmp	r3, #0
 8004450:	d00c      	beq.n	800446c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004458:	2b00      	cmp	r3, #0
 800445a:	d007      	beq.n	800446c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004464:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f000 f8fb 	bl	8004662 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	f003 0320 	and.w	r3, r3, #32
 8004472:	2b00      	cmp	r3, #0
 8004474:	d00c      	beq.n	8004490 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	f003 0320 	and.w	r3, r3, #32
 800447c:	2b00      	cmp	r3, #0
 800447e:	d007      	beq.n	8004490 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f06f 0220 	mvn.w	r2, #32
 8004488:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f000 fab6 	bl	80049fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004490:	bf00      	nop
 8004492:	3710      	adds	r7, #16
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}

08004498 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b084      	sub	sp, #16
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
 80044a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80044a2:	2300      	movs	r3, #0
 80044a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d101      	bne.n	80044b4 <HAL_TIM_ConfigClockSource+0x1c>
 80044b0:	2302      	movs	r3, #2
 80044b2:	e0b4      	b.n	800461e <HAL_TIM_ConfigClockSource+0x186>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2201      	movs	r2, #1
 80044b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2202      	movs	r2, #2
 80044c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80044d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80044da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	68ba      	ldr	r2, [r7, #8]
 80044e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80044ec:	d03e      	beq.n	800456c <HAL_TIM_ConfigClockSource+0xd4>
 80044ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80044f2:	f200 8087 	bhi.w	8004604 <HAL_TIM_ConfigClockSource+0x16c>
 80044f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044fa:	f000 8086 	beq.w	800460a <HAL_TIM_ConfigClockSource+0x172>
 80044fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004502:	d87f      	bhi.n	8004604 <HAL_TIM_ConfigClockSource+0x16c>
 8004504:	2b70      	cmp	r3, #112	@ 0x70
 8004506:	d01a      	beq.n	800453e <HAL_TIM_ConfigClockSource+0xa6>
 8004508:	2b70      	cmp	r3, #112	@ 0x70
 800450a:	d87b      	bhi.n	8004604 <HAL_TIM_ConfigClockSource+0x16c>
 800450c:	2b60      	cmp	r3, #96	@ 0x60
 800450e:	d050      	beq.n	80045b2 <HAL_TIM_ConfigClockSource+0x11a>
 8004510:	2b60      	cmp	r3, #96	@ 0x60
 8004512:	d877      	bhi.n	8004604 <HAL_TIM_ConfigClockSource+0x16c>
 8004514:	2b50      	cmp	r3, #80	@ 0x50
 8004516:	d03c      	beq.n	8004592 <HAL_TIM_ConfigClockSource+0xfa>
 8004518:	2b50      	cmp	r3, #80	@ 0x50
 800451a:	d873      	bhi.n	8004604 <HAL_TIM_ConfigClockSource+0x16c>
 800451c:	2b40      	cmp	r3, #64	@ 0x40
 800451e:	d058      	beq.n	80045d2 <HAL_TIM_ConfigClockSource+0x13a>
 8004520:	2b40      	cmp	r3, #64	@ 0x40
 8004522:	d86f      	bhi.n	8004604 <HAL_TIM_ConfigClockSource+0x16c>
 8004524:	2b30      	cmp	r3, #48	@ 0x30
 8004526:	d064      	beq.n	80045f2 <HAL_TIM_ConfigClockSource+0x15a>
 8004528:	2b30      	cmp	r3, #48	@ 0x30
 800452a:	d86b      	bhi.n	8004604 <HAL_TIM_ConfigClockSource+0x16c>
 800452c:	2b20      	cmp	r3, #32
 800452e:	d060      	beq.n	80045f2 <HAL_TIM_ConfigClockSource+0x15a>
 8004530:	2b20      	cmp	r3, #32
 8004532:	d867      	bhi.n	8004604 <HAL_TIM_ConfigClockSource+0x16c>
 8004534:	2b00      	cmp	r3, #0
 8004536:	d05c      	beq.n	80045f2 <HAL_TIM_ConfigClockSource+0x15a>
 8004538:	2b10      	cmp	r3, #16
 800453a:	d05a      	beq.n	80045f2 <HAL_TIM_ConfigClockSource+0x15a>
 800453c:	e062      	b.n	8004604 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800454e:	f000 f9b9 	bl	80048c4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004560:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	68ba      	ldr	r2, [r7, #8]
 8004568:	609a      	str	r2, [r3, #8]
      break;
 800456a:	e04f      	b.n	800460c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800457c:	f000 f9a2 	bl	80048c4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	689a      	ldr	r2, [r3, #8]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800458e:	609a      	str	r2, [r3, #8]
      break;
 8004590:	e03c      	b.n	800460c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800459e:	461a      	mov	r2, r3
 80045a0:	f000 f916 	bl	80047d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	2150      	movs	r1, #80	@ 0x50
 80045aa:	4618      	mov	r0, r3
 80045ac:	f000 f96f 	bl	800488e <TIM_ITRx_SetConfig>
      break;
 80045b0:	e02c      	b.n	800460c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80045be:	461a      	mov	r2, r3
 80045c0:	f000 f935 	bl	800482e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	2160      	movs	r1, #96	@ 0x60
 80045ca:	4618      	mov	r0, r3
 80045cc:	f000 f95f 	bl	800488e <TIM_ITRx_SetConfig>
      break;
 80045d0:	e01c      	b.n	800460c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80045de:	461a      	mov	r2, r3
 80045e0:	f000 f8f6 	bl	80047d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	2140      	movs	r1, #64	@ 0x40
 80045ea:	4618      	mov	r0, r3
 80045ec:	f000 f94f 	bl	800488e <TIM_ITRx_SetConfig>
      break;
 80045f0:	e00c      	b.n	800460c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4619      	mov	r1, r3
 80045fc:	4610      	mov	r0, r2
 80045fe:	f000 f946 	bl	800488e <TIM_ITRx_SetConfig>
      break;
 8004602:	e003      	b.n	800460c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	73fb      	strb	r3, [r7, #15]
      break;
 8004608:	e000      	b.n	800460c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800460a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2201      	movs	r2, #1
 8004610:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2200      	movs	r2, #0
 8004618:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800461c:	7bfb      	ldrb	r3, [r7, #15]
}
 800461e:	4618      	mov	r0, r3
 8004620:	3710      	adds	r7, #16
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}

08004626 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004626:	b480      	push	{r7}
 8004628:	b083      	sub	sp, #12
 800462a:	af00      	add	r7, sp, #0
 800462c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800462e:	bf00      	nop
 8004630:	370c      	adds	r7, #12
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr

0800463a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800463a:	b480      	push	{r7}
 800463c:	b083      	sub	sp, #12
 800463e:	af00      	add	r7, sp, #0
 8004640:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004642:	bf00      	nop
 8004644:	370c      	adds	r7, #12
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr

0800464e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800464e:	b480      	push	{r7}
 8004650:	b083      	sub	sp, #12
 8004652:	af00      	add	r7, sp, #0
 8004654:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004656:	bf00      	nop
 8004658:	370c      	adds	r7, #12
 800465a:	46bd      	mov	sp, r7
 800465c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004660:	4770      	bx	lr

08004662 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004662:	b480      	push	{r7}
 8004664:	b083      	sub	sp, #12
 8004666:	af00      	add	r7, sp, #0
 8004668:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800466a:	bf00      	nop
 800466c:	370c      	adds	r7, #12
 800466e:	46bd      	mov	sp, r7
 8004670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004674:	4770      	bx	lr
	...

08004678 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004678:	b480      	push	{r7}
 800467a:	b085      	sub	sp, #20
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
 8004680:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	4a46      	ldr	r2, [pc, #280]	@ (80047a4 <TIM_Base_SetConfig+0x12c>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d013      	beq.n	80046b8 <TIM_Base_SetConfig+0x40>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004696:	d00f      	beq.n	80046b8 <TIM_Base_SetConfig+0x40>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	4a43      	ldr	r2, [pc, #268]	@ (80047a8 <TIM_Base_SetConfig+0x130>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d00b      	beq.n	80046b8 <TIM_Base_SetConfig+0x40>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	4a42      	ldr	r2, [pc, #264]	@ (80047ac <TIM_Base_SetConfig+0x134>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d007      	beq.n	80046b8 <TIM_Base_SetConfig+0x40>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	4a41      	ldr	r2, [pc, #260]	@ (80047b0 <TIM_Base_SetConfig+0x138>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d003      	beq.n	80046b8 <TIM_Base_SetConfig+0x40>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	4a40      	ldr	r2, [pc, #256]	@ (80047b4 <TIM_Base_SetConfig+0x13c>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d108      	bne.n	80046ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	68fa      	ldr	r2, [r7, #12]
 80046c6:	4313      	orrs	r3, r2
 80046c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	4a35      	ldr	r2, [pc, #212]	@ (80047a4 <TIM_Base_SetConfig+0x12c>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d02b      	beq.n	800472a <TIM_Base_SetConfig+0xb2>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046d8:	d027      	beq.n	800472a <TIM_Base_SetConfig+0xb2>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	4a32      	ldr	r2, [pc, #200]	@ (80047a8 <TIM_Base_SetConfig+0x130>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d023      	beq.n	800472a <TIM_Base_SetConfig+0xb2>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	4a31      	ldr	r2, [pc, #196]	@ (80047ac <TIM_Base_SetConfig+0x134>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d01f      	beq.n	800472a <TIM_Base_SetConfig+0xb2>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	4a30      	ldr	r2, [pc, #192]	@ (80047b0 <TIM_Base_SetConfig+0x138>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d01b      	beq.n	800472a <TIM_Base_SetConfig+0xb2>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	4a2f      	ldr	r2, [pc, #188]	@ (80047b4 <TIM_Base_SetConfig+0x13c>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d017      	beq.n	800472a <TIM_Base_SetConfig+0xb2>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	4a2e      	ldr	r2, [pc, #184]	@ (80047b8 <TIM_Base_SetConfig+0x140>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d013      	beq.n	800472a <TIM_Base_SetConfig+0xb2>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	4a2d      	ldr	r2, [pc, #180]	@ (80047bc <TIM_Base_SetConfig+0x144>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d00f      	beq.n	800472a <TIM_Base_SetConfig+0xb2>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	4a2c      	ldr	r2, [pc, #176]	@ (80047c0 <TIM_Base_SetConfig+0x148>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d00b      	beq.n	800472a <TIM_Base_SetConfig+0xb2>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	4a2b      	ldr	r2, [pc, #172]	@ (80047c4 <TIM_Base_SetConfig+0x14c>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d007      	beq.n	800472a <TIM_Base_SetConfig+0xb2>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	4a2a      	ldr	r2, [pc, #168]	@ (80047c8 <TIM_Base_SetConfig+0x150>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d003      	beq.n	800472a <TIM_Base_SetConfig+0xb2>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	4a29      	ldr	r2, [pc, #164]	@ (80047cc <TIM_Base_SetConfig+0x154>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d108      	bne.n	800473c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004730:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	68db      	ldr	r3, [r3, #12]
 8004736:	68fa      	ldr	r2, [r7, #12]
 8004738:	4313      	orrs	r3, r2
 800473a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	695b      	ldr	r3, [r3, #20]
 8004746:	4313      	orrs	r3, r2
 8004748:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	68fa      	ldr	r2, [r7, #12]
 800474e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	689a      	ldr	r2, [r3, #8]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	4a10      	ldr	r2, [pc, #64]	@ (80047a4 <TIM_Base_SetConfig+0x12c>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d003      	beq.n	8004770 <TIM_Base_SetConfig+0xf8>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	4a12      	ldr	r2, [pc, #72]	@ (80047b4 <TIM_Base_SetConfig+0x13c>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d103      	bne.n	8004778 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	691a      	ldr	r2, [r3, #16]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2201      	movs	r2, #1
 800477c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	691b      	ldr	r3, [r3, #16]
 8004782:	f003 0301 	and.w	r3, r3, #1
 8004786:	2b01      	cmp	r3, #1
 8004788:	d105      	bne.n	8004796 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	691b      	ldr	r3, [r3, #16]
 800478e:	f023 0201 	bic.w	r2, r3, #1
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	611a      	str	r2, [r3, #16]
  }
}
 8004796:	bf00      	nop
 8004798:	3714      	adds	r7, #20
 800479a:	46bd      	mov	sp, r7
 800479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a0:	4770      	bx	lr
 80047a2:	bf00      	nop
 80047a4:	40010000 	.word	0x40010000
 80047a8:	40000400 	.word	0x40000400
 80047ac:	40000800 	.word	0x40000800
 80047b0:	40000c00 	.word	0x40000c00
 80047b4:	40010400 	.word	0x40010400
 80047b8:	40014000 	.word	0x40014000
 80047bc:	40014400 	.word	0x40014400
 80047c0:	40014800 	.word	0x40014800
 80047c4:	40001800 	.word	0x40001800
 80047c8:	40001c00 	.word	0x40001c00
 80047cc:	40002000 	.word	0x40002000

080047d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b087      	sub	sp, #28
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	60f8      	str	r0, [r7, #12]
 80047d8:	60b9      	str	r1, [r7, #8]
 80047da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	6a1b      	ldr	r3, [r3, #32]
 80047e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	6a1b      	ldr	r3, [r3, #32]
 80047e6:	f023 0201 	bic.w	r2, r3, #1
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	699b      	ldr	r3, [r3, #24]
 80047f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80047fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	011b      	lsls	r3, r3, #4
 8004800:	693a      	ldr	r2, [r7, #16]
 8004802:	4313      	orrs	r3, r2
 8004804:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	f023 030a 	bic.w	r3, r3, #10
 800480c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800480e:	697a      	ldr	r2, [r7, #20]
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	4313      	orrs	r3, r2
 8004814:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	693a      	ldr	r2, [r7, #16]
 800481a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	697a      	ldr	r2, [r7, #20]
 8004820:	621a      	str	r2, [r3, #32]
}
 8004822:	bf00      	nop
 8004824:	371c      	adds	r7, #28
 8004826:	46bd      	mov	sp, r7
 8004828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482c:	4770      	bx	lr

0800482e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800482e:	b480      	push	{r7}
 8004830:	b087      	sub	sp, #28
 8004832:	af00      	add	r7, sp, #0
 8004834:	60f8      	str	r0, [r7, #12]
 8004836:	60b9      	str	r1, [r7, #8]
 8004838:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	6a1b      	ldr	r3, [r3, #32]
 800483e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	6a1b      	ldr	r3, [r3, #32]
 8004844:	f023 0210 	bic.w	r2, r3, #16
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	699b      	ldr	r3, [r3, #24]
 8004850:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004858:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	031b      	lsls	r3, r3, #12
 800485e:	693a      	ldr	r2, [r7, #16]
 8004860:	4313      	orrs	r3, r2
 8004862:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800486a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	011b      	lsls	r3, r3, #4
 8004870:	697a      	ldr	r2, [r7, #20]
 8004872:	4313      	orrs	r3, r2
 8004874:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	693a      	ldr	r2, [r7, #16]
 800487a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	697a      	ldr	r2, [r7, #20]
 8004880:	621a      	str	r2, [r3, #32]
}
 8004882:	bf00      	nop
 8004884:	371c      	adds	r7, #28
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr

0800488e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800488e:	b480      	push	{r7}
 8004890:	b085      	sub	sp, #20
 8004892:	af00      	add	r7, sp, #0
 8004894:	6078      	str	r0, [r7, #4]
 8004896:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80048a6:	683a      	ldr	r2, [r7, #0]
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	4313      	orrs	r3, r2
 80048ac:	f043 0307 	orr.w	r3, r3, #7
 80048b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	68fa      	ldr	r2, [r7, #12]
 80048b6:	609a      	str	r2, [r3, #8]
}
 80048b8:	bf00      	nop
 80048ba:	3714      	adds	r7, #20
 80048bc:	46bd      	mov	sp, r7
 80048be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c2:	4770      	bx	lr

080048c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b087      	sub	sp, #28
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	60f8      	str	r0, [r7, #12]
 80048cc:	60b9      	str	r1, [r7, #8]
 80048ce:	607a      	str	r2, [r7, #4]
 80048d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80048de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	021a      	lsls	r2, r3, #8
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	431a      	orrs	r2, r3
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	4313      	orrs	r3, r2
 80048ec:	697a      	ldr	r2, [r7, #20]
 80048ee:	4313      	orrs	r3, r2
 80048f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	697a      	ldr	r2, [r7, #20]
 80048f6:	609a      	str	r2, [r3, #8]
}
 80048f8:	bf00      	nop
 80048fa:	371c      	adds	r7, #28
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr

08004904 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004904:	b480      	push	{r7}
 8004906:	b085      	sub	sp, #20
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004914:	2b01      	cmp	r3, #1
 8004916:	d101      	bne.n	800491c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004918:	2302      	movs	r3, #2
 800491a:	e05a      	b.n	80049d2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2201      	movs	r2, #1
 8004920:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2202      	movs	r2, #2
 8004928:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004942:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	68fa      	ldr	r2, [r7, #12]
 800494a:	4313      	orrs	r3, r2
 800494c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	68fa      	ldr	r2, [r7, #12]
 8004954:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a21      	ldr	r2, [pc, #132]	@ (80049e0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d022      	beq.n	80049a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004968:	d01d      	beq.n	80049a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a1d      	ldr	r2, [pc, #116]	@ (80049e4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d018      	beq.n	80049a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a1b      	ldr	r2, [pc, #108]	@ (80049e8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d013      	beq.n	80049a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a1a      	ldr	r2, [pc, #104]	@ (80049ec <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d00e      	beq.n	80049a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a18      	ldr	r2, [pc, #96]	@ (80049f0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d009      	beq.n	80049a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a17      	ldr	r2, [pc, #92]	@ (80049f4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d004      	beq.n	80049a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a15      	ldr	r2, [pc, #84]	@ (80049f8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d10c      	bne.n	80049c0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80049ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	68ba      	ldr	r2, [r7, #8]
 80049b4:	4313      	orrs	r3, r2
 80049b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	68ba      	ldr	r2, [r7, #8]
 80049be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2201      	movs	r2, #1
 80049c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2200      	movs	r2, #0
 80049cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80049d0:	2300      	movs	r3, #0
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3714      	adds	r7, #20
 80049d6:	46bd      	mov	sp, r7
 80049d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049dc:	4770      	bx	lr
 80049de:	bf00      	nop
 80049e0:	40010000 	.word	0x40010000
 80049e4:	40000400 	.word	0x40000400
 80049e8:	40000800 	.word	0x40000800
 80049ec:	40000c00 	.word	0x40000c00
 80049f0:	40010400 	.word	0x40010400
 80049f4:	40014000 	.word	0x40014000
 80049f8:	40001800 	.word	0x40001800

080049fc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b083      	sub	sp, #12
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a04:	bf00      	nop
 8004a06:	370c      	adds	r7, #12
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr

08004a10 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b083      	sub	sp, #12
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a18:	bf00      	nop
 8004a1a:	370c      	adds	r7, #12
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a22:	4770      	bx	lr

08004a24 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b082      	sub	sp, #8
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d101      	bne.n	8004a36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	e042      	b.n	8004abc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a3c:	b2db      	uxtb	r3, r3
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d106      	bne.n	8004a50 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2200      	movs	r2, #0
 8004a46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f7fc fcac 	bl	80013a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2224      	movs	r2, #36	@ 0x24
 8004a54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	68da      	ldr	r2, [r3, #12]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004a66:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004a68:	6878      	ldr	r0, [r7, #4]
 8004a6a:	f000 f82b 	bl	8004ac4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	691a      	ldr	r2, [r3, #16]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004a7c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	695a      	ldr	r2, [r3, #20]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004a8c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	68da      	ldr	r2, [r3, #12]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004a9c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2220      	movs	r2, #32
 8004aa8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2220      	movs	r2, #32
 8004ab0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004aba:	2300      	movs	r3, #0
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3708      	adds	r7, #8
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}

08004ac4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ac4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ac8:	b0c0      	sub	sp, #256	@ 0x100
 8004aca:	af00      	add	r7, sp, #0
 8004acc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	691b      	ldr	r3, [r3, #16]
 8004ad8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004adc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ae0:	68d9      	ldr	r1, [r3, #12]
 8004ae2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	ea40 0301 	orr.w	r3, r0, r1
 8004aec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004aee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004af2:	689a      	ldr	r2, [r3, #8]
 8004af4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004af8:	691b      	ldr	r3, [r3, #16]
 8004afa:	431a      	orrs	r2, r3
 8004afc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b00:	695b      	ldr	r3, [r3, #20]
 8004b02:	431a      	orrs	r2, r3
 8004b04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b08:	69db      	ldr	r3, [r3, #28]
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	68db      	ldr	r3, [r3, #12]
 8004b18:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004b1c:	f021 010c 	bic.w	r1, r1, #12
 8004b20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004b2a:	430b      	orrs	r3, r1
 8004b2c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004b2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	695b      	ldr	r3, [r3, #20]
 8004b36:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004b3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b3e:	6999      	ldr	r1, [r3, #24]
 8004b40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b44:	681a      	ldr	r2, [r3, #0]
 8004b46:	ea40 0301 	orr.w	r3, r0, r1
 8004b4a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	4b8f      	ldr	r3, [pc, #572]	@ (8004d90 <UART_SetConfig+0x2cc>)
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d005      	beq.n	8004b64 <UART_SetConfig+0xa0>
 8004b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b5c:	681a      	ldr	r2, [r3, #0]
 8004b5e:	4b8d      	ldr	r3, [pc, #564]	@ (8004d94 <UART_SetConfig+0x2d0>)
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d104      	bne.n	8004b6e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004b64:	f7ff fad4 	bl	8004110 <HAL_RCC_GetPCLK2Freq>
 8004b68:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004b6c:	e003      	b.n	8004b76 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004b6e:	f7ff fabb 	bl	80040e8 <HAL_RCC_GetPCLK1Freq>
 8004b72:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b7a:	69db      	ldr	r3, [r3, #28]
 8004b7c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b80:	f040 810c 	bne.w	8004d9c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004b84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b88:	2200      	movs	r2, #0
 8004b8a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004b8e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004b92:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004b96:	4622      	mov	r2, r4
 8004b98:	462b      	mov	r3, r5
 8004b9a:	1891      	adds	r1, r2, r2
 8004b9c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004b9e:	415b      	adcs	r3, r3
 8004ba0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004ba2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004ba6:	4621      	mov	r1, r4
 8004ba8:	eb12 0801 	adds.w	r8, r2, r1
 8004bac:	4629      	mov	r1, r5
 8004bae:	eb43 0901 	adc.w	r9, r3, r1
 8004bb2:	f04f 0200 	mov.w	r2, #0
 8004bb6:	f04f 0300 	mov.w	r3, #0
 8004bba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004bbe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004bc2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004bc6:	4690      	mov	r8, r2
 8004bc8:	4699      	mov	r9, r3
 8004bca:	4623      	mov	r3, r4
 8004bcc:	eb18 0303 	adds.w	r3, r8, r3
 8004bd0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004bd4:	462b      	mov	r3, r5
 8004bd6:	eb49 0303 	adc.w	r3, r9, r3
 8004bda:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004bde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	2200      	movs	r2, #0
 8004be6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004bea:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004bee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004bf2:	460b      	mov	r3, r1
 8004bf4:	18db      	adds	r3, r3, r3
 8004bf6:	653b      	str	r3, [r7, #80]	@ 0x50
 8004bf8:	4613      	mov	r3, r2
 8004bfa:	eb42 0303 	adc.w	r3, r2, r3
 8004bfe:	657b      	str	r3, [r7, #84]	@ 0x54
 8004c00:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004c04:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004c08:	f7fb fb42 	bl	8000290 <__aeabi_uldivmod>
 8004c0c:	4602      	mov	r2, r0
 8004c0e:	460b      	mov	r3, r1
 8004c10:	4b61      	ldr	r3, [pc, #388]	@ (8004d98 <UART_SetConfig+0x2d4>)
 8004c12:	fba3 2302 	umull	r2, r3, r3, r2
 8004c16:	095b      	lsrs	r3, r3, #5
 8004c18:	011c      	lsls	r4, r3, #4
 8004c1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c1e:	2200      	movs	r2, #0
 8004c20:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004c24:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004c28:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004c2c:	4642      	mov	r2, r8
 8004c2e:	464b      	mov	r3, r9
 8004c30:	1891      	adds	r1, r2, r2
 8004c32:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004c34:	415b      	adcs	r3, r3
 8004c36:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c38:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004c3c:	4641      	mov	r1, r8
 8004c3e:	eb12 0a01 	adds.w	sl, r2, r1
 8004c42:	4649      	mov	r1, r9
 8004c44:	eb43 0b01 	adc.w	fp, r3, r1
 8004c48:	f04f 0200 	mov.w	r2, #0
 8004c4c:	f04f 0300 	mov.w	r3, #0
 8004c50:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004c54:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004c58:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c5c:	4692      	mov	sl, r2
 8004c5e:	469b      	mov	fp, r3
 8004c60:	4643      	mov	r3, r8
 8004c62:	eb1a 0303 	adds.w	r3, sl, r3
 8004c66:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004c6a:	464b      	mov	r3, r9
 8004c6c:	eb4b 0303 	adc.w	r3, fp, r3
 8004c70:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004c74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004c80:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004c84:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004c88:	460b      	mov	r3, r1
 8004c8a:	18db      	adds	r3, r3, r3
 8004c8c:	643b      	str	r3, [r7, #64]	@ 0x40
 8004c8e:	4613      	mov	r3, r2
 8004c90:	eb42 0303 	adc.w	r3, r2, r3
 8004c94:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c96:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004c9a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004c9e:	f7fb faf7 	bl	8000290 <__aeabi_uldivmod>
 8004ca2:	4602      	mov	r2, r0
 8004ca4:	460b      	mov	r3, r1
 8004ca6:	4611      	mov	r1, r2
 8004ca8:	4b3b      	ldr	r3, [pc, #236]	@ (8004d98 <UART_SetConfig+0x2d4>)
 8004caa:	fba3 2301 	umull	r2, r3, r3, r1
 8004cae:	095b      	lsrs	r3, r3, #5
 8004cb0:	2264      	movs	r2, #100	@ 0x64
 8004cb2:	fb02 f303 	mul.w	r3, r2, r3
 8004cb6:	1acb      	subs	r3, r1, r3
 8004cb8:	00db      	lsls	r3, r3, #3
 8004cba:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004cbe:	4b36      	ldr	r3, [pc, #216]	@ (8004d98 <UART_SetConfig+0x2d4>)
 8004cc0:	fba3 2302 	umull	r2, r3, r3, r2
 8004cc4:	095b      	lsrs	r3, r3, #5
 8004cc6:	005b      	lsls	r3, r3, #1
 8004cc8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004ccc:	441c      	add	r4, r3
 8004cce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004cd8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004cdc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004ce0:	4642      	mov	r2, r8
 8004ce2:	464b      	mov	r3, r9
 8004ce4:	1891      	adds	r1, r2, r2
 8004ce6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004ce8:	415b      	adcs	r3, r3
 8004cea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004cec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004cf0:	4641      	mov	r1, r8
 8004cf2:	1851      	adds	r1, r2, r1
 8004cf4:	6339      	str	r1, [r7, #48]	@ 0x30
 8004cf6:	4649      	mov	r1, r9
 8004cf8:	414b      	adcs	r3, r1
 8004cfa:	637b      	str	r3, [r7, #52]	@ 0x34
 8004cfc:	f04f 0200 	mov.w	r2, #0
 8004d00:	f04f 0300 	mov.w	r3, #0
 8004d04:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004d08:	4659      	mov	r1, fp
 8004d0a:	00cb      	lsls	r3, r1, #3
 8004d0c:	4651      	mov	r1, sl
 8004d0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d12:	4651      	mov	r1, sl
 8004d14:	00ca      	lsls	r2, r1, #3
 8004d16:	4610      	mov	r0, r2
 8004d18:	4619      	mov	r1, r3
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	4642      	mov	r2, r8
 8004d1e:	189b      	adds	r3, r3, r2
 8004d20:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004d24:	464b      	mov	r3, r9
 8004d26:	460a      	mov	r2, r1
 8004d28:	eb42 0303 	adc.w	r3, r2, r3
 8004d2c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004d30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	2200      	movs	r2, #0
 8004d38:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004d3c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004d40:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004d44:	460b      	mov	r3, r1
 8004d46:	18db      	adds	r3, r3, r3
 8004d48:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d4a:	4613      	mov	r3, r2
 8004d4c:	eb42 0303 	adc.w	r3, r2, r3
 8004d50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d52:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004d56:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004d5a:	f7fb fa99 	bl	8000290 <__aeabi_uldivmod>
 8004d5e:	4602      	mov	r2, r0
 8004d60:	460b      	mov	r3, r1
 8004d62:	4b0d      	ldr	r3, [pc, #52]	@ (8004d98 <UART_SetConfig+0x2d4>)
 8004d64:	fba3 1302 	umull	r1, r3, r3, r2
 8004d68:	095b      	lsrs	r3, r3, #5
 8004d6a:	2164      	movs	r1, #100	@ 0x64
 8004d6c:	fb01 f303 	mul.w	r3, r1, r3
 8004d70:	1ad3      	subs	r3, r2, r3
 8004d72:	00db      	lsls	r3, r3, #3
 8004d74:	3332      	adds	r3, #50	@ 0x32
 8004d76:	4a08      	ldr	r2, [pc, #32]	@ (8004d98 <UART_SetConfig+0x2d4>)
 8004d78:	fba2 2303 	umull	r2, r3, r2, r3
 8004d7c:	095b      	lsrs	r3, r3, #5
 8004d7e:	f003 0207 	and.w	r2, r3, #7
 8004d82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4422      	add	r2, r4
 8004d8a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004d8c:	e106      	b.n	8004f9c <UART_SetConfig+0x4d8>
 8004d8e:	bf00      	nop
 8004d90:	40011000 	.word	0x40011000
 8004d94:	40011400 	.word	0x40011400
 8004d98:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004d9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004da0:	2200      	movs	r2, #0
 8004da2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004da6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004daa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004dae:	4642      	mov	r2, r8
 8004db0:	464b      	mov	r3, r9
 8004db2:	1891      	adds	r1, r2, r2
 8004db4:	6239      	str	r1, [r7, #32]
 8004db6:	415b      	adcs	r3, r3
 8004db8:	627b      	str	r3, [r7, #36]	@ 0x24
 8004dba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004dbe:	4641      	mov	r1, r8
 8004dc0:	1854      	adds	r4, r2, r1
 8004dc2:	4649      	mov	r1, r9
 8004dc4:	eb43 0501 	adc.w	r5, r3, r1
 8004dc8:	f04f 0200 	mov.w	r2, #0
 8004dcc:	f04f 0300 	mov.w	r3, #0
 8004dd0:	00eb      	lsls	r3, r5, #3
 8004dd2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004dd6:	00e2      	lsls	r2, r4, #3
 8004dd8:	4614      	mov	r4, r2
 8004dda:	461d      	mov	r5, r3
 8004ddc:	4643      	mov	r3, r8
 8004dde:	18e3      	adds	r3, r4, r3
 8004de0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004de4:	464b      	mov	r3, r9
 8004de6:	eb45 0303 	adc.w	r3, r5, r3
 8004dea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004dee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	2200      	movs	r2, #0
 8004df6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004dfa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004dfe:	f04f 0200 	mov.w	r2, #0
 8004e02:	f04f 0300 	mov.w	r3, #0
 8004e06:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004e0a:	4629      	mov	r1, r5
 8004e0c:	008b      	lsls	r3, r1, #2
 8004e0e:	4621      	mov	r1, r4
 8004e10:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e14:	4621      	mov	r1, r4
 8004e16:	008a      	lsls	r2, r1, #2
 8004e18:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004e1c:	f7fb fa38 	bl	8000290 <__aeabi_uldivmod>
 8004e20:	4602      	mov	r2, r0
 8004e22:	460b      	mov	r3, r1
 8004e24:	4b60      	ldr	r3, [pc, #384]	@ (8004fa8 <UART_SetConfig+0x4e4>)
 8004e26:	fba3 2302 	umull	r2, r3, r3, r2
 8004e2a:	095b      	lsrs	r3, r3, #5
 8004e2c:	011c      	lsls	r4, r3, #4
 8004e2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e32:	2200      	movs	r2, #0
 8004e34:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004e38:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004e3c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004e40:	4642      	mov	r2, r8
 8004e42:	464b      	mov	r3, r9
 8004e44:	1891      	adds	r1, r2, r2
 8004e46:	61b9      	str	r1, [r7, #24]
 8004e48:	415b      	adcs	r3, r3
 8004e4a:	61fb      	str	r3, [r7, #28]
 8004e4c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e50:	4641      	mov	r1, r8
 8004e52:	1851      	adds	r1, r2, r1
 8004e54:	6139      	str	r1, [r7, #16]
 8004e56:	4649      	mov	r1, r9
 8004e58:	414b      	adcs	r3, r1
 8004e5a:	617b      	str	r3, [r7, #20]
 8004e5c:	f04f 0200 	mov.w	r2, #0
 8004e60:	f04f 0300 	mov.w	r3, #0
 8004e64:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004e68:	4659      	mov	r1, fp
 8004e6a:	00cb      	lsls	r3, r1, #3
 8004e6c:	4651      	mov	r1, sl
 8004e6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e72:	4651      	mov	r1, sl
 8004e74:	00ca      	lsls	r2, r1, #3
 8004e76:	4610      	mov	r0, r2
 8004e78:	4619      	mov	r1, r3
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	4642      	mov	r2, r8
 8004e7e:	189b      	adds	r3, r3, r2
 8004e80:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004e84:	464b      	mov	r3, r9
 8004e86:	460a      	mov	r2, r1
 8004e88:	eb42 0303 	adc.w	r3, r2, r3
 8004e8c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004e90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	2200      	movs	r2, #0
 8004e98:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004e9a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004e9c:	f04f 0200 	mov.w	r2, #0
 8004ea0:	f04f 0300 	mov.w	r3, #0
 8004ea4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004ea8:	4649      	mov	r1, r9
 8004eaa:	008b      	lsls	r3, r1, #2
 8004eac:	4641      	mov	r1, r8
 8004eae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004eb2:	4641      	mov	r1, r8
 8004eb4:	008a      	lsls	r2, r1, #2
 8004eb6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004eba:	f7fb f9e9 	bl	8000290 <__aeabi_uldivmod>
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	460b      	mov	r3, r1
 8004ec2:	4611      	mov	r1, r2
 8004ec4:	4b38      	ldr	r3, [pc, #224]	@ (8004fa8 <UART_SetConfig+0x4e4>)
 8004ec6:	fba3 2301 	umull	r2, r3, r3, r1
 8004eca:	095b      	lsrs	r3, r3, #5
 8004ecc:	2264      	movs	r2, #100	@ 0x64
 8004ece:	fb02 f303 	mul.w	r3, r2, r3
 8004ed2:	1acb      	subs	r3, r1, r3
 8004ed4:	011b      	lsls	r3, r3, #4
 8004ed6:	3332      	adds	r3, #50	@ 0x32
 8004ed8:	4a33      	ldr	r2, [pc, #204]	@ (8004fa8 <UART_SetConfig+0x4e4>)
 8004eda:	fba2 2303 	umull	r2, r3, r2, r3
 8004ede:	095b      	lsrs	r3, r3, #5
 8004ee0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004ee4:	441c      	add	r4, r3
 8004ee6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004eea:	2200      	movs	r2, #0
 8004eec:	673b      	str	r3, [r7, #112]	@ 0x70
 8004eee:	677a      	str	r2, [r7, #116]	@ 0x74
 8004ef0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004ef4:	4642      	mov	r2, r8
 8004ef6:	464b      	mov	r3, r9
 8004ef8:	1891      	adds	r1, r2, r2
 8004efa:	60b9      	str	r1, [r7, #8]
 8004efc:	415b      	adcs	r3, r3
 8004efe:	60fb      	str	r3, [r7, #12]
 8004f00:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f04:	4641      	mov	r1, r8
 8004f06:	1851      	adds	r1, r2, r1
 8004f08:	6039      	str	r1, [r7, #0]
 8004f0a:	4649      	mov	r1, r9
 8004f0c:	414b      	adcs	r3, r1
 8004f0e:	607b      	str	r3, [r7, #4]
 8004f10:	f04f 0200 	mov.w	r2, #0
 8004f14:	f04f 0300 	mov.w	r3, #0
 8004f18:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004f1c:	4659      	mov	r1, fp
 8004f1e:	00cb      	lsls	r3, r1, #3
 8004f20:	4651      	mov	r1, sl
 8004f22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f26:	4651      	mov	r1, sl
 8004f28:	00ca      	lsls	r2, r1, #3
 8004f2a:	4610      	mov	r0, r2
 8004f2c:	4619      	mov	r1, r3
 8004f2e:	4603      	mov	r3, r0
 8004f30:	4642      	mov	r2, r8
 8004f32:	189b      	adds	r3, r3, r2
 8004f34:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004f36:	464b      	mov	r3, r9
 8004f38:	460a      	mov	r2, r1
 8004f3a:	eb42 0303 	adc.w	r3, r2, r3
 8004f3e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004f40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	2200      	movs	r2, #0
 8004f48:	663b      	str	r3, [r7, #96]	@ 0x60
 8004f4a:	667a      	str	r2, [r7, #100]	@ 0x64
 8004f4c:	f04f 0200 	mov.w	r2, #0
 8004f50:	f04f 0300 	mov.w	r3, #0
 8004f54:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004f58:	4649      	mov	r1, r9
 8004f5a:	008b      	lsls	r3, r1, #2
 8004f5c:	4641      	mov	r1, r8
 8004f5e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f62:	4641      	mov	r1, r8
 8004f64:	008a      	lsls	r2, r1, #2
 8004f66:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004f6a:	f7fb f991 	bl	8000290 <__aeabi_uldivmod>
 8004f6e:	4602      	mov	r2, r0
 8004f70:	460b      	mov	r3, r1
 8004f72:	4b0d      	ldr	r3, [pc, #52]	@ (8004fa8 <UART_SetConfig+0x4e4>)
 8004f74:	fba3 1302 	umull	r1, r3, r3, r2
 8004f78:	095b      	lsrs	r3, r3, #5
 8004f7a:	2164      	movs	r1, #100	@ 0x64
 8004f7c:	fb01 f303 	mul.w	r3, r1, r3
 8004f80:	1ad3      	subs	r3, r2, r3
 8004f82:	011b      	lsls	r3, r3, #4
 8004f84:	3332      	adds	r3, #50	@ 0x32
 8004f86:	4a08      	ldr	r2, [pc, #32]	@ (8004fa8 <UART_SetConfig+0x4e4>)
 8004f88:	fba2 2303 	umull	r2, r3, r2, r3
 8004f8c:	095b      	lsrs	r3, r3, #5
 8004f8e:	f003 020f 	and.w	r2, r3, #15
 8004f92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4422      	add	r2, r4
 8004f9a:	609a      	str	r2, [r3, #8]
}
 8004f9c:	bf00      	nop
 8004f9e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004fa8:	51eb851f 	.word	0x51eb851f

08004fac <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004fac:	b084      	sub	sp, #16
 8004fae:	b580      	push	{r7, lr}
 8004fb0:	b084      	sub	sp, #16
 8004fb2:	af00      	add	r7, sp, #0
 8004fb4:	6078      	str	r0, [r7, #4]
 8004fb6:	f107 001c 	add.w	r0, r7, #28
 8004fba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004fbe:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	d123      	bne.n	800500e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fca:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	68db      	ldr	r3, [r3, #12]
 8004fd6:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8004fda:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004fde:	687a      	ldr	r2, [r7, #4]
 8004fe0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	68db      	ldr	r3, [r3, #12]
 8004fe6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004fee:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004ff2:	2b01      	cmp	r3, #1
 8004ff4:	d105      	bne.n	8005002 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	68db      	ldr	r3, [r3, #12]
 8004ffa:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	f000 faa0 	bl	8005548 <USB_CoreReset>
 8005008:	4603      	mov	r3, r0
 800500a:	73fb      	strb	r3, [r7, #15]
 800500c:	e01b      	b.n	8005046 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	68db      	ldr	r3, [r3, #12]
 8005012:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f000 fa94 	bl	8005548 <USB_CoreReset>
 8005020:	4603      	mov	r3, r0
 8005022:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005024:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005028:	2b00      	cmp	r3, #0
 800502a:	d106      	bne.n	800503a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005030:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	639a      	str	r2, [r3, #56]	@ 0x38
 8005038:	e005      	b.n	8005046 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800503e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005046:	7fbb      	ldrb	r3, [r7, #30]
 8005048:	2b01      	cmp	r3, #1
 800504a:	d10b      	bne.n	8005064 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	f043 0206 	orr.w	r2, r3, #6
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	f043 0220 	orr.w	r2, r3, #32
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005064:	7bfb      	ldrb	r3, [r7, #15]
}
 8005066:	4618      	mov	r0, r3
 8005068:	3710      	adds	r7, #16
 800506a:	46bd      	mov	sp, r7
 800506c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005070:	b004      	add	sp, #16
 8005072:	4770      	bx	lr

08005074 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005074:	b480      	push	{r7}
 8005076:	b083      	sub	sp, #12
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	f023 0201 	bic.w	r2, r3, #1
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005088:	2300      	movs	r3, #0
}
 800508a:	4618      	mov	r0, r3
 800508c:	370c      	adds	r7, #12
 800508e:	46bd      	mov	sp, r7
 8005090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005094:	4770      	bx	lr

08005096 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005096:	b580      	push	{r7, lr}
 8005098:	b084      	sub	sp, #16
 800509a:	af00      	add	r7, sp, #0
 800509c:	6078      	str	r0, [r7, #4]
 800509e:	460b      	mov	r3, r1
 80050a0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80050a2:	2300      	movs	r3, #0
 80050a4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	68db      	ldr	r3, [r3, #12]
 80050aa:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80050b2:	78fb      	ldrb	r3, [r7, #3]
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	d115      	bne.n	80050e4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	68db      	ldr	r3, [r3, #12]
 80050bc:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80050c4:	200a      	movs	r0, #10
 80050c6:	f7fc fb37 	bl	8001738 <HAL_Delay>
      ms += 10U;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	330a      	adds	r3, #10
 80050ce:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	f000 fa2b 	bl	800552c <USB_GetMode>
 80050d6:	4603      	mov	r3, r0
 80050d8:	2b01      	cmp	r3, #1
 80050da:	d01e      	beq.n	800511a <USB_SetCurrentMode+0x84>
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	2bc7      	cmp	r3, #199	@ 0xc7
 80050e0:	d9f0      	bls.n	80050c4 <USB_SetCurrentMode+0x2e>
 80050e2:	e01a      	b.n	800511a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80050e4:	78fb      	ldrb	r3, [r7, #3]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d115      	bne.n	8005116 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	68db      	ldr	r3, [r3, #12]
 80050ee:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80050f6:	200a      	movs	r0, #10
 80050f8:	f7fc fb1e 	bl	8001738 <HAL_Delay>
      ms += 10U;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	330a      	adds	r3, #10
 8005100:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f000 fa12 	bl	800552c <USB_GetMode>
 8005108:	4603      	mov	r3, r0
 800510a:	2b00      	cmp	r3, #0
 800510c:	d005      	beq.n	800511a <USB_SetCurrentMode+0x84>
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2bc7      	cmp	r3, #199	@ 0xc7
 8005112:	d9f0      	bls.n	80050f6 <USB_SetCurrentMode+0x60>
 8005114:	e001      	b.n	800511a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	e005      	b.n	8005126 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2bc8      	cmp	r3, #200	@ 0xc8
 800511e:	d101      	bne.n	8005124 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005120:	2301      	movs	r3, #1
 8005122:	e000      	b.n	8005126 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005124:	2300      	movs	r3, #0
}
 8005126:	4618      	mov	r0, r3
 8005128:	3710      	adds	r7, #16
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}
	...

08005130 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005130:	b084      	sub	sp, #16
 8005132:	b580      	push	{r7, lr}
 8005134:	b086      	sub	sp, #24
 8005136:	af00      	add	r7, sp, #0
 8005138:	6078      	str	r0, [r7, #4]
 800513a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800513e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005142:	2300      	movs	r3, #0
 8005144:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800514a:	2300      	movs	r3, #0
 800514c:	613b      	str	r3, [r7, #16]
 800514e:	e009      	b.n	8005164 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005150:	687a      	ldr	r2, [r7, #4]
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	3340      	adds	r3, #64	@ 0x40
 8005156:	009b      	lsls	r3, r3, #2
 8005158:	4413      	add	r3, r2
 800515a:	2200      	movs	r2, #0
 800515c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	3301      	adds	r3, #1
 8005162:	613b      	str	r3, [r7, #16]
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	2b0e      	cmp	r3, #14
 8005168:	d9f2      	bls.n	8005150 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800516a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800516e:	2b00      	cmp	r3, #0
 8005170:	d11c      	bne.n	80051ac <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	68fa      	ldr	r2, [r7, #12]
 800517c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005180:	f043 0302 	orr.w	r3, r3, #2
 8005184:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800518a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005196:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051a2:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	639a      	str	r2, [r3, #56]	@ 0x38
 80051aa:	e00b      	b.n	80051c4 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051b0:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051bc:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80051ca:	461a      	mov	r2, r3
 80051cc:	2300      	movs	r3, #0
 80051ce:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80051d0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	d10d      	bne.n	80051f4 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80051d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d104      	bne.n	80051ea <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80051e0:	2100      	movs	r1, #0
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f000 f968 	bl	80054b8 <USB_SetDevSpeed>
 80051e8:	e008      	b.n	80051fc <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80051ea:	2101      	movs	r1, #1
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	f000 f963 	bl	80054b8 <USB_SetDevSpeed>
 80051f2:	e003      	b.n	80051fc <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80051f4:	2103      	movs	r1, #3
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f000 f95e 	bl	80054b8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80051fc:	2110      	movs	r1, #16
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f000 f8fa 	bl	80053f8 <USB_FlushTxFifo>
 8005204:	4603      	mov	r3, r0
 8005206:	2b00      	cmp	r3, #0
 8005208:	d001      	beq.n	800520e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800520a:	2301      	movs	r3, #1
 800520c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f000 f924 	bl	800545c <USB_FlushRxFifo>
 8005214:	4603      	mov	r3, r0
 8005216:	2b00      	cmp	r3, #0
 8005218:	d001      	beq.n	800521e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800521a:	2301      	movs	r3, #1
 800521c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005224:	461a      	mov	r2, r3
 8005226:	2300      	movs	r3, #0
 8005228:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005230:	461a      	mov	r2, r3
 8005232:	2300      	movs	r3, #0
 8005234:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800523c:	461a      	mov	r2, r3
 800523e:	2300      	movs	r3, #0
 8005240:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005242:	2300      	movs	r3, #0
 8005244:	613b      	str	r3, [r7, #16]
 8005246:	e043      	b.n	80052d0 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	015a      	lsls	r2, r3, #5
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	4413      	add	r3, r2
 8005250:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800525a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800525e:	d118      	bne.n	8005292 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8005260:	693b      	ldr	r3, [r7, #16]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d10a      	bne.n	800527c <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	015a      	lsls	r2, r3, #5
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	4413      	add	r3, r2
 800526e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005272:	461a      	mov	r2, r3
 8005274:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005278:	6013      	str	r3, [r2, #0]
 800527a:	e013      	b.n	80052a4 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	015a      	lsls	r2, r3, #5
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	4413      	add	r3, r2
 8005284:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005288:	461a      	mov	r2, r3
 800528a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800528e:	6013      	str	r3, [r2, #0]
 8005290:	e008      	b.n	80052a4 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	015a      	lsls	r2, r3, #5
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	4413      	add	r3, r2
 800529a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800529e:	461a      	mov	r2, r3
 80052a0:	2300      	movs	r3, #0
 80052a2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	015a      	lsls	r2, r3, #5
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	4413      	add	r3, r2
 80052ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052b0:	461a      	mov	r2, r3
 80052b2:	2300      	movs	r3, #0
 80052b4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	015a      	lsls	r2, r3, #5
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	4413      	add	r3, r2
 80052be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052c2:	461a      	mov	r2, r3
 80052c4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80052c8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	3301      	adds	r3, #1
 80052ce:	613b      	str	r3, [r7, #16]
 80052d0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80052d4:	461a      	mov	r2, r3
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	4293      	cmp	r3, r2
 80052da:	d3b5      	bcc.n	8005248 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80052dc:	2300      	movs	r3, #0
 80052de:	613b      	str	r3, [r7, #16]
 80052e0:	e043      	b.n	800536a <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	015a      	lsls	r2, r3, #5
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	4413      	add	r3, r2
 80052ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80052f4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80052f8:	d118      	bne.n	800532c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d10a      	bne.n	8005316 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	015a      	lsls	r2, r3, #5
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	4413      	add	r3, r2
 8005308:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800530c:	461a      	mov	r2, r3
 800530e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005312:	6013      	str	r3, [r2, #0]
 8005314:	e013      	b.n	800533e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	015a      	lsls	r2, r3, #5
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	4413      	add	r3, r2
 800531e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005322:	461a      	mov	r2, r3
 8005324:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005328:	6013      	str	r3, [r2, #0]
 800532a:	e008      	b.n	800533e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	015a      	lsls	r2, r3, #5
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	4413      	add	r3, r2
 8005334:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005338:	461a      	mov	r2, r3
 800533a:	2300      	movs	r3, #0
 800533c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	015a      	lsls	r2, r3, #5
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	4413      	add	r3, r2
 8005346:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800534a:	461a      	mov	r2, r3
 800534c:	2300      	movs	r3, #0
 800534e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	015a      	lsls	r2, r3, #5
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	4413      	add	r3, r2
 8005358:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800535c:	461a      	mov	r2, r3
 800535e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005362:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	3301      	adds	r3, #1
 8005368:	613b      	str	r3, [r7, #16]
 800536a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800536e:	461a      	mov	r2, r3
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	4293      	cmp	r3, r2
 8005374:	d3b5      	bcc.n	80052e2 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800537c:	691b      	ldr	r3, [r3, #16]
 800537e:	68fa      	ldr	r2, [r7, #12]
 8005380:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005384:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005388:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2200      	movs	r2, #0
 800538e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005396:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005398:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800539c:	2b00      	cmp	r3, #0
 800539e:	d105      	bne.n	80053ac <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	699b      	ldr	r3, [r3, #24]
 80053a4:	f043 0210 	orr.w	r2, r3, #16
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	699a      	ldr	r2, [r3, #24]
 80053b0:	4b10      	ldr	r3, [pc, #64]	@ (80053f4 <USB_DevInit+0x2c4>)
 80053b2:	4313      	orrs	r3, r2
 80053b4:	687a      	ldr	r2, [r7, #4]
 80053b6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80053b8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d005      	beq.n	80053cc <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	699b      	ldr	r3, [r3, #24]
 80053c4:	f043 0208 	orr.w	r2, r3, #8
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80053cc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	d107      	bne.n	80053e4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	699b      	ldr	r3, [r3, #24]
 80053d8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80053dc:	f043 0304 	orr.w	r3, r3, #4
 80053e0:	687a      	ldr	r2, [r7, #4]
 80053e2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80053e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	3718      	adds	r7, #24
 80053ea:	46bd      	mov	sp, r7
 80053ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80053f0:	b004      	add	sp, #16
 80053f2:	4770      	bx	lr
 80053f4:	803c3800 	.word	0x803c3800

080053f8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b085      	sub	sp, #20
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
 8005400:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005402:	2300      	movs	r3, #0
 8005404:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	3301      	adds	r3, #1
 800540a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005412:	d901      	bls.n	8005418 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005414:	2303      	movs	r3, #3
 8005416:	e01b      	b.n	8005450 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	691b      	ldr	r3, [r3, #16]
 800541c:	2b00      	cmp	r3, #0
 800541e:	daf2      	bge.n	8005406 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005420:	2300      	movs	r3, #0
 8005422:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	019b      	lsls	r3, r3, #6
 8005428:	f043 0220 	orr.w	r2, r3, #32
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	3301      	adds	r3, #1
 8005434:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800543c:	d901      	bls.n	8005442 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800543e:	2303      	movs	r3, #3
 8005440:	e006      	b.n	8005450 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	691b      	ldr	r3, [r3, #16]
 8005446:	f003 0320 	and.w	r3, r3, #32
 800544a:	2b20      	cmp	r3, #32
 800544c:	d0f0      	beq.n	8005430 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800544e:	2300      	movs	r3, #0
}
 8005450:	4618      	mov	r0, r3
 8005452:	3714      	adds	r7, #20
 8005454:	46bd      	mov	sp, r7
 8005456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545a:	4770      	bx	lr

0800545c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800545c:	b480      	push	{r7}
 800545e:	b085      	sub	sp, #20
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005464:	2300      	movs	r3, #0
 8005466:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	3301      	adds	r3, #1
 800546c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005474:	d901      	bls.n	800547a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005476:	2303      	movs	r3, #3
 8005478:	e018      	b.n	80054ac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	691b      	ldr	r3, [r3, #16]
 800547e:	2b00      	cmp	r3, #0
 8005480:	daf2      	bge.n	8005468 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005482:	2300      	movs	r3, #0
 8005484:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2210      	movs	r2, #16
 800548a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	3301      	adds	r3, #1
 8005490:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005498:	d901      	bls.n	800549e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800549a:	2303      	movs	r3, #3
 800549c:	e006      	b.n	80054ac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	691b      	ldr	r3, [r3, #16]
 80054a2:	f003 0310 	and.w	r3, r3, #16
 80054a6:	2b10      	cmp	r3, #16
 80054a8:	d0f0      	beq.n	800548c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80054aa:	2300      	movs	r3, #0
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	3714      	adds	r7, #20
 80054b0:	46bd      	mov	sp, r7
 80054b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b6:	4770      	bx	lr

080054b8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b085      	sub	sp, #20
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
 80054c0:	460b      	mov	r3, r1
 80054c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054ce:	681a      	ldr	r2, [r3, #0]
 80054d0:	78fb      	ldrb	r3, [r7, #3]
 80054d2:	68f9      	ldr	r1, [r7, #12]
 80054d4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80054d8:	4313      	orrs	r3, r2
 80054da:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80054dc:	2300      	movs	r3, #0
}
 80054de:	4618      	mov	r0, r3
 80054e0:	3714      	adds	r7, #20
 80054e2:	46bd      	mov	sp, r7
 80054e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e8:	4770      	bx	lr

080054ea <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80054ea:	b480      	push	{r7}
 80054ec:	b085      	sub	sp, #20
 80054ee:	af00      	add	r7, sp, #0
 80054f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	68fa      	ldr	r2, [r7, #12]
 8005500:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005504:	f023 0303 	bic.w	r3, r3, #3
 8005508:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	68fa      	ldr	r2, [r7, #12]
 8005514:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005518:	f043 0302 	orr.w	r3, r3, #2
 800551c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800551e:	2300      	movs	r3, #0
}
 8005520:	4618      	mov	r0, r3
 8005522:	3714      	adds	r7, #20
 8005524:	46bd      	mov	sp, r7
 8005526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552a:	4770      	bx	lr

0800552c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800552c:	b480      	push	{r7}
 800552e:	b083      	sub	sp, #12
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	695b      	ldr	r3, [r3, #20]
 8005538:	f003 0301 	and.w	r3, r3, #1
}
 800553c:	4618      	mov	r0, r3
 800553e:	370c      	adds	r7, #12
 8005540:	46bd      	mov	sp, r7
 8005542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005546:	4770      	bx	lr

08005548 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005548:	b480      	push	{r7}
 800554a:	b085      	sub	sp, #20
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005550:	2300      	movs	r3, #0
 8005552:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	3301      	adds	r3, #1
 8005558:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005560:	d901      	bls.n	8005566 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005562:	2303      	movs	r3, #3
 8005564:	e01b      	b.n	800559e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	691b      	ldr	r3, [r3, #16]
 800556a:	2b00      	cmp	r3, #0
 800556c:	daf2      	bge.n	8005554 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800556e:	2300      	movs	r3, #0
 8005570:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	691b      	ldr	r3, [r3, #16]
 8005576:	f043 0201 	orr.w	r2, r3, #1
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	3301      	adds	r3, #1
 8005582:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800558a:	d901      	bls.n	8005590 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800558c:	2303      	movs	r3, #3
 800558e:	e006      	b.n	800559e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	691b      	ldr	r3, [r3, #16]
 8005594:	f003 0301 	and.w	r3, r3, #1
 8005598:	2b01      	cmp	r3, #1
 800559a:	d0f0      	beq.n	800557e <USB_CoreReset+0x36>

  return HAL_OK;
 800559c:	2300      	movs	r3, #0
}
 800559e:	4618      	mov	r0, r3
 80055a0:	3714      	adds	r7, #20
 80055a2:	46bd      	mov	sp, r7
 80055a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a8:	4770      	bx	lr
	...

080055ac <siprintf>:
 80055ac:	b40e      	push	{r1, r2, r3}
 80055ae:	b500      	push	{lr}
 80055b0:	b09c      	sub	sp, #112	@ 0x70
 80055b2:	ab1d      	add	r3, sp, #116	@ 0x74
 80055b4:	9002      	str	r0, [sp, #8]
 80055b6:	9006      	str	r0, [sp, #24]
 80055b8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80055bc:	4809      	ldr	r0, [pc, #36]	@ (80055e4 <siprintf+0x38>)
 80055be:	9107      	str	r1, [sp, #28]
 80055c0:	9104      	str	r1, [sp, #16]
 80055c2:	4909      	ldr	r1, [pc, #36]	@ (80055e8 <siprintf+0x3c>)
 80055c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80055c8:	9105      	str	r1, [sp, #20]
 80055ca:	6800      	ldr	r0, [r0, #0]
 80055cc:	9301      	str	r3, [sp, #4]
 80055ce:	a902      	add	r1, sp, #8
 80055d0:	f000 f994 	bl	80058fc <_svfiprintf_r>
 80055d4:	9b02      	ldr	r3, [sp, #8]
 80055d6:	2200      	movs	r2, #0
 80055d8:	701a      	strb	r2, [r3, #0]
 80055da:	b01c      	add	sp, #112	@ 0x70
 80055dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80055e0:	b003      	add	sp, #12
 80055e2:	4770      	bx	lr
 80055e4:	2000001c 	.word	0x2000001c
 80055e8:	ffff0208 	.word	0xffff0208

080055ec <memset>:
 80055ec:	4402      	add	r2, r0
 80055ee:	4603      	mov	r3, r0
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d100      	bne.n	80055f6 <memset+0xa>
 80055f4:	4770      	bx	lr
 80055f6:	f803 1b01 	strb.w	r1, [r3], #1
 80055fa:	e7f9      	b.n	80055f0 <memset+0x4>

080055fc <__errno>:
 80055fc:	4b01      	ldr	r3, [pc, #4]	@ (8005604 <__errno+0x8>)
 80055fe:	6818      	ldr	r0, [r3, #0]
 8005600:	4770      	bx	lr
 8005602:	bf00      	nop
 8005604:	2000001c 	.word	0x2000001c

08005608 <__libc_init_array>:
 8005608:	b570      	push	{r4, r5, r6, lr}
 800560a:	4d0d      	ldr	r5, [pc, #52]	@ (8005640 <__libc_init_array+0x38>)
 800560c:	4c0d      	ldr	r4, [pc, #52]	@ (8005644 <__libc_init_array+0x3c>)
 800560e:	1b64      	subs	r4, r4, r5
 8005610:	10a4      	asrs	r4, r4, #2
 8005612:	2600      	movs	r6, #0
 8005614:	42a6      	cmp	r6, r4
 8005616:	d109      	bne.n	800562c <__libc_init_array+0x24>
 8005618:	4d0b      	ldr	r5, [pc, #44]	@ (8005648 <__libc_init_array+0x40>)
 800561a:	4c0c      	ldr	r4, [pc, #48]	@ (800564c <__libc_init_array+0x44>)
 800561c:	f000 fc66 	bl	8005eec <_init>
 8005620:	1b64      	subs	r4, r4, r5
 8005622:	10a4      	asrs	r4, r4, #2
 8005624:	2600      	movs	r6, #0
 8005626:	42a6      	cmp	r6, r4
 8005628:	d105      	bne.n	8005636 <__libc_init_array+0x2e>
 800562a:	bd70      	pop	{r4, r5, r6, pc}
 800562c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005630:	4798      	blx	r3
 8005632:	3601      	adds	r6, #1
 8005634:	e7ee      	b.n	8005614 <__libc_init_array+0xc>
 8005636:	f855 3b04 	ldr.w	r3, [r5], #4
 800563a:	4798      	blx	r3
 800563c:	3601      	adds	r6, #1
 800563e:	e7f2      	b.n	8005626 <__libc_init_array+0x1e>
 8005640:	08005f90 	.word	0x08005f90
 8005644:	08005f90 	.word	0x08005f90
 8005648:	08005f90 	.word	0x08005f90
 800564c:	08005f94 	.word	0x08005f94

08005650 <__retarget_lock_acquire_recursive>:
 8005650:	4770      	bx	lr

08005652 <__retarget_lock_release_recursive>:
 8005652:	4770      	bx	lr

08005654 <_free_r>:
 8005654:	b538      	push	{r3, r4, r5, lr}
 8005656:	4605      	mov	r5, r0
 8005658:	2900      	cmp	r1, #0
 800565a:	d041      	beq.n	80056e0 <_free_r+0x8c>
 800565c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005660:	1f0c      	subs	r4, r1, #4
 8005662:	2b00      	cmp	r3, #0
 8005664:	bfb8      	it	lt
 8005666:	18e4      	addlt	r4, r4, r3
 8005668:	f000 f8e0 	bl	800582c <__malloc_lock>
 800566c:	4a1d      	ldr	r2, [pc, #116]	@ (80056e4 <_free_r+0x90>)
 800566e:	6813      	ldr	r3, [r2, #0]
 8005670:	b933      	cbnz	r3, 8005680 <_free_r+0x2c>
 8005672:	6063      	str	r3, [r4, #4]
 8005674:	6014      	str	r4, [r2, #0]
 8005676:	4628      	mov	r0, r5
 8005678:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800567c:	f000 b8dc 	b.w	8005838 <__malloc_unlock>
 8005680:	42a3      	cmp	r3, r4
 8005682:	d908      	bls.n	8005696 <_free_r+0x42>
 8005684:	6820      	ldr	r0, [r4, #0]
 8005686:	1821      	adds	r1, r4, r0
 8005688:	428b      	cmp	r3, r1
 800568a:	bf01      	itttt	eq
 800568c:	6819      	ldreq	r1, [r3, #0]
 800568e:	685b      	ldreq	r3, [r3, #4]
 8005690:	1809      	addeq	r1, r1, r0
 8005692:	6021      	streq	r1, [r4, #0]
 8005694:	e7ed      	b.n	8005672 <_free_r+0x1e>
 8005696:	461a      	mov	r2, r3
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	b10b      	cbz	r3, 80056a0 <_free_r+0x4c>
 800569c:	42a3      	cmp	r3, r4
 800569e:	d9fa      	bls.n	8005696 <_free_r+0x42>
 80056a0:	6811      	ldr	r1, [r2, #0]
 80056a2:	1850      	adds	r0, r2, r1
 80056a4:	42a0      	cmp	r0, r4
 80056a6:	d10b      	bne.n	80056c0 <_free_r+0x6c>
 80056a8:	6820      	ldr	r0, [r4, #0]
 80056aa:	4401      	add	r1, r0
 80056ac:	1850      	adds	r0, r2, r1
 80056ae:	4283      	cmp	r3, r0
 80056b0:	6011      	str	r1, [r2, #0]
 80056b2:	d1e0      	bne.n	8005676 <_free_r+0x22>
 80056b4:	6818      	ldr	r0, [r3, #0]
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	6053      	str	r3, [r2, #4]
 80056ba:	4408      	add	r0, r1
 80056bc:	6010      	str	r0, [r2, #0]
 80056be:	e7da      	b.n	8005676 <_free_r+0x22>
 80056c0:	d902      	bls.n	80056c8 <_free_r+0x74>
 80056c2:	230c      	movs	r3, #12
 80056c4:	602b      	str	r3, [r5, #0]
 80056c6:	e7d6      	b.n	8005676 <_free_r+0x22>
 80056c8:	6820      	ldr	r0, [r4, #0]
 80056ca:	1821      	adds	r1, r4, r0
 80056cc:	428b      	cmp	r3, r1
 80056ce:	bf04      	itt	eq
 80056d0:	6819      	ldreq	r1, [r3, #0]
 80056d2:	685b      	ldreq	r3, [r3, #4]
 80056d4:	6063      	str	r3, [r4, #4]
 80056d6:	bf04      	itt	eq
 80056d8:	1809      	addeq	r1, r1, r0
 80056da:	6021      	streq	r1, [r4, #0]
 80056dc:	6054      	str	r4, [r2, #4]
 80056de:	e7ca      	b.n	8005676 <_free_r+0x22>
 80056e0:	bd38      	pop	{r3, r4, r5, pc}
 80056e2:	bf00      	nop
 80056e4:	20000a48 	.word	0x20000a48

080056e8 <sbrk_aligned>:
 80056e8:	b570      	push	{r4, r5, r6, lr}
 80056ea:	4e0f      	ldr	r6, [pc, #60]	@ (8005728 <sbrk_aligned+0x40>)
 80056ec:	460c      	mov	r4, r1
 80056ee:	6831      	ldr	r1, [r6, #0]
 80056f0:	4605      	mov	r5, r0
 80056f2:	b911      	cbnz	r1, 80056fa <sbrk_aligned+0x12>
 80056f4:	f000 fba6 	bl	8005e44 <_sbrk_r>
 80056f8:	6030      	str	r0, [r6, #0]
 80056fa:	4621      	mov	r1, r4
 80056fc:	4628      	mov	r0, r5
 80056fe:	f000 fba1 	bl	8005e44 <_sbrk_r>
 8005702:	1c43      	adds	r3, r0, #1
 8005704:	d103      	bne.n	800570e <sbrk_aligned+0x26>
 8005706:	f04f 34ff 	mov.w	r4, #4294967295
 800570a:	4620      	mov	r0, r4
 800570c:	bd70      	pop	{r4, r5, r6, pc}
 800570e:	1cc4      	adds	r4, r0, #3
 8005710:	f024 0403 	bic.w	r4, r4, #3
 8005714:	42a0      	cmp	r0, r4
 8005716:	d0f8      	beq.n	800570a <sbrk_aligned+0x22>
 8005718:	1a21      	subs	r1, r4, r0
 800571a:	4628      	mov	r0, r5
 800571c:	f000 fb92 	bl	8005e44 <_sbrk_r>
 8005720:	3001      	adds	r0, #1
 8005722:	d1f2      	bne.n	800570a <sbrk_aligned+0x22>
 8005724:	e7ef      	b.n	8005706 <sbrk_aligned+0x1e>
 8005726:	bf00      	nop
 8005728:	20000a44 	.word	0x20000a44

0800572c <_malloc_r>:
 800572c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005730:	1ccd      	adds	r5, r1, #3
 8005732:	f025 0503 	bic.w	r5, r5, #3
 8005736:	3508      	adds	r5, #8
 8005738:	2d0c      	cmp	r5, #12
 800573a:	bf38      	it	cc
 800573c:	250c      	movcc	r5, #12
 800573e:	2d00      	cmp	r5, #0
 8005740:	4606      	mov	r6, r0
 8005742:	db01      	blt.n	8005748 <_malloc_r+0x1c>
 8005744:	42a9      	cmp	r1, r5
 8005746:	d904      	bls.n	8005752 <_malloc_r+0x26>
 8005748:	230c      	movs	r3, #12
 800574a:	6033      	str	r3, [r6, #0]
 800574c:	2000      	movs	r0, #0
 800574e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005752:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005828 <_malloc_r+0xfc>
 8005756:	f000 f869 	bl	800582c <__malloc_lock>
 800575a:	f8d8 3000 	ldr.w	r3, [r8]
 800575e:	461c      	mov	r4, r3
 8005760:	bb44      	cbnz	r4, 80057b4 <_malloc_r+0x88>
 8005762:	4629      	mov	r1, r5
 8005764:	4630      	mov	r0, r6
 8005766:	f7ff ffbf 	bl	80056e8 <sbrk_aligned>
 800576a:	1c43      	adds	r3, r0, #1
 800576c:	4604      	mov	r4, r0
 800576e:	d158      	bne.n	8005822 <_malloc_r+0xf6>
 8005770:	f8d8 4000 	ldr.w	r4, [r8]
 8005774:	4627      	mov	r7, r4
 8005776:	2f00      	cmp	r7, #0
 8005778:	d143      	bne.n	8005802 <_malloc_r+0xd6>
 800577a:	2c00      	cmp	r4, #0
 800577c:	d04b      	beq.n	8005816 <_malloc_r+0xea>
 800577e:	6823      	ldr	r3, [r4, #0]
 8005780:	4639      	mov	r1, r7
 8005782:	4630      	mov	r0, r6
 8005784:	eb04 0903 	add.w	r9, r4, r3
 8005788:	f000 fb5c 	bl	8005e44 <_sbrk_r>
 800578c:	4581      	cmp	r9, r0
 800578e:	d142      	bne.n	8005816 <_malloc_r+0xea>
 8005790:	6821      	ldr	r1, [r4, #0]
 8005792:	1a6d      	subs	r5, r5, r1
 8005794:	4629      	mov	r1, r5
 8005796:	4630      	mov	r0, r6
 8005798:	f7ff ffa6 	bl	80056e8 <sbrk_aligned>
 800579c:	3001      	adds	r0, #1
 800579e:	d03a      	beq.n	8005816 <_malloc_r+0xea>
 80057a0:	6823      	ldr	r3, [r4, #0]
 80057a2:	442b      	add	r3, r5
 80057a4:	6023      	str	r3, [r4, #0]
 80057a6:	f8d8 3000 	ldr.w	r3, [r8]
 80057aa:	685a      	ldr	r2, [r3, #4]
 80057ac:	bb62      	cbnz	r2, 8005808 <_malloc_r+0xdc>
 80057ae:	f8c8 7000 	str.w	r7, [r8]
 80057b2:	e00f      	b.n	80057d4 <_malloc_r+0xa8>
 80057b4:	6822      	ldr	r2, [r4, #0]
 80057b6:	1b52      	subs	r2, r2, r5
 80057b8:	d420      	bmi.n	80057fc <_malloc_r+0xd0>
 80057ba:	2a0b      	cmp	r2, #11
 80057bc:	d917      	bls.n	80057ee <_malloc_r+0xc2>
 80057be:	1961      	adds	r1, r4, r5
 80057c0:	42a3      	cmp	r3, r4
 80057c2:	6025      	str	r5, [r4, #0]
 80057c4:	bf18      	it	ne
 80057c6:	6059      	strne	r1, [r3, #4]
 80057c8:	6863      	ldr	r3, [r4, #4]
 80057ca:	bf08      	it	eq
 80057cc:	f8c8 1000 	streq.w	r1, [r8]
 80057d0:	5162      	str	r2, [r4, r5]
 80057d2:	604b      	str	r3, [r1, #4]
 80057d4:	4630      	mov	r0, r6
 80057d6:	f000 f82f 	bl	8005838 <__malloc_unlock>
 80057da:	f104 000b 	add.w	r0, r4, #11
 80057de:	1d23      	adds	r3, r4, #4
 80057e0:	f020 0007 	bic.w	r0, r0, #7
 80057e4:	1ac2      	subs	r2, r0, r3
 80057e6:	bf1c      	itt	ne
 80057e8:	1a1b      	subne	r3, r3, r0
 80057ea:	50a3      	strne	r3, [r4, r2]
 80057ec:	e7af      	b.n	800574e <_malloc_r+0x22>
 80057ee:	6862      	ldr	r2, [r4, #4]
 80057f0:	42a3      	cmp	r3, r4
 80057f2:	bf0c      	ite	eq
 80057f4:	f8c8 2000 	streq.w	r2, [r8]
 80057f8:	605a      	strne	r2, [r3, #4]
 80057fa:	e7eb      	b.n	80057d4 <_malloc_r+0xa8>
 80057fc:	4623      	mov	r3, r4
 80057fe:	6864      	ldr	r4, [r4, #4]
 8005800:	e7ae      	b.n	8005760 <_malloc_r+0x34>
 8005802:	463c      	mov	r4, r7
 8005804:	687f      	ldr	r7, [r7, #4]
 8005806:	e7b6      	b.n	8005776 <_malloc_r+0x4a>
 8005808:	461a      	mov	r2, r3
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	42a3      	cmp	r3, r4
 800580e:	d1fb      	bne.n	8005808 <_malloc_r+0xdc>
 8005810:	2300      	movs	r3, #0
 8005812:	6053      	str	r3, [r2, #4]
 8005814:	e7de      	b.n	80057d4 <_malloc_r+0xa8>
 8005816:	230c      	movs	r3, #12
 8005818:	6033      	str	r3, [r6, #0]
 800581a:	4630      	mov	r0, r6
 800581c:	f000 f80c 	bl	8005838 <__malloc_unlock>
 8005820:	e794      	b.n	800574c <_malloc_r+0x20>
 8005822:	6005      	str	r5, [r0, #0]
 8005824:	e7d6      	b.n	80057d4 <_malloc_r+0xa8>
 8005826:	bf00      	nop
 8005828:	20000a48 	.word	0x20000a48

0800582c <__malloc_lock>:
 800582c:	4801      	ldr	r0, [pc, #4]	@ (8005834 <__malloc_lock+0x8>)
 800582e:	f7ff bf0f 	b.w	8005650 <__retarget_lock_acquire_recursive>
 8005832:	bf00      	nop
 8005834:	20000a40 	.word	0x20000a40

08005838 <__malloc_unlock>:
 8005838:	4801      	ldr	r0, [pc, #4]	@ (8005840 <__malloc_unlock+0x8>)
 800583a:	f7ff bf0a 	b.w	8005652 <__retarget_lock_release_recursive>
 800583e:	bf00      	nop
 8005840:	20000a40 	.word	0x20000a40

08005844 <__ssputs_r>:
 8005844:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005848:	688e      	ldr	r6, [r1, #8]
 800584a:	461f      	mov	r7, r3
 800584c:	42be      	cmp	r6, r7
 800584e:	680b      	ldr	r3, [r1, #0]
 8005850:	4682      	mov	sl, r0
 8005852:	460c      	mov	r4, r1
 8005854:	4690      	mov	r8, r2
 8005856:	d82d      	bhi.n	80058b4 <__ssputs_r+0x70>
 8005858:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800585c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005860:	d026      	beq.n	80058b0 <__ssputs_r+0x6c>
 8005862:	6965      	ldr	r5, [r4, #20]
 8005864:	6909      	ldr	r1, [r1, #16]
 8005866:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800586a:	eba3 0901 	sub.w	r9, r3, r1
 800586e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005872:	1c7b      	adds	r3, r7, #1
 8005874:	444b      	add	r3, r9
 8005876:	106d      	asrs	r5, r5, #1
 8005878:	429d      	cmp	r5, r3
 800587a:	bf38      	it	cc
 800587c:	461d      	movcc	r5, r3
 800587e:	0553      	lsls	r3, r2, #21
 8005880:	d527      	bpl.n	80058d2 <__ssputs_r+0x8e>
 8005882:	4629      	mov	r1, r5
 8005884:	f7ff ff52 	bl	800572c <_malloc_r>
 8005888:	4606      	mov	r6, r0
 800588a:	b360      	cbz	r0, 80058e6 <__ssputs_r+0xa2>
 800588c:	6921      	ldr	r1, [r4, #16]
 800588e:	464a      	mov	r2, r9
 8005890:	f000 fae8 	bl	8005e64 <memcpy>
 8005894:	89a3      	ldrh	r3, [r4, #12]
 8005896:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800589a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800589e:	81a3      	strh	r3, [r4, #12]
 80058a0:	6126      	str	r6, [r4, #16]
 80058a2:	6165      	str	r5, [r4, #20]
 80058a4:	444e      	add	r6, r9
 80058a6:	eba5 0509 	sub.w	r5, r5, r9
 80058aa:	6026      	str	r6, [r4, #0]
 80058ac:	60a5      	str	r5, [r4, #8]
 80058ae:	463e      	mov	r6, r7
 80058b0:	42be      	cmp	r6, r7
 80058b2:	d900      	bls.n	80058b6 <__ssputs_r+0x72>
 80058b4:	463e      	mov	r6, r7
 80058b6:	6820      	ldr	r0, [r4, #0]
 80058b8:	4632      	mov	r2, r6
 80058ba:	4641      	mov	r1, r8
 80058bc:	f000 faa8 	bl	8005e10 <memmove>
 80058c0:	68a3      	ldr	r3, [r4, #8]
 80058c2:	1b9b      	subs	r3, r3, r6
 80058c4:	60a3      	str	r3, [r4, #8]
 80058c6:	6823      	ldr	r3, [r4, #0]
 80058c8:	4433      	add	r3, r6
 80058ca:	6023      	str	r3, [r4, #0]
 80058cc:	2000      	movs	r0, #0
 80058ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058d2:	462a      	mov	r2, r5
 80058d4:	f000 fad4 	bl	8005e80 <_realloc_r>
 80058d8:	4606      	mov	r6, r0
 80058da:	2800      	cmp	r0, #0
 80058dc:	d1e0      	bne.n	80058a0 <__ssputs_r+0x5c>
 80058de:	6921      	ldr	r1, [r4, #16]
 80058e0:	4650      	mov	r0, sl
 80058e2:	f7ff feb7 	bl	8005654 <_free_r>
 80058e6:	230c      	movs	r3, #12
 80058e8:	f8ca 3000 	str.w	r3, [sl]
 80058ec:	89a3      	ldrh	r3, [r4, #12]
 80058ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80058f2:	81a3      	strh	r3, [r4, #12]
 80058f4:	f04f 30ff 	mov.w	r0, #4294967295
 80058f8:	e7e9      	b.n	80058ce <__ssputs_r+0x8a>
	...

080058fc <_svfiprintf_r>:
 80058fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005900:	4698      	mov	r8, r3
 8005902:	898b      	ldrh	r3, [r1, #12]
 8005904:	061b      	lsls	r3, r3, #24
 8005906:	b09d      	sub	sp, #116	@ 0x74
 8005908:	4607      	mov	r7, r0
 800590a:	460d      	mov	r5, r1
 800590c:	4614      	mov	r4, r2
 800590e:	d510      	bpl.n	8005932 <_svfiprintf_r+0x36>
 8005910:	690b      	ldr	r3, [r1, #16]
 8005912:	b973      	cbnz	r3, 8005932 <_svfiprintf_r+0x36>
 8005914:	2140      	movs	r1, #64	@ 0x40
 8005916:	f7ff ff09 	bl	800572c <_malloc_r>
 800591a:	6028      	str	r0, [r5, #0]
 800591c:	6128      	str	r0, [r5, #16]
 800591e:	b930      	cbnz	r0, 800592e <_svfiprintf_r+0x32>
 8005920:	230c      	movs	r3, #12
 8005922:	603b      	str	r3, [r7, #0]
 8005924:	f04f 30ff 	mov.w	r0, #4294967295
 8005928:	b01d      	add	sp, #116	@ 0x74
 800592a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800592e:	2340      	movs	r3, #64	@ 0x40
 8005930:	616b      	str	r3, [r5, #20]
 8005932:	2300      	movs	r3, #0
 8005934:	9309      	str	r3, [sp, #36]	@ 0x24
 8005936:	2320      	movs	r3, #32
 8005938:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800593c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005940:	2330      	movs	r3, #48	@ 0x30
 8005942:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005ae0 <_svfiprintf_r+0x1e4>
 8005946:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800594a:	f04f 0901 	mov.w	r9, #1
 800594e:	4623      	mov	r3, r4
 8005950:	469a      	mov	sl, r3
 8005952:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005956:	b10a      	cbz	r2, 800595c <_svfiprintf_r+0x60>
 8005958:	2a25      	cmp	r2, #37	@ 0x25
 800595a:	d1f9      	bne.n	8005950 <_svfiprintf_r+0x54>
 800595c:	ebba 0b04 	subs.w	fp, sl, r4
 8005960:	d00b      	beq.n	800597a <_svfiprintf_r+0x7e>
 8005962:	465b      	mov	r3, fp
 8005964:	4622      	mov	r2, r4
 8005966:	4629      	mov	r1, r5
 8005968:	4638      	mov	r0, r7
 800596a:	f7ff ff6b 	bl	8005844 <__ssputs_r>
 800596e:	3001      	adds	r0, #1
 8005970:	f000 80a7 	beq.w	8005ac2 <_svfiprintf_r+0x1c6>
 8005974:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005976:	445a      	add	r2, fp
 8005978:	9209      	str	r2, [sp, #36]	@ 0x24
 800597a:	f89a 3000 	ldrb.w	r3, [sl]
 800597e:	2b00      	cmp	r3, #0
 8005980:	f000 809f 	beq.w	8005ac2 <_svfiprintf_r+0x1c6>
 8005984:	2300      	movs	r3, #0
 8005986:	f04f 32ff 	mov.w	r2, #4294967295
 800598a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800598e:	f10a 0a01 	add.w	sl, sl, #1
 8005992:	9304      	str	r3, [sp, #16]
 8005994:	9307      	str	r3, [sp, #28]
 8005996:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800599a:	931a      	str	r3, [sp, #104]	@ 0x68
 800599c:	4654      	mov	r4, sl
 800599e:	2205      	movs	r2, #5
 80059a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059a4:	484e      	ldr	r0, [pc, #312]	@ (8005ae0 <_svfiprintf_r+0x1e4>)
 80059a6:	f7fa fc23 	bl	80001f0 <memchr>
 80059aa:	9a04      	ldr	r2, [sp, #16]
 80059ac:	b9d8      	cbnz	r0, 80059e6 <_svfiprintf_r+0xea>
 80059ae:	06d0      	lsls	r0, r2, #27
 80059b0:	bf44      	itt	mi
 80059b2:	2320      	movmi	r3, #32
 80059b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80059b8:	0711      	lsls	r1, r2, #28
 80059ba:	bf44      	itt	mi
 80059bc:	232b      	movmi	r3, #43	@ 0x2b
 80059be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80059c2:	f89a 3000 	ldrb.w	r3, [sl]
 80059c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80059c8:	d015      	beq.n	80059f6 <_svfiprintf_r+0xfa>
 80059ca:	9a07      	ldr	r2, [sp, #28]
 80059cc:	4654      	mov	r4, sl
 80059ce:	2000      	movs	r0, #0
 80059d0:	f04f 0c0a 	mov.w	ip, #10
 80059d4:	4621      	mov	r1, r4
 80059d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80059da:	3b30      	subs	r3, #48	@ 0x30
 80059dc:	2b09      	cmp	r3, #9
 80059de:	d94b      	bls.n	8005a78 <_svfiprintf_r+0x17c>
 80059e0:	b1b0      	cbz	r0, 8005a10 <_svfiprintf_r+0x114>
 80059e2:	9207      	str	r2, [sp, #28]
 80059e4:	e014      	b.n	8005a10 <_svfiprintf_r+0x114>
 80059e6:	eba0 0308 	sub.w	r3, r0, r8
 80059ea:	fa09 f303 	lsl.w	r3, r9, r3
 80059ee:	4313      	orrs	r3, r2
 80059f0:	9304      	str	r3, [sp, #16]
 80059f2:	46a2      	mov	sl, r4
 80059f4:	e7d2      	b.n	800599c <_svfiprintf_r+0xa0>
 80059f6:	9b03      	ldr	r3, [sp, #12]
 80059f8:	1d19      	adds	r1, r3, #4
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	9103      	str	r1, [sp, #12]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	bfbb      	ittet	lt
 8005a02:	425b      	neglt	r3, r3
 8005a04:	f042 0202 	orrlt.w	r2, r2, #2
 8005a08:	9307      	strge	r3, [sp, #28]
 8005a0a:	9307      	strlt	r3, [sp, #28]
 8005a0c:	bfb8      	it	lt
 8005a0e:	9204      	strlt	r2, [sp, #16]
 8005a10:	7823      	ldrb	r3, [r4, #0]
 8005a12:	2b2e      	cmp	r3, #46	@ 0x2e
 8005a14:	d10a      	bne.n	8005a2c <_svfiprintf_r+0x130>
 8005a16:	7863      	ldrb	r3, [r4, #1]
 8005a18:	2b2a      	cmp	r3, #42	@ 0x2a
 8005a1a:	d132      	bne.n	8005a82 <_svfiprintf_r+0x186>
 8005a1c:	9b03      	ldr	r3, [sp, #12]
 8005a1e:	1d1a      	adds	r2, r3, #4
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	9203      	str	r2, [sp, #12]
 8005a24:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005a28:	3402      	adds	r4, #2
 8005a2a:	9305      	str	r3, [sp, #20]
 8005a2c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005af0 <_svfiprintf_r+0x1f4>
 8005a30:	7821      	ldrb	r1, [r4, #0]
 8005a32:	2203      	movs	r2, #3
 8005a34:	4650      	mov	r0, sl
 8005a36:	f7fa fbdb 	bl	80001f0 <memchr>
 8005a3a:	b138      	cbz	r0, 8005a4c <_svfiprintf_r+0x150>
 8005a3c:	9b04      	ldr	r3, [sp, #16]
 8005a3e:	eba0 000a 	sub.w	r0, r0, sl
 8005a42:	2240      	movs	r2, #64	@ 0x40
 8005a44:	4082      	lsls	r2, r0
 8005a46:	4313      	orrs	r3, r2
 8005a48:	3401      	adds	r4, #1
 8005a4a:	9304      	str	r3, [sp, #16]
 8005a4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a50:	4824      	ldr	r0, [pc, #144]	@ (8005ae4 <_svfiprintf_r+0x1e8>)
 8005a52:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005a56:	2206      	movs	r2, #6
 8005a58:	f7fa fbca 	bl	80001f0 <memchr>
 8005a5c:	2800      	cmp	r0, #0
 8005a5e:	d036      	beq.n	8005ace <_svfiprintf_r+0x1d2>
 8005a60:	4b21      	ldr	r3, [pc, #132]	@ (8005ae8 <_svfiprintf_r+0x1ec>)
 8005a62:	bb1b      	cbnz	r3, 8005aac <_svfiprintf_r+0x1b0>
 8005a64:	9b03      	ldr	r3, [sp, #12]
 8005a66:	3307      	adds	r3, #7
 8005a68:	f023 0307 	bic.w	r3, r3, #7
 8005a6c:	3308      	adds	r3, #8
 8005a6e:	9303      	str	r3, [sp, #12]
 8005a70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a72:	4433      	add	r3, r6
 8005a74:	9309      	str	r3, [sp, #36]	@ 0x24
 8005a76:	e76a      	b.n	800594e <_svfiprintf_r+0x52>
 8005a78:	fb0c 3202 	mla	r2, ip, r2, r3
 8005a7c:	460c      	mov	r4, r1
 8005a7e:	2001      	movs	r0, #1
 8005a80:	e7a8      	b.n	80059d4 <_svfiprintf_r+0xd8>
 8005a82:	2300      	movs	r3, #0
 8005a84:	3401      	adds	r4, #1
 8005a86:	9305      	str	r3, [sp, #20]
 8005a88:	4619      	mov	r1, r3
 8005a8a:	f04f 0c0a 	mov.w	ip, #10
 8005a8e:	4620      	mov	r0, r4
 8005a90:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005a94:	3a30      	subs	r2, #48	@ 0x30
 8005a96:	2a09      	cmp	r2, #9
 8005a98:	d903      	bls.n	8005aa2 <_svfiprintf_r+0x1a6>
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d0c6      	beq.n	8005a2c <_svfiprintf_r+0x130>
 8005a9e:	9105      	str	r1, [sp, #20]
 8005aa0:	e7c4      	b.n	8005a2c <_svfiprintf_r+0x130>
 8005aa2:	fb0c 2101 	mla	r1, ip, r1, r2
 8005aa6:	4604      	mov	r4, r0
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	e7f0      	b.n	8005a8e <_svfiprintf_r+0x192>
 8005aac:	ab03      	add	r3, sp, #12
 8005aae:	9300      	str	r3, [sp, #0]
 8005ab0:	462a      	mov	r2, r5
 8005ab2:	4b0e      	ldr	r3, [pc, #56]	@ (8005aec <_svfiprintf_r+0x1f0>)
 8005ab4:	a904      	add	r1, sp, #16
 8005ab6:	4638      	mov	r0, r7
 8005ab8:	f3af 8000 	nop.w
 8005abc:	1c42      	adds	r2, r0, #1
 8005abe:	4606      	mov	r6, r0
 8005ac0:	d1d6      	bne.n	8005a70 <_svfiprintf_r+0x174>
 8005ac2:	89ab      	ldrh	r3, [r5, #12]
 8005ac4:	065b      	lsls	r3, r3, #25
 8005ac6:	f53f af2d 	bmi.w	8005924 <_svfiprintf_r+0x28>
 8005aca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005acc:	e72c      	b.n	8005928 <_svfiprintf_r+0x2c>
 8005ace:	ab03      	add	r3, sp, #12
 8005ad0:	9300      	str	r3, [sp, #0]
 8005ad2:	462a      	mov	r2, r5
 8005ad4:	4b05      	ldr	r3, [pc, #20]	@ (8005aec <_svfiprintf_r+0x1f0>)
 8005ad6:	a904      	add	r1, sp, #16
 8005ad8:	4638      	mov	r0, r7
 8005ada:	f000 f879 	bl	8005bd0 <_printf_i>
 8005ade:	e7ed      	b.n	8005abc <_svfiprintf_r+0x1c0>
 8005ae0:	08005f54 	.word	0x08005f54
 8005ae4:	08005f5e 	.word	0x08005f5e
 8005ae8:	00000000 	.word	0x00000000
 8005aec:	08005845 	.word	0x08005845
 8005af0:	08005f5a 	.word	0x08005f5a

08005af4 <_printf_common>:
 8005af4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005af8:	4616      	mov	r6, r2
 8005afa:	4698      	mov	r8, r3
 8005afc:	688a      	ldr	r2, [r1, #8]
 8005afe:	690b      	ldr	r3, [r1, #16]
 8005b00:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005b04:	4293      	cmp	r3, r2
 8005b06:	bfb8      	it	lt
 8005b08:	4613      	movlt	r3, r2
 8005b0a:	6033      	str	r3, [r6, #0]
 8005b0c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005b10:	4607      	mov	r7, r0
 8005b12:	460c      	mov	r4, r1
 8005b14:	b10a      	cbz	r2, 8005b1a <_printf_common+0x26>
 8005b16:	3301      	adds	r3, #1
 8005b18:	6033      	str	r3, [r6, #0]
 8005b1a:	6823      	ldr	r3, [r4, #0]
 8005b1c:	0699      	lsls	r1, r3, #26
 8005b1e:	bf42      	ittt	mi
 8005b20:	6833      	ldrmi	r3, [r6, #0]
 8005b22:	3302      	addmi	r3, #2
 8005b24:	6033      	strmi	r3, [r6, #0]
 8005b26:	6825      	ldr	r5, [r4, #0]
 8005b28:	f015 0506 	ands.w	r5, r5, #6
 8005b2c:	d106      	bne.n	8005b3c <_printf_common+0x48>
 8005b2e:	f104 0a19 	add.w	sl, r4, #25
 8005b32:	68e3      	ldr	r3, [r4, #12]
 8005b34:	6832      	ldr	r2, [r6, #0]
 8005b36:	1a9b      	subs	r3, r3, r2
 8005b38:	42ab      	cmp	r3, r5
 8005b3a:	dc26      	bgt.n	8005b8a <_printf_common+0x96>
 8005b3c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005b40:	6822      	ldr	r2, [r4, #0]
 8005b42:	3b00      	subs	r3, #0
 8005b44:	bf18      	it	ne
 8005b46:	2301      	movne	r3, #1
 8005b48:	0692      	lsls	r2, r2, #26
 8005b4a:	d42b      	bmi.n	8005ba4 <_printf_common+0xb0>
 8005b4c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005b50:	4641      	mov	r1, r8
 8005b52:	4638      	mov	r0, r7
 8005b54:	47c8      	blx	r9
 8005b56:	3001      	adds	r0, #1
 8005b58:	d01e      	beq.n	8005b98 <_printf_common+0xa4>
 8005b5a:	6823      	ldr	r3, [r4, #0]
 8005b5c:	6922      	ldr	r2, [r4, #16]
 8005b5e:	f003 0306 	and.w	r3, r3, #6
 8005b62:	2b04      	cmp	r3, #4
 8005b64:	bf02      	ittt	eq
 8005b66:	68e5      	ldreq	r5, [r4, #12]
 8005b68:	6833      	ldreq	r3, [r6, #0]
 8005b6a:	1aed      	subeq	r5, r5, r3
 8005b6c:	68a3      	ldr	r3, [r4, #8]
 8005b6e:	bf0c      	ite	eq
 8005b70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005b74:	2500      	movne	r5, #0
 8005b76:	4293      	cmp	r3, r2
 8005b78:	bfc4      	itt	gt
 8005b7a:	1a9b      	subgt	r3, r3, r2
 8005b7c:	18ed      	addgt	r5, r5, r3
 8005b7e:	2600      	movs	r6, #0
 8005b80:	341a      	adds	r4, #26
 8005b82:	42b5      	cmp	r5, r6
 8005b84:	d11a      	bne.n	8005bbc <_printf_common+0xc8>
 8005b86:	2000      	movs	r0, #0
 8005b88:	e008      	b.n	8005b9c <_printf_common+0xa8>
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	4652      	mov	r2, sl
 8005b8e:	4641      	mov	r1, r8
 8005b90:	4638      	mov	r0, r7
 8005b92:	47c8      	blx	r9
 8005b94:	3001      	adds	r0, #1
 8005b96:	d103      	bne.n	8005ba0 <_printf_common+0xac>
 8005b98:	f04f 30ff 	mov.w	r0, #4294967295
 8005b9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ba0:	3501      	adds	r5, #1
 8005ba2:	e7c6      	b.n	8005b32 <_printf_common+0x3e>
 8005ba4:	18e1      	adds	r1, r4, r3
 8005ba6:	1c5a      	adds	r2, r3, #1
 8005ba8:	2030      	movs	r0, #48	@ 0x30
 8005baa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005bae:	4422      	add	r2, r4
 8005bb0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005bb4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005bb8:	3302      	adds	r3, #2
 8005bba:	e7c7      	b.n	8005b4c <_printf_common+0x58>
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	4622      	mov	r2, r4
 8005bc0:	4641      	mov	r1, r8
 8005bc2:	4638      	mov	r0, r7
 8005bc4:	47c8      	blx	r9
 8005bc6:	3001      	adds	r0, #1
 8005bc8:	d0e6      	beq.n	8005b98 <_printf_common+0xa4>
 8005bca:	3601      	adds	r6, #1
 8005bcc:	e7d9      	b.n	8005b82 <_printf_common+0x8e>
	...

08005bd0 <_printf_i>:
 8005bd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005bd4:	7e0f      	ldrb	r7, [r1, #24]
 8005bd6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005bd8:	2f78      	cmp	r7, #120	@ 0x78
 8005bda:	4691      	mov	r9, r2
 8005bdc:	4680      	mov	r8, r0
 8005bde:	460c      	mov	r4, r1
 8005be0:	469a      	mov	sl, r3
 8005be2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005be6:	d807      	bhi.n	8005bf8 <_printf_i+0x28>
 8005be8:	2f62      	cmp	r7, #98	@ 0x62
 8005bea:	d80a      	bhi.n	8005c02 <_printf_i+0x32>
 8005bec:	2f00      	cmp	r7, #0
 8005bee:	f000 80d2 	beq.w	8005d96 <_printf_i+0x1c6>
 8005bf2:	2f58      	cmp	r7, #88	@ 0x58
 8005bf4:	f000 80b9 	beq.w	8005d6a <_printf_i+0x19a>
 8005bf8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005bfc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005c00:	e03a      	b.n	8005c78 <_printf_i+0xa8>
 8005c02:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005c06:	2b15      	cmp	r3, #21
 8005c08:	d8f6      	bhi.n	8005bf8 <_printf_i+0x28>
 8005c0a:	a101      	add	r1, pc, #4	@ (adr r1, 8005c10 <_printf_i+0x40>)
 8005c0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005c10:	08005c69 	.word	0x08005c69
 8005c14:	08005c7d 	.word	0x08005c7d
 8005c18:	08005bf9 	.word	0x08005bf9
 8005c1c:	08005bf9 	.word	0x08005bf9
 8005c20:	08005bf9 	.word	0x08005bf9
 8005c24:	08005bf9 	.word	0x08005bf9
 8005c28:	08005c7d 	.word	0x08005c7d
 8005c2c:	08005bf9 	.word	0x08005bf9
 8005c30:	08005bf9 	.word	0x08005bf9
 8005c34:	08005bf9 	.word	0x08005bf9
 8005c38:	08005bf9 	.word	0x08005bf9
 8005c3c:	08005d7d 	.word	0x08005d7d
 8005c40:	08005ca7 	.word	0x08005ca7
 8005c44:	08005d37 	.word	0x08005d37
 8005c48:	08005bf9 	.word	0x08005bf9
 8005c4c:	08005bf9 	.word	0x08005bf9
 8005c50:	08005d9f 	.word	0x08005d9f
 8005c54:	08005bf9 	.word	0x08005bf9
 8005c58:	08005ca7 	.word	0x08005ca7
 8005c5c:	08005bf9 	.word	0x08005bf9
 8005c60:	08005bf9 	.word	0x08005bf9
 8005c64:	08005d3f 	.word	0x08005d3f
 8005c68:	6833      	ldr	r3, [r6, #0]
 8005c6a:	1d1a      	adds	r2, r3, #4
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	6032      	str	r2, [r6, #0]
 8005c70:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005c74:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005c78:	2301      	movs	r3, #1
 8005c7a:	e09d      	b.n	8005db8 <_printf_i+0x1e8>
 8005c7c:	6833      	ldr	r3, [r6, #0]
 8005c7e:	6820      	ldr	r0, [r4, #0]
 8005c80:	1d19      	adds	r1, r3, #4
 8005c82:	6031      	str	r1, [r6, #0]
 8005c84:	0606      	lsls	r6, r0, #24
 8005c86:	d501      	bpl.n	8005c8c <_printf_i+0xbc>
 8005c88:	681d      	ldr	r5, [r3, #0]
 8005c8a:	e003      	b.n	8005c94 <_printf_i+0xc4>
 8005c8c:	0645      	lsls	r5, r0, #25
 8005c8e:	d5fb      	bpl.n	8005c88 <_printf_i+0xb8>
 8005c90:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005c94:	2d00      	cmp	r5, #0
 8005c96:	da03      	bge.n	8005ca0 <_printf_i+0xd0>
 8005c98:	232d      	movs	r3, #45	@ 0x2d
 8005c9a:	426d      	negs	r5, r5
 8005c9c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005ca0:	4859      	ldr	r0, [pc, #356]	@ (8005e08 <_printf_i+0x238>)
 8005ca2:	230a      	movs	r3, #10
 8005ca4:	e011      	b.n	8005cca <_printf_i+0xfa>
 8005ca6:	6821      	ldr	r1, [r4, #0]
 8005ca8:	6833      	ldr	r3, [r6, #0]
 8005caa:	0608      	lsls	r0, r1, #24
 8005cac:	f853 5b04 	ldr.w	r5, [r3], #4
 8005cb0:	d402      	bmi.n	8005cb8 <_printf_i+0xe8>
 8005cb2:	0649      	lsls	r1, r1, #25
 8005cb4:	bf48      	it	mi
 8005cb6:	b2ad      	uxthmi	r5, r5
 8005cb8:	2f6f      	cmp	r7, #111	@ 0x6f
 8005cba:	4853      	ldr	r0, [pc, #332]	@ (8005e08 <_printf_i+0x238>)
 8005cbc:	6033      	str	r3, [r6, #0]
 8005cbe:	bf14      	ite	ne
 8005cc0:	230a      	movne	r3, #10
 8005cc2:	2308      	moveq	r3, #8
 8005cc4:	2100      	movs	r1, #0
 8005cc6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005cca:	6866      	ldr	r6, [r4, #4]
 8005ccc:	60a6      	str	r6, [r4, #8]
 8005cce:	2e00      	cmp	r6, #0
 8005cd0:	bfa2      	ittt	ge
 8005cd2:	6821      	ldrge	r1, [r4, #0]
 8005cd4:	f021 0104 	bicge.w	r1, r1, #4
 8005cd8:	6021      	strge	r1, [r4, #0]
 8005cda:	b90d      	cbnz	r5, 8005ce0 <_printf_i+0x110>
 8005cdc:	2e00      	cmp	r6, #0
 8005cde:	d04b      	beq.n	8005d78 <_printf_i+0x1a8>
 8005ce0:	4616      	mov	r6, r2
 8005ce2:	fbb5 f1f3 	udiv	r1, r5, r3
 8005ce6:	fb03 5711 	mls	r7, r3, r1, r5
 8005cea:	5dc7      	ldrb	r7, [r0, r7]
 8005cec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005cf0:	462f      	mov	r7, r5
 8005cf2:	42bb      	cmp	r3, r7
 8005cf4:	460d      	mov	r5, r1
 8005cf6:	d9f4      	bls.n	8005ce2 <_printf_i+0x112>
 8005cf8:	2b08      	cmp	r3, #8
 8005cfa:	d10b      	bne.n	8005d14 <_printf_i+0x144>
 8005cfc:	6823      	ldr	r3, [r4, #0]
 8005cfe:	07df      	lsls	r7, r3, #31
 8005d00:	d508      	bpl.n	8005d14 <_printf_i+0x144>
 8005d02:	6923      	ldr	r3, [r4, #16]
 8005d04:	6861      	ldr	r1, [r4, #4]
 8005d06:	4299      	cmp	r1, r3
 8005d08:	bfde      	ittt	le
 8005d0a:	2330      	movle	r3, #48	@ 0x30
 8005d0c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005d10:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005d14:	1b92      	subs	r2, r2, r6
 8005d16:	6122      	str	r2, [r4, #16]
 8005d18:	f8cd a000 	str.w	sl, [sp]
 8005d1c:	464b      	mov	r3, r9
 8005d1e:	aa03      	add	r2, sp, #12
 8005d20:	4621      	mov	r1, r4
 8005d22:	4640      	mov	r0, r8
 8005d24:	f7ff fee6 	bl	8005af4 <_printf_common>
 8005d28:	3001      	adds	r0, #1
 8005d2a:	d14a      	bne.n	8005dc2 <_printf_i+0x1f2>
 8005d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8005d30:	b004      	add	sp, #16
 8005d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d36:	6823      	ldr	r3, [r4, #0]
 8005d38:	f043 0320 	orr.w	r3, r3, #32
 8005d3c:	6023      	str	r3, [r4, #0]
 8005d3e:	4833      	ldr	r0, [pc, #204]	@ (8005e0c <_printf_i+0x23c>)
 8005d40:	2778      	movs	r7, #120	@ 0x78
 8005d42:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005d46:	6823      	ldr	r3, [r4, #0]
 8005d48:	6831      	ldr	r1, [r6, #0]
 8005d4a:	061f      	lsls	r7, r3, #24
 8005d4c:	f851 5b04 	ldr.w	r5, [r1], #4
 8005d50:	d402      	bmi.n	8005d58 <_printf_i+0x188>
 8005d52:	065f      	lsls	r7, r3, #25
 8005d54:	bf48      	it	mi
 8005d56:	b2ad      	uxthmi	r5, r5
 8005d58:	6031      	str	r1, [r6, #0]
 8005d5a:	07d9      	lsls	r1, r3, #31
 8005d5c:	bf44      	itt	mi
 8005d5e:	f043 0320 	orrmi.w	r3, r3, #32
 8005d62:	6023      	strmi	r3, [r4, #0]
 8005d64:	b11d      	cbz	r5, 8005d6e <_printf_i+0x19e>
 8005d66:	2310      	movs	r3, #16
 8005d68:	e7ac      	b.n	8005cc4 <_printf_i+0xf4>
 8005d6a:	4827      	ldr	r0, [pc, #156]	@ (8005e08 <_printf_i+0x238>)
 8005d6c:	e7e9      	b.n	8005d42 <_printf_i+0x172>
 8005d6e:	6823      	ldr	r3, [r4, #0]
 8005d70:	f023 0320 	bic.w	r3, r3, #32
 8005d74:	6023      	str	r3, [r4, #0]
 8005d76:	e7f6      	b.n	8005d66 <_printf_i+0x196>
 8005d78:	4616      	mov	r6, r2
 8005d7a:	e7bd      	b.n	8005cf8 <_printf_i+0x128>
 8005d7c:	6833      	ldr	r3, [r6, #0]
 8005d7e:	6825      	ldr	r5, [r4, #0]
 8005d80:	6961      	ldr	r1, [r4, #20]
 8005d82:	1d18      	adds	r0, r3, #4
 8005d84:	6030      	str	r0, [r6, #0]
 8005d86:	062e      	lsls	r6, r5, #24
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	d501      	bpl.n	8005d90 <_printf_i+0x1c0>
 8005d8c:	6019      	str	r1, [r3, #0]
 8005d8e:	e002      	b.n	8005d96 <_printf_i+0x1c6>
 8005d90:	0668      	lsls	r0, r5, #25
 8005d92:	d5fb      	bpl.n	8005d8c <_printf_i+0x1bc>
 8005d94:	8019      	strh	r1, [r3, #0]
 8005d96:	2300      	movs	r3, #0
 8005d98:	6123      	str	r3, [r4, #16]
 8005d9a:	4616      	mov	r6, r2
 8005d9c:	e7bc      	b.n	8005d18 <_printf_i+0x148>
 8005d9e:	6833      	ldr	r3, [r6, #0]
 8005da0:	1d1a      	adds	r2, r3, #4
 8005da2:	6032      	str	r2, [r6, #0]
 8005da4:	681e      	ldr	r6, [r3, #0]
 8005da6:	6862      	ldr	r2, [r4, #4]
 8005da8:	2100      	movs	r1, #0
 8005daa:	4630      	mov	r0, r6
 8005dac:	f7fa fa20 	bl	80001f0 <memchr>
 8005db0:	b108      	cbz	r0, 8005db6 <_printf_i+0x1e6>
 8005db2:	1b80      	subs	r0, r0, r6
 8005db4:	6060      	str	r0, [r4, #4]
 8005db6:	6863      	ldr	r3, [r4, #4]
 8005db8:	6123      	str	r3, [r4, #16]
 8005dba:	2300      	movs	r3, #0
 8005dbc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005dc0:	e7aa      	b.n	8005d18 <_printf_i+0x148>
 8005dc2:	6923      	ldr	r3, [r4, #16]
 8005dc4:	4632      	mov	r2, r6
 8005dc6:	4649      	mov	r1, r9
 8005dc8:	4640      	mov	r0, r8
 8005dca:	47d0      	blx	sl
 8005dcc:	3001      	adds	r0, #1
 8005dce:	d0ad      	beq.n	8005d2c <_printf_i+0x15c>
 8005dd0:	6823      	ldr	r3, [r4, #0]
 8005dd2:	079b      	lsls	r3, r3, #30
 8005dd4:	d413      	bmi.n	8005dfe <_printf_i+0x22e>
 8005dd6:	68e0      	ldr	r0, [r4, #12]
 8005dd8:	9b03      	ldr	r3, [sp, #12]
 8005dda:	4298      	cmp	r0, r3
 8005ddc:	bfb8      	it	lt
 8005dde:	4618      	movlt	r0, r3
 8005de0:	e7a6      	b.n	8005d30 <_printf_i+0x160>
 8005de2:	2301      	movs	r3, #1
 8005de4:	4632      	mov	r2, r6
 8005de6:	4649      	mov	r1, r9
 8005de8:	4640      	mov	r0, r8
 8005dea:	47d0      	blx	sl
 8005dec:	3001      	adds	r0, #1
 8005dee:	d09d      	beq.n	8005d2c <_printf_i+0x15c>
 8005df0:	3501      	adds	r5, #1
 8005df2:	68e3      	ldr	r3, [r4, #12]
 8005df4:	9903      	ldr	r1, [sp, #12]
 8005df6:	1a5b      	subs	r3, r3, r1
 8005df8:	42ab      	cmp	r3, r5
 8005dfa:	dcf2      	bgt.n	8005de2 <_printf_i+0x212>
 8005dfc:	e7eb      	b.n	8005dd6 <_printf_i+0x206>
 8005dfe:	2500      	movs	r5, #0
 8005e00:	f104 0619 	add.w	r6, r4, #25
 8005e04:	e7f5      	b.n	8005df2 <_printf_i+0x222>
 8005e06:	bf00      	nop
 8005e08:	08005f65 	.word	0x08005f65
 8005e0c:	08005f76 	.word	0x08005f76

08005e10 <memmove>:
 8005e10:	4288      	cmp	r0, r1
 8005e12:	b510      	push	{r4, lr}
 8005e14:	eb01 0402 	add.w	r4, r1, r2
 8005e18:	d902      	bls.n	8005e20 <memmove+0x10>
 8005e1a:	4284      	cmp	r4, r0
 8005e1c:	4623      	mov	r3, r4
 8005e1e:	d807      	bhi.n	8005e30 <memmove+0x20>
 8005e20:	1e43      	subs	r3, r0, #1
 8005e22:	42a1      	cmp	r1, r4
 8005e24:	d008      	beq.n	8005e38 <memmove+0x28>
 8005e26:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005e2a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005e2e:	e7f8      	b.n	8005e22 <memmove+0x12>
 8005e30:	4402      	add	r2, r0
 8005e32:	4601      	mov	r1, r0
 8005e34:	428a      	cmp	r2, r1
 8005e36:	d100      	bne.n	8005e3a <memmove+0x2a>
 8005e38:	bd10      	pop	{r4, pc}
 8005e3a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005e3e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005e42:	e7f7      	b.n	8005e34 <memmove+0x24>

08005e44 <_sbrk_r>:
 8005e44:	b538      	push	{r3, r4, r5, lr}
 8005e46:	4d06      	ldr	r5, [pc, #24]	@ (8005e60 <_sbrk_r+0x1c>)
 8005e48:	2300      	movs	r3, #0
 8005e4a:	4604      	mov	r4, r0
 8005e4c:	4608      	mov	r0, r1
 8005e4e:	602b      	str	r3, [r5, #0]
 8005e50:	f7fb fb8e 	bl	8001570 <_sbrk>
 8005e54:	1c43      	adds	r3, r0, #1
 8005e56:	d102      	bne.n	8005e5e <_sbrk_r+0x1a>
 8005e58:	682b      	ldr	r3, [r5, #0]
 8005e5a:	b103      	cbz	r3, 8005e5e <_sbrk_r+0x1a>
 8005e5c:	6023      	str	r3, [r4, #0]
 8005e5e:	bd38      	pop	{r3, r4, r5, pc}
 8005e60:	20000a3c 	.word	0x20000a3c

08005e64 <memcpy>:
 8005e64:	440a      	add	r2, r1
 8005e66:	4291      	cmp	r1, r2
 8005e68:	f100 33ff 	add.w	r3, r0, #4294967295
 8005e6c:	d100      	bne.n	8005e70 <memcpy+0xc>
 8005e6e:	4770      	bx	lr
 8005e70:	b510      	push	{r4, lr}
 8005e72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e76:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e7a:	4291      	cmp	r1, r2
 8005e7c:	d1f9      	bne.n	8005e72 <memcpy+0xe>
 8005e7e:	bd10      	pop	{r4, pc}

08005e80 <_realloc_r>:
 8005e80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e84:	4680      	mov	r8, r0
 8005e86:	4615      	mov	r5, r2
 8005e88:	460c      	mov	r4, r1
 8005e8a:	b921      	cbnz	r1, 8005e96 <_realloc_r+0x16>
 8005e8c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e90:	4611      	mov	r1, r2
 8005e92:	f7ff bc4b 	b.w	800572c <_malloc_r>
 8005e96:	b92a      	cbnz	r2, 8005ea4 <_realloc_r+0x24>
 8005e98:	f7ff fbdc 	bl	8005654 <_free_r>
 8005e9c:	2400      	movs	r4, #0
 8005e9e:	4620      	mov	r0, r4
 8005ea0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ea4:	f000 f81a 	bl	8005edc <_malloc_usable_size_r>
 8005ea8:	4285      	cmp	r5, r0
 8005eaa:	4606      	mov	r6, r0
 8005eac:	d802      	bhi.n	8005eb4 <_realloc_r+0x34>
 8005eae:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005eb2:	d8f4      	bhi.n	8005e9e <_realloc_r+0x1e>
 8005eb4:	4629      	mov	r1, r5
 8005eb6:	4640      	mov	r0, r8
 8005eb8:	f7ff fc38 	bl	800572c <_malloc_r>
 8005ebc:	4607      	mov	r7, r0
 8005ebe:	2800      	cmp	r0, #0
 8005ec0:	d0ec      	beq.n	8005e9c <_realloc_r+0x1c>
 8005ec2:	42b5      	cmp	r5, r6
 8005ec4:	462a      	mov	r2, r5
 8005ec6:	4621      	mov	r1, r4
 8005ec8:	bf28      	it	cs
 8005eca:	4632      	movcs	r2, r6
 8005ecc:	f7ff ffca 	bl	8005e64 <memcpy>
 8005ed0:	4621      	mov	r1, r4
 8005ed2:	4640      	mov	r0, r8
 8005ed4:	f7ff fbbe 	bl	8005654 <_free_r>
 8005ed8:	463c      	mov	r4, r7
 8005eda:	e7e0      	b.n	8005e9e <_realloc_r+0x1e>

08005edc <_malloc_usable_size_r>:
 8005edc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ee0:	1f18      	subs	r0, r3, #4
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	bfbc      	itt	lt
 8005ee6:	580b      	ldrlt	r3, [r1, r0]
 8005ee8:	18c0      	addlt	r0, r0, r3
 8005eea:	4770      	bx	lr

08005eec <_init>:
 8005eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eee:	bf00      	nop
 8005ef0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ef2:	bc08      	pop	{r3}
 8005ef4:	469e      	mov	lr, r3
 8005ef6:	4770      	bx	lr

08005ef8 <_fini>:
 8005ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005efa:	bf00      	nop
 8005efc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005efe:	bc08      	pop	{r3}
 8005f00:	469e      	mov	lr, r3
 8005f02:	4770      	bx	lr
